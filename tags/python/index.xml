<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on TutsWiki Beta</title><link>https://tutswiki.com/tags/python/</link><description>Recent content in Python on TutsWiki Beta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tutswiki.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://tutswiki.com/python/introduction/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/introduction/</guid><description>This Google Trends analysis shows how the interest of Python worldwide scaled up above all other Object-Oriented Programming languages in the last few years. Almost every industry worldwide is using Python somehow due to its wide range of applications and easy to understand syntax. So, learning Python would make you a proficient software developer who is job-ready and can apply his/her skills to solve real-world problems.
Another great reason for learning Python is it’s large Open Source community.</description></item><item><title>Decorators in Python</title><link>https://tutswiki.com/python/decorators/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/decorators/</guid><description>Have you ever heard about Gift wrappings? Exactly, those which we do on the presents to be gifted. Decorators in Python are nothing but the Gift Wrapping but for functions and classes. In this tutorial, we will deep dive into the implementation of decorators on functions. But before you get into the topic, you should have a proper understanding of functions in Python. Assuming that you have, let&amp;rsquo;s get started.</description></item><item><title>Exceptions in Python</title><link>https://tutswiki.com/python/exceptions/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/exceptions/</guid><description>In this tutorial, we will be learning about Exceptions. So without further ado, let&amp;rsquo;s get started.
What is an Exception? The very first question that pops up in our minds.
An Exception is an unexpected problem or issue that alters the normal flow of execution.
What is an Exception in Python? Exception in Python is an event that occurs at runtime which disrupts the flow of execution of a program and terminates it abnormally if left unhandled.</description></item><item><title>Exception Handling in Python</title><link>https://tutswiki.com/python/exception-handling/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/exception-handling/</guid><description>Now that we have knowledge of Exceptions and its types, the question arises,
How do we handle exceptions so that flow of our program does not stop abruptly?
Well, for that Python Exception Handling comes to our rescue.
Exception Handling in Python Python provides us try, raise, except and finally blocks for handling raised exceptions properly. Let us understand each of them using an example.
try and except try: x = int(input(&amp;#34;Enter an integer: &amp;#34;)) except ValueError as te: print(&amp;#34;Exception Occured:&amp;#34;,te) Output:</description></item><item><title>How to setup and access QuestDB using Python</title><link>https://tutswiki.com/setup-access-questdb-python-notebook/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/setup-access-questdb-python-notebook/</guid><description>What is QuestDB? It is a tremendously fast NewSQL database which is avaiable as Open source software under Apache 2.0 license. It is basically like a superset of a SQL database (with added features and support for time-varying data or event data). It is made with the prime focus on performance.
What makes QuestDB stand apart from other databases? SIMD aggregations: QuestDB uses vectorized operations to perform many operations on only one CPU procedure which makes it do tasks in a must faster and efficient way.</description></item><item><title>How to convert a Python script to module</title><link>https://tutswiki.com/convert-python-script-to-module/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/convert-python-script-to-module/</guid><description>It&amp;rsquo;s common to create small scripts which we want to combine into a larger script. We don&amp;rsquo;t want to copy and paste the code. We want to leave the working code in one file and use it in multiple places. Often we want to combine elements from multiple files to create more sophisticated scripts.
The problem we have is that when we import a script it actually starts running. This is generally not what we expect when we import a script so that we can reuse it.</description></item><item><title>Abstract classes and interfaces in Python</title><link>https://tutswiki.com/abstract-classes-and-interfaces-in-python/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/abstract-classes-and-interfaces-in-python/</guid><description>Abstract base classes and interfaces are entities that are similar in purpose and meaning. Both the first and second are a peculiar way of documenting the code and help to limit (decouple) the interaction of individual abstractions in the program (classes).
Python is a very flexible language. One facet of this flexibility is the possibilities provided by metaprogramming. And although abstract classes and interfaces are not represented in the core of the language, the former were implemented in the standard abc module, and the latter in the Zope project (the zope.</description></item><item><title>What is the use of yield in Python?</title><link>https://tutswiki.com/what-is-the-use-of-yield-in-python/</link><pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/what-is-the-use-of-yield-in-python/</guid><description> References What does the “yield” keyword do in Python? Yield expressions</description></item><item><title>Difference between append and extend in Python</title><link>https://tutswiki.com/append-vs-extend-python/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/append-vs-extend-python/</guid><description>append and extend are list methods in Python which can be used to combine multiple lists. But what is the difference between them? When should you use one over another, let&amp;rsquo;s find out.
The official documentation describes them as:
list.append(x): Add an item to the end of the list; equivalent to a[len(a):] = [x].
list.extend(L): Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.</description></item><item><title>How to print on same line with print in Python</title><link>https://tutswiki.com/print-same-line-python/</link><pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/print-same-line-python/</guid><description>In Python, when you use the print function, it prints a new line at the end.
For example:
print &amp;#34;This is some line.&amp;#34; print &amp;#34;This is another line.&amp;#34; Output:
This is some line. This is another line. What if you want to avoid the newline and want to print both statements on same line? Well, there are 2 possible solutions.
(adsbygoogle = window.adsbygoogle || []).push({}); Add comma at the end of print print &amp;#34;This is some line.</description></item><item><title>Writing and Reading config files in Python</title><link>https://tutswiki.com/read-write-config-files-in-python/</link><pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/read-write-config-files-in-python/</guid><description>I&amp;rsquo;m sure you must be aware about the importance of configuration files. Config files help creating the initial settings for any project, they help avoiding the hardcoded data.
Imagine if you migrate your server to a new host and suddenly your application stops working, now you have to go through your code and search/replace IP address of host at all the places. Config file comes to the rescue in such situation.</description></item><item><title>How to run a Python module as script?</title><link>https://tutswiki.com/run-module-as-script-python/</link><pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/run-module-as-script-python/</guid><description>Suppose you have a module named mymath.py, which has a couple of functions. You can import this module in your script and call these functions.
def int_sum(a, b): print a+b def some_other_function(): pass But, what if you want to run the module itself as a script?
(adsbygoogle = window.adsbygoogle || []).push({}); Well, if you want to use a Python module as script then you just have to use the conditional for __name__.</description></item><item><title>What is if __name__ == "__main__" in Python?</title><link>https://tutswiki.com/if-name-main-in-python/</link><pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate><guid>https://tutswiki.com/if-name-main-in-python/</guid><description>If you are new to Python then you may have noticed if __name__ == &amp;quot;__main__&amp;quot; line in some python codes.
You may be wondering:
What does that mean? What purpose does it serve? I don&amp;rsquo;t see it in all Python codes, so when should I use it exactly? Can you give me some examples? Let me try to explain the above to you.
In Python all modules have some built-in attributes.</description></item></channel></rss>