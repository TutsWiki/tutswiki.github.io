<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on TutsWiki Beta</title>
    <link>http://tutswiki.com/tags/python/</link>
    <description>Recent content in Python on TutsWiki Beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tutswiki.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is the use of yield in Python?</title>
      <link>http://tutswiki.com/what-is-the-use-of-yield-in-python/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/what-is-the-use-of-yield-in-python/</guid>
      <description> References  What does the “yield” keyword do in Python? Yield expressions  </description>
    </item>
    
    <item>
      <title>Difference between append and extend in Python</title>
      <link>http://tutswiki.com/append-vs-extend-python/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/append-vs-extend-python/</guid>
      <description>append and extend are list methods in Python which can be used to combine multiple lists. But what is the difference between them? When should you use one over another, let&amp;rsquo;s find out.
The official documentation describes them as:
 list.append(x): Add an item to the end of the list; equivalent to a[len(a):] = [x].
 list.extend(L): Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.</description>
    </item>
    
    <item>
      <title>How to print on same line with print in Python</title>
      <link>http://tutswiki.com/print-same-line-python/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/print-same-line-python/</guid>
      <description>In Python, when you use the print function, it prints a new line at the end.
For example:
print &amp;quot;This is some line.&amp;quot; print &amp;quot;This is another line.&amp;quot;  Output:
This is some line. This is another line.  What if you want to avoid the newline and want to print both statements on same line? Well, there are 2 possible solutions.
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Writing and Reading config files in Python</title>
      <link>http://tutswiki.com/read-write-config-files-in-python/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/read-write-config-files-in-python/</guid>
      <description>I&amp;rsquo;m sure you must be aware about the importance of configuration files. Config files help creating the initial settings for any project, they help avoiding the hardcoded data.
Imagine if you migrate your server to a new host and suddenly your application stops working, now you have to go through your code and search/replace IP address of host at all the places. Config file comes to the rescue in such situation.</description>
    </item>
    
    <item>
      <title>How to run a Python module as script?</title>
      <link>http://tutswiki.com/run-module-as-script-python/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/run-module-as-script-python/</guid>
      <description>Suppose you have a module named mymath.py, which has a couple of functions. You can import this module in your script and call these functions.
def int_sum(a, b): print a+b def some_other_function(): pass  But, what if you want to run the module itself as a script?
Well, if you want to use a Python module as script then you just have to use the conditional for __name__.
def int_sum(a, b): print a+b if __name__ == &amp;quot;__main__&amp;quot;: import sys int_sum(int(sys.</description>
    </item>
    
    <item>
      <title>What is if __name__ == &#34;__main__&#34; in Python?</title>
      <link>http://tutswiki.com/if-name-main-in-python/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tutswiki.com/if-name-main-in-python/</guid>
      <description>If you are new to Python then you may have noticed if __name__ == &amp;quot;__main__&amp;quot; line in some python codes.
You may be wondering:
 What does that mean? What purpose does it serve? I don&amp;rsquo;t see it in all Python codes, so when should I use it exactly? Can you give me some examples?  Let me try to explain the above to you.
In Python all modules have some built-in attributes.</description>
    </item>
    
  </channel>
</rss>