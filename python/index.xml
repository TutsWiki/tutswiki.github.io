<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on TutsWiki Beta</title><link>https://tutswiki.com/python/</link><description>Recent content in Python on TutsWiki Beta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tutswiki.com/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://tutswiki.com/python/introduction/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/introduction/</guid><description>This Google Trends analysis shows how the interest of Python worldwide scaled up above all other Object-Oriented Programming languages in the last few years. Almost every industry worldwide is using Python somehow due to its wide range of applications and easy to understand syntax. So, learning Python would make you a proficient software developer who is job-ready and can apply his/her skills to solve real-world problems.
Another great reason for learning Python is itâ€™s large Open Source community.</description></item><item><title>Threading in Python</title><link>https://tutswiki.com/python/threading/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/threading/</guid><description>In this tutorial, we will understand the concept of threading in Python. Let us begin by defining the term thread.
What is Thread? A thread is a lightweight execution unit that can be managed independently by a scheduler consisting of its program counter, a stack, and a register set.
A register is a temporary storage unit built inside a CPU. A program counter is a register that contains the address of the executing instruction.</description></item><item><title>Modules in Python</title><link>https://tutswiki.com/python/modules/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/modules/</guid><description>In this article, we will be learning about modules in Python. Let us begin by defining the term module.
What is a Module? A module is a file that consists of constants, variables, functions, and classes. In python, modules have the extension .py. It can be built-in or user-defined.
A module provides code reusability. We can import modules in a program (which we will be learning in the next section) and use its functions, classes, and variables so that we do not have to write them repeatedly hence reducing the length of the code.</description></item><item><title>Decorators in Python</title><link>https://tutswiki.com/python/decorators/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/decorators/</guid><description>Have you ever heard about Gift wrappings? Exactly, those which we do on the presents to be gifted. Decorators in Python are nothing but the Gift Wrapping but for functions and classes. In this tutorial, we will deep dive into the implementation of decorators on functions. But before you get into the topic, you should have a proper understanding of functions in Python. Assuming that you have, let&amp;rsquo;s get started.</description></item><item><title>Exceptions in Python</title><link>https://tutswiki.com/python/exceptions/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/exceptions/</guid><description>In this tutorial, we will be learning about Exceptions. So without further ado, let&amp;rsquo;s get started.
What is an Exception? The very first question that pops up in our minds.
An Exception is an unexpected problem or issue that alters the normal flow of execution.
What is an Exception in Python? Exception in Python is an event that occurs at runtime which disrupts the flow of execution of a program and terminates it abnormally if left unhandled.</description></item><item><title>Exception Handling in Python</title><link>https://tutswiki.com/python/exception-handling/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/python/exception-handling/</guid><description>Now that we have knowledge of Exceptions and its types, the question arises,
How do we handle exceptions so that flow of our program does not stop abruptly?
Well, for that Python Exception Handling comes to our rescue.
Exception Handling in Python Python provides us try, raise, except and finally blocks for handling raised exceptions properly. Let us understand each of them using an example.
try and except try: x = int(input(&amp;#34;Enter an integer: &amp;#34;)) except ValueError as te: print(&amp;#34;Exception Occured:&amp;#34;,te) Output:</description></item></channel></rss>