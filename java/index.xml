<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on TutsWiki Beta</title><link>https://tutswiki.com/java/</link><description>Recent content in Java on TutsWiki Beta</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tutswiki.com/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Classes &amp; Objects</title><link>https://tutswiki.com/java/class-object/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/class-object/</guid><description>Objects Java is an object-oriented language meaning it follows the object-oriented programming (OOPS) paradigm. The OOPS principle looks at any problem as an interaction between various objects. This, in turn, helps us to solve real-world problems easily because most of it involves objects. Objects are described by their intrinsic properties ( in coding terms some base data ) and how they can interact within the object and also with other objects ( in coding terms some functionality over the data ).</description></item><item><title>Constructors</title><link>https://tutswiki.com/java/constructors/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/constructors/</guid><description>Object Initialization We know that in Java classes are blueprints and objects are the actual entities created by following the design of the blueprint. To create an object we need to initialize it or in simpler terms assign resources like memory, initialize instance variables, load methods, etc. If we don&amp;rsquo;t do this Java assigns the object a null value on the declaration of the object. In Java, we use the new keyword to initialize an object whose class/type is not of the primitive types.</description></item><item><title>Wrapper Class in Java</title><link>https://tutswiki.com/java/wrapper-class/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/wrapper-class/</guid><description>What is a Wrapper Class? As the name suggests, a wrapper class is used to wrap a primitive data type like int, float, char etc. The wrapper class provides the functionality to encapsulate (wrap) a primitive data type to enable them to use as Objects.
Each primitive data type has a corresponding Wrapper class.
Wrapper classes are provided by the java.lang package.
Primitive Type Wrapper Class Primitive Type Wrapper Class boolean Boolean char Character byte Byte short Short int Integer long Long float Float double Double Example void wrapperClassExample1(){ Integer int1 = new Integer(1); // Deprecated since, Java 9 System.</description></item><item><title>Exceptions in Java</title><link>https://tutswiki.com/java/exceptions/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/exceptions/</guid><description>Exceptions An exception in java is defined as an unwanted or unexpected event, which arises at the time of execution of a program i.e. at run time which disturbs the normal flow or working of our program.
For better understanding, consider the following scenario where you have planned to watch a movie in a nearby theater and you got ready and departed from your house but in the mid-way, your vehicle got punctured and for reaching your destination you took a taxi.</description></item><item><title>Exception Handling</title><link>https://tutswiki.com/java/exception-handling/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/exception-handling/</guid><description>Exception handling is the facility provided by Java to handle all the unwanted event or exception that arises in our program to maintain the normal flow of our code. Whenever there is an exception, the method in which the exception occurs will create an object and that object will store three things:
Exception name: It stores the class name which can handle the occurred exception. Description: It describes what type of exception has occurred.</description></item><item><title>throw and throws</title><link>https://tutswiki.com/java/throw-throws/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/throw-throws/</guid><description>In the previous tutorial, we learned how to handle an exception using try and catch block. Now we will learn how exception handling is done using throw and throws keyword.
throw keyword The keyword throw is employed to throw an exception explicitly. It is mainly used to throw custom exceptions or user-defined exceptions. It is placed inside the method.
Syntax throw new ExceptionClassName(&amp;#34;Message&amp;#34;); JVM or method does not make the exception object like it used to do before.</description></item><item><title>finally</title><link>https://tutswiki.com/java/finally/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/finally/</guid><description>In the previous tutorial, we learned how to handle an exception using throw and throws keywords. Now we will learn about finally block.
finally finally is the block that will always get executed irrespective of the fact whether the exception is handled or not.
Syntax try () { //code that might produce exception} catch(Exception e) { //handle exception } finally { //code that always gets executed } We can also have finally block without catch block.</description></item><item><title>Lambda Expressions in Java</title><link>https://tutswiki.com/java/lambda-expressions/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/lambda-expressions/</guid><description>1. Lambda Expressions 1.1 Introduction Lambda expression is the fundamental approach to functional programming in Java. It is an anonymous function which doesn&amp;rsquo;t belong to any class nor a name. It provides a concise way to show a method or interface. Provides implementation of functional interface. 1.2 Syntax Parameter -&amp;gt; body of expression
1.3 Characteristics Optional type declaration - Declaration of parameter type is not required. Optional parentheses around parameters - Required when multiple parameters are used.</description></item><item><title>Regular Expressions in Java</title><link>https://tutswiki.com/java/regex/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/regex/</guid><description>1.1 Introduction Regular expression in simple terms is a special sequence of symbols and alphanumeric characters that defines a search pattern.
1.2 Uses These are used to describe what you are looking for when you search for data in text, article etc.
Data Validation like checking if the user has inserted a valid e-mail address or not. Data Scraping/Web scraping like when you want to scrape particular data from the internet.</description></item><item><title>Generics in Java</title><link>https://tutswiki.com/java/generics/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://tutswiki.com/java/generics/</guid><description>Generics in Java is the facility which is provided to the user to make a single method or single class that can be compatible with any data type like a single method can operate on integer type or string type or even object type. If you are familiar with template in C++, then you can consider generics as a template in Java. In simple words, generic methods(or classes) are those methods that are written with single method declaration and can be called or accessed with arguments of different type.</description></item></channel></rss>