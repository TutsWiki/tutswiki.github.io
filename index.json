[{"uri":"https://tutswiki.com/cplusplus/","title":"C++","tags":[],"description":"","content":" C++ Introduction A complete guide to C++ programming language.\n"},{"uri":"https://tutswiki.com/python/introduction/","title":"Introduction","tags":["Python"],"description":"Almost every industry worldwide is using Python somehow due to its wide range of applications and easy to understand syntax.","content":" This Google Trends analysis shows how the interest of Python worldwide scaled up above all other Object-Oriented Programming languages in the last few years. Almost every industry worldwide is using Python somehow due to its wide range of applications and easy to understand syntax. So, learning Python would make you a proficient software developer who is job-ready and can apply his/her skills to solve real-world problems.\nAnother great reason for learning Python is it’s large Open Source community. If you run into any error then you will surely find other people on Github or Stack Overflow with same errors and a possible fix to that.\nFeatures  Dynamically typed: Unlike Java or C++ we don’t have to mention about the data type when assigning variables, Python has the ability to figure that out on its own. Interpreted: We don\u0026rsquo;t need a compiler to convert Python to machine code which our computer’s processor can read, just executing the program does all compilation behind the scenes. Easy to read Huge range of libraries and modules supported  Applications  Data Science Web Development Generic Operating System Services Image Processing Scientific Computing  "},{"uri":"https://tutswiki.com/python/threading/","title":"Threading in Python","tags":["Python"],"description":"Learn what is threading, various types (kernel, user, daemon) and how to use it in Python using _thread or threading module.","content":" In this tutorial, we will understand the concept of threading in Python. Let us begin by defining the term thread.\nWhat is Thread?  A thread is a lightweight execution unit that can be managed independently by a scheduler consisting of its program counter, a stack, and a register set.\n  A register is a temporary storage unit built inside a CPU. A program counter is a register that contains the address of the executing instruction. A Stack is a reserved region of memory for a thread. When a function executes, it pushes the local variables to the stack, and when the function exits, it pops those variables from the stack.  Since each thread has its resource, multiple processes can be executed parallelly by increasing the number of threads in a process, as depicted below.\nWhy use threading  Threads improve the performance of the processes through parallelism and concurrency.\n A single-threaded process can only run on one CPU, independent of the number of cores or processors available, while in a multi-threaded application, each thread is executed by different available processing cores. We can run one thread that can provide a quick response to the user. And in the background, another thread is doing extensive CPU work.  Threads shares code, data, and other resources like files:\n Which allows multiple tasks to be executed parallelly.\n For example, in Antivirus software, there is a thread for each of the following, which runs in parallel.\n  Scanning the computer Realtime analysis Updating the antivirus software.  Creating, managing, and context switches are much faster than performing the same tasks for processes serially.\n Threads of a process shares the global variables. So any change in them will be reflected in other threads as well. A thread can also have its own set of local variables.\n  In case we have limited resources and we want them to be shared, i.e, by synchronization, for better utilization of resources.\n A Complex task can be optimized by dividing them into multiple independent subtasks. Each subtask is handled by a thread. These threads will run on separate processors, thus using parallelism to reduce execution time.\n  When not to use threading  For basic tasks, as there is overhead associated with managing threads. Threading makes the program more complex which makes the debugging process more difficult. Processes are CPU bound, and we only have single processing core.   CPU Bound Processes: Processes that spend most of their time while executing on CPU.\n Assuming that our goals align with the scenarios mentioned in the Why use threading section, let\u0026rsquo;s now discuss its types.\nThere are two different kinds of threads:\n Kernel threads User threads  Kernel Threads Kernel threads are implemented and managed by the kernel. The process context information and the threads are all managed by the kernel itself. Therefore, kernel threads are slower than user threads.\nAdvantages  Threads from multiple processes can be scheduled simultaneously by the kernel. In a process, if one thread is blocked, the Kernel can schedule another thread.  Disadvantages  Creating and managing kernel threads are slower and less efficient than the user threads. A mode switch to the Kernel is required for transfer of control from one thread to another within the same process.  User Threads User threads are implemented and managed by users, i.e. creating or destroying thread, saving or restoring thread, scheduling thread, passing message or data to the thread and, the kernel is unaware of its existence. The kernel handles these threads as if they were single-threaded processes.\nAdvantages  User threads are OS independent. We do not need Kernel mode privileges for thread switching. Scheduling can be process specific. It is faster to create user threads and to manage them.  Disadvantages  When a context switch happens, it blocks the process, and since a process can have multiple threads, threads are also blocked. For a process, if one thread executes a system call, all the other threads stop executing for that duration.  Now the big question arises,\nHow to use threading in Python Python provides us with two modules to support threading.\n _thread threading  _thread module _thread provides a method start_new_thread() that starts a new thread and returns its identifier.\nSyntax\nthread.start_new_thread(myFunction, args[, kwargs]) This method takes 2 arguments, a function to be executed myFunction and a list of tuple arguments args. kwargs argument is an optional keyword arguments (Dictionary).\nLet us consider the following program,\nimport _thread import time from time import ctime def myFunction(myThread): counter = 5 while counter \u0026gt; 0: print(myThread + \u0026#34; \u0026#34; + ctime(time.time())) counter -= 1 try: _thread.start_new_thread(myFunction, (\u0026#34;Thread 1\u0026#34;,)) _thread.start_new_thread(myFunction, (\u0026#34;Thread 2\u0026#34;,)) except: print(\u0026#34;Thread could not be started\u0026#34;) while True: pass Output:\nThread 1 Sat Sep 19 13:04:03 2020 Thread 2 Sat Sep 19 13:04:03 2020 Thread 1 Sat Sep 19 13:04:03 2020 Thread 1 Sat Sep 19 13:04:03 2020 Thread 1 Sat Sep 19 13:04:03 2020 Thread 1 Sat Sep 19 13:04:03 2020 Thread 2 Sat Sep 19 13:04:03 2020 Thread 2 Sat Sep 19 13:04:03 2020 Thread 2 Sat Sep 19 13:04:03 2020 Thread 2 Sat Sep 19 13:04:03 2020 Explanation  Thread 1 and Thread 2 both read the value of the variable counter, which is 5, at time 13:22:01. After reading the value, both the threads enter the loop and executes the print statement at the same time 13:22:01. Both are then put to sleep for 2 and 3 seconds, respectively. Now, after 2 seconds, Thread 1 wakes up, decrements the value of counter by 1, and moves with the next iteration, which then executes the print statement and puts the thread to sleep again for 2 seconds. At the 3rd second, at 13:22:04, Thread 2 wakes up and decrements the value of counter and continues with the next iteration, which then executes the print statement and puts the thread to sleep again for 3 seconds. This process stops when the value of counter for both Thread 1 and Thread 2 is 0.   Note: If we run this program multiple times, we will notice that the output sequence changes every time. It happens because the threads are not synchronized, and they run whenever they have the required resources.\n threading module _thread is an effective option for low-level threading. But Python\u0026rsquo;s new threading module is more powerful and supports high-level threading.\nTo create a new thread, we create an object of Thread class, which takes target as a parameter.\n target: Name of the function to be executed args: Optional parameter to pass argument tuple  Syntax\nthreading.Thread(target=myFunction, args* = ()) Consider the following example.\nimport threading import time from time import ctime def myThread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) for i in range(0, 3): print(\u0026#34;Creating thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread = threading.Thread(target=myThread, args=(i,)) print(\u0026#34;Starting thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread.start() Explanation  To use the threading module, we need to import it using import threading The loop creates 3 threads by using threading.Thread(target=myThread, args=(i,)) where we have passed i as an argument. Note that the target is myThread() function. start() method is used to start the execution of a thread.  Output:\nCreating thread 0 at Fri Sep 18 16:24:25 2020 Starting thread 0 at Fri Sep 18 16:24:25 2020 Thread 0: started at Fri Sep 18 16:24:25 2020 Creating thread 1 at Fri Sep 18 16:24:25 2020 Starting thread 1 at Fri Sep 18 16:24:25 2020 Thread 1: started at Fri Sep 18 16:24:25 2020 Creating thread 2 at Fri Sep 18 16:24:25 2020 Starting thread 2 at Fri Sep 18 16:24:25 2020 Thread 2: started at Fri Sep 18 16:24:25 2020 Thread 0: finished at Fri Sep 18 16:24:27 2020 Thread 2: finished at Fri Sep 18 16:24:27 2020 Thread 1: finished at Fri Sep 18 16:24:27 2020 Now, What if we want the create a new thread only after the previous one has been completed or stopped? In that case, we use the join() method as below.\nimport threading import time from time import ctime def myThread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) for i in range(0, 3): print(\u0026#34;Creating thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread = threading.Thread(target=myThread, args=(i,)) print(\u0026#34;Starting thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread.start() thread.join() Output:\nCreating thread 0 at Fri Sep 18 16:37:26 2020 Starting thread 0 at Fri Sep 18 16:37:26 2020 Thread 0: started at Fri Sep 18 16:37:26 2020 Thread 0: finished at Fri Sep 18 16:37:28 2020 Creating thread 1 at Fri Sep 18 16:37:28 2020 Starting thread 1 at Fri Sep 18 16:37:28 2020 Thread 1: started at Fri Sep 18 16:37:28 2020 Thread 1: finished at Fri Sep 18 16:37:30 2020 Creating thread 2 at Fri Sep 18 16:37:30 2020 Starting thread 2 at Fri Sep 18 16:37:30 2020 Thread 2: started at Fri Sep 18 16:37:30 2020 Thread 2: finished at Fri Sep 18 16:37:32 2020 join() pauses the main thread (for loop in this case) and wait for the running thread to complete. Note that Thread 1 is created after Thread 0 has finished and Thread 2 is created after Thread 1 has finished.\nWe can also pass a timeout time in the join method. It is used to manually timeout the current thread and allows the next thread to execute. We can call the is_alive() method (checks whether a thread is still executing and returns boolean) after join() to check whether a timeout happened. If the thread is still alive, the join() times out.\nimport threading import time from time import ctime def myThread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) for i in range(0, 3): print(\u0026#34;Creating thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread = threading.Thread(target=myThread, args=(i,)) print(\u0026#34;Starting thread %dat %s\u0026#34; % (i, ctime(time.time()))) thread.start() thread.join(1) print(\u0026#34;Thread alive: \u0026#34;,thread.is_alive()) Output:\nCreating thread 0 at Fri Sep 18 16:51:42 2020 Starting thread 0 at Fri Sep 18 16:51:42 2020 Thread 0: started at Fri Sep 18 16:51:42 2020 Thread alive: True Creating thread 1 at Fri Sep 18 16:51:43 2020 Starting thread 1 at Fri Sep 18 16:51:43 2020 Thread 1: started at Fri Sep 18 16:51:43 2020 Thread 0: finished at Fri Sep 18 16:51:44 2020 Thread alive: True Creating thread 2 at Fri Sep 18 16:51:44 2020 Starting thread 2 at Fri Sep 18 16:51:44 2020 Thread 2: started at Fri Sep 18 16:51:44 2020 Thread 1: finished at Fri Sep 18 16:51:45 2020 Thread alive: True Thread 2: finished at Fri Sep 18 16:51:46 2020  The threading module also provides the following additional methods -\n threading.active_Count(): It returns the number of active threads. threading.current_Thread(): It returns the current thread being executed. threading.enumerate(): It returns a list of active threads.   The below example uses these additional methods.\nimport threading import time from time import ctime def myThread(num): print(\u0026#34;Current thread: \u0026#34;, threading.current_thread().getName()) print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) for i in range(0, 2): thread = threading.Thread(target=myThread, args=(i,)) thread.start() thread.join(1) print(\u0026#34;Number of active threads: \u0026#34;, threading.active_count()) print(\u0026#34;Current thread: \u0026#34;, threading.current_thread().getName()) print(\u0026#34;Active threads: \u0026#34;) for j in threading.enumerate(): print(j.getName(), end=\u0026#34;;\u0026#34;) Output:\nCurrent thread: Thread-1 Thread 0: started at Fri Sep 18 17:32:26 2020 Number of active threads: 2 Current thread: MainThread Active threads: MainThread;Thread-1; Current thread: Thread-2 Thread 1: started at Fri Sep 18 17:32:27 2020 Thread 0: finished at Fri Sep 18 17:32:28 2020 Number of active threads: 2 Current thread: MainThread Active threads: MainThread;Thread-2; Thread 1: finished at Fri Sep 18 17:32:29 2020 Daemon vs non-daemon threads  A daemon thread is a which runs in the background. It has low priority so that it doesn\u0026rsquo;t affect execution of other threads.\n Daemons threads can be killed when all the non-daemon threads have been executed successfully. For instance,\nimport threading import time from time import ctime def daemon_thread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(3) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) def non_daemon_thread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) thread1 = threading.Thread(target=daemon_thread, args=(1,), daemon=True) thread2 = threading.Thread(target=non_daemon_thread, args=(2,)) thread1.start() thread2.start() Output:\nThread 1: started at Fri Sep 18 17:51:47 2020 Thread 2: started at Fri Sep 18 17:51:47 2020 Thread 2: finished at Fri Sep 18 17:51:49 2020 Here daemon_thread, Thread 1 is killed as soon as non_daemon_thread Thread 2 has finished.\nBut what if we want the daemon thread to finish as well? join() method comes to the rescue.\nimport threading import time from time import ctime def daemon_thread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(3) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) def non_daemon_thread(num): print(\u0026#34;Thread %d: started at %s\u0026#34; % (num, ctime(time.time()))) time.sleep(2) print(\u0026#34;Thread %d: finished at %s\u0026#34; % (num, ctime(time.time()))) thread1 = threading.Thread(target=daemon_thread, args=(1,), daemon=True) thread2 = threading.Thread(target=non_daemon_thread, args=(2,)) thread1.start() thread2.start() thread1.join() thread2.join() Output:\nThread 1: started at Fri Sep 18 18:05:53 2020 Thread 2: started at Fri Sep 18 18:05:53 2020 Thread 2: finished at Fri Sep 18 18:05:55 2020 Thread 1: finished at Fri Sep 18 18:05:56 2020 Unlike earlier, Thread 1 has also finished.\nConclusion Threading is an important concept in Python. In this tutorial, we have learned the concept of threads and multithreading in Python using two modules, _thread, and threading. We also learned about different methods provided by these modules like start(), join(), is_alive(), current_Thread(), active_Thread, and enumerate. With this article, we should also have a clear understanding of when and when not to use threading.\n"},{"uri":"https://tutswiki.com/java/class-object/","title":"Classes &amp; Objects","tags":["Java"],"description":"In this tutorial, you will learn about object-oriented programming in Java and you will learn about Java classes and objects with the help of examples. A class is a blueprint of objects whereas an object is an instance of a class.","content":" Objects Java is an object-oriented language meaning it follows the object-oriented programming (OOPS) paradigm. The OOPS principle looks at any problem as an interaction between various objects. This, in turn, helps us to solve real-world problems easily because most of it involves objects. Objects are described by their intrinsic properties ( in coding terms some base data ) and how they can interact within the object and also with other objects ( in coding terms some functionality over the data ). So it is natural to organize objects into a composition of data and functionality.\nFor example: Let us look at a car and a petrol pump. We could probably limit ourselves and say that Color, Fuel and Speed describe a car completely and Fuel and Color describe a petrol pump completely. So these become our data. Now suppose if the driver wants to fuel the car, this represents an object interaction problem between a petrol pump and the car, where the fuel attribute of the car must increase and that of the petrol pump must decrease. Hence we can introduce functionality fill tank in the car to interact with the petrol pump and transfer fuel from the pump to the car. From this, we can see that it would be much easier for the functionality to access the data if they were composed together.\nClasses Now that we have a basic understanding of why OOPS is helpful, let us see what happens if we need to manufacture a new car. Do we start everything from scratch? Most of the car manufacturing companies follow a blueprint when producing a car so that they need not invest time again and again to design the properties and functionalities of the car. This is the same in OOPS as well. We use something called a Class to define our blueprint for an object so that if we want to create another object of the same kind we can use this blueprint to speed up our process.\nClasses and Objects in Java At the enterprise level, where we need to model real-time situations the use of OOPS principles is extremely important. In Java, we store the data of an object in a data member/field of the object and the functionality of objects are defined as methods of the object. We define a class in Java to tell the compiler about the blueprint of the object we need. The class also contains the definitions of the data members and the required methods. The compiler can use this information to allocate resources like memory when an object is created using this blueprint.\nExample Let us model the car and petrol pump using classes and create objects using the classes.\nclass petrolPump { int Fuel; String Color; public petrolPump(int Fuel) { this.Fuel = Fuel; } } Public class Car { int Fuel; int Speed; String Color; public Car(int Fuel) { this.Fuel = Fuel; } public void fillTank(int requiredFuel, petrolPump pump) { if (pump.Fuel \u0026gt;= requiredFuel) { pump.Fuel -= requiredFuel; this.Fuel += requiredFuel; } } public static void main(String[] args) { Car myCar = new Car(10); petrolPump pump = new petrolPump(1000); myCar.fillTank(50, pump); } } There might be several doubts in this code especially if you are new to OOPS, let us answer them one by one.\nVariables and Methods The data members of the class are also called as the instance variables. These are the variables that are declared in the class before the methods. These variables are instantiated during object creation by the constructor, which we will discuss soon. These variables have a class scope, that is they exist as long as the object of the class exists and is destroyed once the object is destroyed. They are also bound to a single object of the class and can be accessed directly or indirectly via the object, bound to access rules of the variable.\nWe can also have local variables to help us in some processing inside the methods. They have local scope to the methods and die once the method execution is finished. These are not accessible by the objects of the class and do not describe the object. The functions written within the scope of the class are called as class methods. They have direct access to the instance variables of the class and can manipulate them to change the state of the object. The functions are in general not bound to a single object of the class, but rather all objects of the class share a copy during the run time of the program. They can be accessed directly or indirectly via the object, bound to access rules of the method.\nAccessing variables and methods We use the . operator in Java to access methods or variables of the class via its objects. This is bound to access rules. If the access for the variable or method is public then we can use the operator to directly access the variable/method. In the given code myCar.fillTank( 50, pump ); uses the operator.\nthis keyword this keyword is used to specify the current object. To access the instance variables, we can use this keyword with the . operator. It tells the compiler that the variable being referred to is the instance variable associated with the current object which is executing the method.\nObject Creation The line Car myCar = new Car(10); creates a new Car object out of the Car class blueprint and initialises it or we can say myCar is an object of the type Car. During object creation, when we use the above syntax, it instructs the compiler to create a new object of the class Car by calling a special method which is called as the Constructor of the class. The constructor of the class is a function which has no return type, needs to have the same name as that of the class and is invoked when an object of the class is created. The main purpose of this is to instantiate the data members of the object. A constructor can be parameterized such that we can pass parameters to it to instantiate the data members with specific values rather than default ones.\nBelow is an example of parametrized vs non-parameterized constructor. If we do not declare this method in the class, the compiler automatically assigns a non-parameterized constructor to the class. Constructors can also be overloaded according to Java principles. We will learn more about Constructors in the next section.\n//parameterised public Car(int Fuel) { this.Fuel = Fuel; } //Non-paramterised public Car() { this.Fuel = 0; }"},{"uri":"https://tutswiki.com/cplusplus/introduction/","title":"Introduction","tags":["C++"],"description":"A gentle introduction to C++ programming language. History, Popularity and Applications.","content":" Introduction Bjarne Stroustrup, a C and Simula67 enthusiast, thought of combining the best of both the languages, and subsequently, C++ emanated at AT\u0026amp;T Bell Laboratories in Murray Hill, New Jersey, USA, in the early 1980’s. Stroustrup’s C with Classes became C++ in 1983, the ‘++’ denoting the Increment Operator in C. The programming language can run on a number of platforms like Windows, Mac OS and numerous versions of UNIX. The most recent version of C++ programming language is C++ 17, revised by ISO/IEC 14882 standard.\nPopularity of C++ The TIOBE Index indicates that C and C++ are till date among the most used languages among programmers. Being a combination of both high-level and low-level language, C++ is regarded as a \u0026ldquo;middle-level\u0026rdquo; language. The language has evolved with time, and as of now, possesses facilities for low-level memory manipulation in addition to object-oriented, generic and functional features. It supports Object Oriented Programming in its entirety including the four pillars of object-oriented development, namely\n Encapsulation Data Hiding Inheritance Polymorphism  Applications of C++  Operating Systems: Being a strongly typed language in addition to being fast, C++ becomes a perfect choice when it comes to writing operating systems. C being analogous to assembly language, further aids in writing low-level operating system modules. Hence, it is no surprise that most of the softwares of Microsoft are developed using C++, also Mac OSX has some of its parts written in C++. Browsers: The fast performance of C++ makes it an ideal choice for the rendering engines of various browsers. Mozilla Firefox, Google Chrome and Apple Safari are developed using C++. Libraries: C++ is used as the backend programming language of many high-level libraries, for example, Tensorflow; one of the most significantly used Machine Learning Libraries. Databases: C++ is used in writing Database Management Softwares. Two of the most popular Databases, MySQL and PostgreSQL are written in C and C++. GUI based Applications: \u0026ldquo;Speed\u0026rdquo; is what matters in graphics applications because it helps the developers in expanding their target audience. Applications which have high-end graphical processing like most of the applications of the Adobe Creative Cloud viz. Photoshop, Illustrator, etc. are developed by using C++. Cloud Systems: The compatibility of C++ with a lot of machines along with its affinity with the hardware makes it a perfect choice for cloud storage and distributed systems. Load tolerance and high concurrency is provided by the multithreading libraries in C++ which becomes a huge advantage.  In addition to the above mentioned applications, C++ is also majorly used in Embedded Systems, Compilers and Banking Applications besides a multitude of other uses.\n"},{"uri":"https://tutswiki.com/r/introduction/","title":"Introduction","tags":["R"],"description":"A gentle introduction to R programming language.","content":" What is R? R is a programming language that is gaining its importance in software development, machine learning and data science. R is free and open source software under GNU General public license and pre-compiled binary versions and libraries are also provided for various operating systems like MAC, Linux and Windows. R provides a software environment for Statistical Modeling of data, Exploratory Data Analysis, Graphics Representation and Reproducible Researches.\nEvolution of R R is considered to be the dialect of S language. S language was founded in 1976 by John Chambers and later on at Bell Laboratories as an Internal Statistical Analysis Environment with its implementation of Fortran Libraries. Earlier versions of the language failed in containing various useful functions for Statistical Modeling which led to the development of R language. R Language was founded in 1991 by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and is currently developed by R Development Core Team.\nFeatures of R  R is a well developed, simple and most interactive programming language which includes conditional and looping statements, user defined functions and libraries. R contains a variety of atomic data types like Numeric, Characters, Logical, Integer and Complex and thereby providing integrated and coherent collection of tools for data analysis. R provides a suite of operators for manipulations of array, data frames, vectors, matrices, strings and lists. Functionality is divided into various modular packages available in R. Graphics capabilities are more sophisticated and contain more Stat Packages for Base plotting system, Lattice systems and ggplots systems. R has its very largely active and vibrant user community.  Overview of its applications R has its majority of applications in the field of data science and machine learning algorithms. Some of its applications include:\n Descriptive Analysis Exploratory Data Analysis Statistical Inferences Predictive Modeling Causal and Random Analysis Mechanistic Analysis and Reproducible Research  As a conclusion, R is proving to be world’s most widely used Statistical Programming Language. It is always the first choice of Data Scientists and also deployed in various critical Business Applications.\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/","title":"DSA","tags":[],"description":"","content":" Data Structure and Algorithms Introduction A complete guide to Data Structure and Algorithms.\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/insertion-sort/","title":"Insertion Sort","tags":["DSA"],"description":"Insertion sort is one of the easiest and efficient sorting algorithms that is a comparison based sorting technique. Insertion sort is very advantageous in cases where the number of elements is small","content":" Now when there are sorting algorithms already available like Merge Sort and Quick Sort which can sort a large number of elements in quick time and that too efficiently in most of the cases, we still might require to rely on other sorting techniques in some cases. Today we will discuss one such sorting technique called Insertion Sort. Insertion sort is one of the easiest and efficient sorting algorithms that is a comparison based sorting technique. Insertion sort is very advantageous in cases where the number of elements is small and can provide the best case time complexity of O(n).\nLet\u0026rsquo;s discuss some of the major advantages and disadvantages of Insertion Sort.\nAdvantages  Implementation of insertion sort is very easy as compared to sorting algorithms like quick sort, merge sort or heap sort. Very efficient in the case of a small number of elements. If the elements are already in sorted order it won\u0026rsquo;t spend much time in useless operations and will deliver a run time of O(n). It is more efficient when compared to other simple algorithms like Bubble sort and Selection Sort. It is a stable sorting technique, that is, the order of keys is maintained. It requires constant \u0026ldquo;additional\u0026rdquo; memory, no matter the number of elements. It can sort the elements as soon as it receives them. It can turn out to be very efficient in case of nearly sorted elements.  Disadvantages  One of the major disadvantages of Insertion sort is its Average Time Complexity of O(n^2). If the number of elements is relatively large it can take large time as compared to Quick Sort or Merge Sort.  Algorithm The basic working of Insertion sort is fairly simple, what it does is picks an element and places it in its correct position. It does this for every element and finally, we get the sorted array.\nLet\u0026rsquo;s look at the algorithm more deeply.\n Iterate from the second element to the last element. Select the current element and compare it with the previous element. If the element is small (in case of ascending order) keep on moving it to previous positions, until it is in its correct position in the sorted part. Keep on repeating the above until there are no more elements left.  Example Let\u0026rsquo;s have a look at an example to get a clearer picture of the algorithm. The number that is in bold represent the sorted part of the array.\n Consider the array: 17 13 23 2 7 1 34 Creating an initial marker at the second position.  17 13 23 2 7 1 34  After 1st iteration  13 17 23 2 7 1 34  After 2nd iteration  13 17 23 2 7 1 34  After 3rd iteration  2 13 17 23 7 1 34  After 4th iteration  2 7 13 17 23 1 34  After 5th iteration  1 2 7 13 17 23 34  After 6th iteration  1 2 7 13 17 23 34   Code import java.util.Arrays; public class Sorting { void insertionSort(int arr[]) { int lengthOfArray = arr.length; // Length of input array  int value; // to store current element  int pos; // to store position of current element  for (int i = 1; i \u0026lt; lengthOfArray; i++) { pos = i - 1; value = arr[i]; while (pos \u0026gt;= 0 \u0026amp;\u0026amp; arr[pos] \u0026gt; value) { arr[pos + 1] = arr[pos]; pos = pos - 1; } arr[pos + 1] = value; // Printing value to show array after each iteration  System.out.println(\u0026#34;Array after iteration \u0026#34; + i + \u0026#34;:\u0026#34; + Arrays.toString(arr)); } } public static void main(String[] args) { Sorting sort = new Sorting(); // creating object of class Sorting  int[] arr = { 17, 13, 23, 2, 7, 1, 34 }; sort.insertionSort(arr); // method call  System.out.println(\u0026#34;Array after applying insertion sort : \u0026#34; + Arrays.toString(arr)); } } Output\nArray after iteration 1: [13, 17, 23, 2, 7, 1, 34] Array after iteration 2: [13, 17, 23, 2, 7, 1, 34] Array after iteration 3: [2, 13, 17, 23, 7, 1, 34] Array after iteration 4: [2, 7, 13, 17, 23, 1, 34] Array after iteration 5: [1, 2, 7, 13, 17, 23, 34] Array after iteration 6: [1, 2, 7, 13, 17, 23, 34] Array after applying insertion sort: [1, 2, 7, 13, 17, 23, 34] For the sake of understanding let’s take another array as input.\nArray: [9, 4, 6, 2, 7, 11, 3, 5]\nThis is the output that will be generated on passing the above array:\nArray after iteration 1: [4, 9, 6, 2, 7, 11, 3, 5] Array after iteration 2: [4, 6, 9, 2, 7, 11, 3, 5] Array after iteration 3: [2, 4, 6, 9, 7, 11, 3, 5] Array after iteration 4: [2, 4, 6, 7, 9, 11, 3, 5] Array after iteration 5: [2, 4, 6, 7, 9, 11, 3, 5] Array after iteration 6: [2, 3, 4, 6, 7, 9, 11, 5] Array after iteration 7: [2, 3, 4, 5, 6, 7, 9, 11] Array after applying insertion sort: [2, 3, 4, 5, 6, 7, 9, 11] Performance  Worst-case time complexity: O(n^2) Best case time complexity: O(n) Average case time complexity: O(n^2) Auxiliary space complexity: O(1)  Conclusion After studying the above algorithm and going through examples it is clear that insertion sort works best when the elements are nearly sorted or the input size is small. In these two cases, the insertion sort will perform better than most of the sorting algorithms. This is the reason insertion sort is also used as a base case for highly complex sorting algorithms like Merge Sort and Quick Sort.\n"},{"uri":"https://tutswiki.com/java/constructors/","title":"Constructors","tags":["Java"],"description":"A constructor initializes an object when it is created. In Java, we use the new keyword to initialize an object whose class/type is not of the primitive types.","content":" Object Initialization We know that in Java classes are blueprints and objects are the actual entities created by following the design of the blueprint. To create an object we need to initialize it or in simpler terms assign resources like memory, initialize instance variables, load methods, etc. If we don\u0026rsquo;t do this Java assigns the object a null value on the declaration of the object. In Java, we use the new keyword to initialize an object whose class/type is not of the primitive types. The primitive types are a special case and are not mapped to null values on their declaration. They are assigned the following default values:\n   Type Default Value     boolean false   byte (byte) 0   short (short) 0   int 0   long 0L   char \\u0000   float 0.0f   double 0.0d    public class square { int perimeter; public square() { this.perimeter = 10; } public static void main(String[] args) { Square square_1; // null object  square_1 = new square(); // square object  } } In the above code, the initial declaration of square creates a null object but after using the new keyword and initializing it, it gets converted into a square object, and then we can treat it like a square object and use its member fields and functions.\nWhere does object initialization start? The whole process of starting up the initialization happens in the constructor of the class. The constructor is similar to member functions of the class but not completely. When the compiler enters the constructor all the resource allocation for that object happens in the background and its instance variables are given default values if they are of primitive type or a null value if otherwise. Also, we can use the constructor to initialize the instance variables of the class for that object explicitly. In this way, the constructor completely initializes the object.\nConstructors As mentioned above constructors can be considered as special methods which have the following properties:\n No return type Are called implicitly during object creation Generally have public access (With some exception which we will discuss in later section) Have the same name as that of the class Are not members of the class and hence cannot be inherited  There are different types of constructors. Let\u0026rsquo;s see them one by one.\nNon Parameterized Constructor It is an explicit constructor which is declared in the class and does not have any parameters passed to it. It is used to initialize the data members with default values. The code above illustrates a non parameterized constructor.\nParameterized Constructor It is an explicit constructor that is declared in the class and has parameters passed to it. It is used to initialize the data members with a particular set of given values.\npublic class square { int perimeter; public square(int val) { this.perimeter = val; } public static void main(String[] args) { Square square_1; // null object  square_1 = new square(1); // square object  } } The code above illustrates a non parameterized constructor.\nCopy Constructor It is a subtype of parameterized constructors. Say we are initializing an object O1. Here in the parameters, we pass an already initialized object, say O2 of the same class to the constructor during the initialization of O1. The required data members associated with O2 are copied into the respective data members of O1. The copy constructor cannot exist by itself. It requires either a traditional parameterized or non-parametrized constructor to be written along with it. This is an example of constructor overloading.\npublic class square{ int perimeter; public square(int val) { this.perimeter=val; } public square(square s1) { this.perimeter=s1.perimeter; } public static void main(String []args) { Square square_1; Square square_2; square_1=new square(1); square_2=new square(square_1); } } Here when square_2 is called, the overloaded copy constructor is called.\nDefault Constructor If none of the above constructors is declared by the programmer, then Java provides an inbuilt constructor that is implicit and assigns the data members with default values as seen in the table under Object Initialization.\nCalling one constructor from another It is possible to access another constructor of the same class from an overloaded constructor of the same class. This is achieved by using this keyword.\npublic class square { int perimeter; int sides; public square() { sides = 4; } public square(this.val) { this(); this.perimeter = val; } public static void main(String[] args) { Square square_1; Square square_2; square_1 = new square(1); square_2 = new square(square_1); } } For example, in the above code, the parameterized constructor is calling the non-parameterized one.\nInheritance and Constructor As constructors are not inherited, to access parent class constructors we use super keyword. Hence to access the constructor of the parent class, we have to call it explicitly by using the super keyword if the parent class has a parameterized constructor else the non-parameterized constructor or the default constructor for the parent class is called by default.\nThe below code illustrates this behaviour.\npublic class shape { String color; public shape(String color) { this.color = color; } } public class square extends shape { int perimeter; public square(int val, String color) { super(color) this.perimeter = val; } }"},{"uri":"https://tutswiki.com/r/install-env-setup/","title":"Installing R and RStudio in Windows &amp; Linux","tags":["R"],"description":"Detailed steps with screenshots on how to install R and RStudio IDE in Windows, Ubuntu and CentOS.","content":" R is a very popular and most interactive programming language and has been an important toolbox for Data Scientists and Business Analysts. To work and create projects on R, you just need to install two important tools– R and RStudio. Both of these software work in parallel to create various projects and Markdown Documents in R.\nInstalling R to a local computer consists of various easy steps. The steps for installation of R vary with different operating systems like Windows, Linux and MacOS. The official site for the installation cloud.r-project.org provides various pre-compiled binary versions and libraries for the above mentioned various operating systems. To install R, you can get the package either from the given official site or can use commands from the terminal or command prompt. In some Linux Distributions, R is installed by default, which you can easily verify by entering R in the console.\nInstalling R in Windows There are some steps you need to follow to install R and RStudio. Let\u0026rsquo;s have a look at those steps.\n Firstly you have to download R setup by directly clicking on the link https://cloud.r-project.org OR https://cran.r-project.org. You will be directed to a page containing downloads for various operating systems.\n Click on \u0026ldquo;base\u0026rdquo; and then click on R for the first time, it will direct you to the page containing the latest version of R. Click on Download R 4.0.2 for Windows (This is the latest version as of this writing).  Once the download is finished, run the setup file. License information will be displayed on the next screen. R uses GPL license. Click on Next.  Select the path where we want to download our R Software and proceed to Next.  Select all the components like 32 bit file, 64 bit file and core files which you want to install and then click on Next.  In the next step, we have to select either customized startup or we go on with the default and proceed to Next.  On clicking next, the installation of R in our system will get started in the designated path.  At last, we will click on Finish to successfully install R in our system.   Installing RStudio IDE in Windows  Download RStudio from the official website. Download the free version by clicking on Download RStudio.  In the next step, we will select the appropriate installer. When we select the installer, our downloading of RStudio will take place and setup will start.  Once the setup file is downloaded, run it and click on Next.  Click on Install and proceed for extracting files and installing RStudio.  Click on Finish at last.  Open RStudio from the installed location or lookup in Start Screen.  Now as a demonstration, a sample query has been written in the R script (File -\u0026gt; New File -\u0026gt; R Script). The result will appear in the console section below.   Installing R in Ubuntu 20.04/19.04/18.04/16.04  Let\u0026rsquo;s first update the packages\nsudo apt update sudo apt –y upgrade Once that\u0026rsquo;s done, install r-base\nsudo apt –y install r-base  "},{"uri":"https://tutswiki.com/java/","title":"Java","tags":[],"description":"","content":" Java Introduction A complete guide to Java programming language.\n"},{"uri":"https://tutswiki.com/override-overload-static-method-java/","title":"How to Override/Overload Static Method in Java?","tags":["Java"],"description":"Can a Static Method be Overridden or Overloaded in Java? Overriding and Overloading is a way to achieve Polymorphism in OOP.","content":" Overriding and Overloading is a way to achieve Polymorphism in OOP. It is one of the most common and important questions which is asked in many interview and competitive exams. Let\u0026rsquo;s understand what is the meaning of these terms overriding, overloading and static method. At the end of this discussion, one will get to know whether function overriding and function overloading is feasible on a static method or not.\nFunction Overloading If more than one method of a class (be it in the same class or inherited by another class) have the same name but they differ in their method signatures, then the methods are said to be overloaded. Consider the example given below\nExample class A { public void read(int a) { System.out.println(\u0026#34;I am in class A\u0026#34;); System.out.println(a); } } class B extends A { public void read(int a, int b) { System.out.println(\u0026#34;I am in class B\u0026#34;); System.out.println(a); System.out.println(b); } } public class test { public static void main(String[] args) { B obj = new B(); obj.read(10); obj.read(20, 30); } } Output\nI am in class A 10 I am in class B 20 30 As we created the object of class B and passed a single argument in the function read, then the method which accepted only a single argument gets executed i.e. method in class A but when we passed two arguments in the read method then the method in class B gets executed as it accepts two arguments in its parameters.\nIt is decided at the compile-time only by the compiler that which method is going to be executed according to the number of arguments that are being passed to a method. Hence overloading is used to implement compile-time polymorphism.\nFunction Overriding If two or more methods which have the same name and same method signature are declared in different classes to implement some specific feature then we say that those methods are overridden. Overriding is used for implementing run-time polymorphism. Understand this with the given example\nExample class A { public void read(int a) { System.out.println(\u0026#34;I am in class A\u0026#34;); System.out.println(a); } } class B extends A { public void read(int a) { System.out.println(\u0026#34;I am in class B\u0026#34;); System.out.println(a); } } public class test { public static void main(String[] args) { B obj = new B(); obj.read(10); } } Output\nI am in class B 10 Since class B extends class A and the read method of class A is available to it, still the preference is given to the read method that is present in class B and is executed. Here the method read in class A has been overridden by class B.\nIt is decided at the runtime that which function is going to be executed according to the object that is being created for calling the methods. If the object of the parent class is being used for calling, then the read method of the parent class is executed and if the object of child class is being used for calling, then the read method of child class gets executed.\nCan a Static Method be Overridden? The answer is NO. We cannot override a static method in Java. Understand this with the help of an example given below\nExample class car { public static void start() { System.out.println(\u0026#34;Car starts\u0026#34;); } public void stop() { System.out.println(\u0026#34;Car stops\u0026#34;); } public void refuel() { System.out.println(\u0026#34;Car refuels\u0026#34;); } } public class honda extends car { public static void start() { System.out.println(\u0026#34;Honda starts\u0026#34;); } } public class test { public static void main(String[] args) { honda h = new honda(); h.start(); h.stop(); h.refuel(); } } Output:\nHonda starts Car stops Car refuels If you try to access the h.start() function, first it will give a warning because the static method will be stored at a common memory allocation in java memory and if we try to access the h.start() with object reference type it will give us a warning because the static method will never be stored inside the object. Hence it is preferred to call a static method with the help of class rather than calling it with an object. The above code will give the output Honda starts i.e. h.start() function of child class will be executed because we called the function with the help of the object of class B. If we would have called it with the help of the object of class A then start function of class A would have been executed.\nStatic methods are stored at a common memory allocation in Java memory and if we try to access the h.start(), which is basically a static function, with object reference type it will give us a warning because the static methods are never stored inside the object. Hence it is preferred to call a static method with the help of class rather than calling it with an object.\nThe above code will give the output Honda starts i.e. h.start() function of child class will be executed because we called the function with the help of the object of class honda. If we would have called it with the help of the object of class car then start function of class car would have been executed.\n We cannot access the start function of the class car (parent class) with the help of the class honda (child class). It is called method hiding in Java i.e. static function start in class car is hidden. A static method cannot be overridden by a non-static method and a non-static method cannot be hidden by a static method. Hence it depends on the type of reference variable used for calling static methods, therefore static methods are decidable at the compile time. Hence, they cannot be overridden.  Can a Static Method be Overloaded? Now we know that a static function cannot be overridden but what about overloading? The answer is YES. Static methods can be overloaded in Java without any errors. For example\nExample class A { public static void read(int a) { System.out.println(\u0026#34;I am in class A\u0026#34;); System.out.println(a); } } class B extends A { public static void read(int a, int b) { System.out.println(\u0026#34;I am in class B\u0026#34;); System.out.println(a); System.out.println(b); } } public class test { public static void main(String[] args) { B obj = new B(); obj.read(10); obj.read(20, 30); } } Output:\nI am in class A 10 I am in class B 20 30 The above code gets executed without any error and hence we can say that static methods can be overloaded.\nCan a Static Method be Overloaded from Non-Static Method? The answer is NO. The compiler will raise an error if we try to overload a static function which differs only in the static keyword. Consider the below example\nExample class A { public void read(int a) { System.out.println(\u0026#34;I am in class A\u0026#34;); System.out.println(a); } public static void read(int a) { System.out.println(\u0026#34;I am in class B\u0026#34;); System.out.println(a); } public static void main(String[] args) { A.read(10); } } Output\nerror: method read(int) is already defined in class A error: non-static method read(int) cannot be referenced from a static context The above code will show an error at the time of compilation which shows that the static method which differs only in static keyword is not overloaded.\nWith this, we end our topic and we hope that the concept of overriding and overloading with static methods is clear to you.\n"},{"uri":"https://tutswiki.com/java/wrapper-class/","title":"Wrapper Class in Java","tags":["Java"],"description":"Wrapper class is used to wrap a primitive data type like int, float, char. Wrapper class provides the functionality to encapsulate (wrap) a primitive data type to enable them to use as Objects.","content":" What is a Wrapper Class? As the name suggests, a wrapper class is used to wrap a primitive data type like int, float, char etc. The wrapper class provides the functionality to encapsulate (wrap) a primitive data type to enable them to use as Objects.\nEach primitive data type has a corresponding Wrapper class.\nWrapper classes are provided by the java.lang package.\n   Primitive Type Wrapper Class Primitive Type Wrapper Class     boolean Boolean char Character   byte Byte short Short   int Integer long Long   float Float double Double    Example void wrapperClassExample1(){ Integer int1 = new Integer(1); // Deprecated since, Java 9  System.out.println(int1); Integer int2 = Integer.valueOf(2); System.out.println(int2); // Calculating Sum  System.out.println(int1 + int2); // Example with another type  Character another = Character.valueOf(\u0026#39;a\u0026#39;); System.out.println(another); } From Java 9, new Integer() format is deprecated and Integer.valueOf() method is preferred. Here Integer could be replaced by any Wrapper Class like Boolean, Float etc.\nExample Deprecated: Float deprecated = new Float(1.21);\nPreferred: Float preferred = Float.valueOf(1.21);\nWrapper classes provide one more handy functionality which is to convert values from String to primitive data types. Like, if an integer is in String format like \u0026ldquo;2\u0026rdquo; we can use Parsing methods to get Integer value 2 or Float value 2.0.\nExample void wrapperClassExample2() { String value = \u0026#34;3\u0026#34;; Integer intValue = Integer.parseInt(value); Float floatValue = Float.parseFloat(value); System.out.println(\u0026#34;Actual Value = \u0026#34; + value); System.out.println(\u0026#34;Integer Value = \u0026#34; + value); System.out.println(\u0026#34;Float Value = \u0026#34; + value); // Performing Arithmetic Operations  intValue += 1; System.out.println(\u0026#34;One added to Integer Value = \u0026#34; + intValue); floatValue /= 2; System.out.println(\u0026#34;Half of Float Value = \u0026#34; + floatValue); } In the above example, first, the string value of 3( three ) is converted to integer and float values and then some arithmetic operations are performed on them. While being a string value, arithmetic operations are not supported.\nUse Cases Many times we are getting input from external sources like Console Input and API parameters where we can\u0026rsquo;t specify the input type, so after input we need them to be converted into specified type.\nKey Terms The wrapping up of primitive data type into Wrapper Class objects is known as Boxing.\nExample: Integer intObj = Integer.valueOf(2);\nThe unwrapping of Wrapper Class objects into primitive data types is known as Unboxing.\nExample: int intValue = intObj.intValue();\nFactory Methods are the methods by which instance of classes should be created instead of using Constructors. These methods simplify Object instantiation.\nExample: valueOf() method of Integer, Double etc.\nNeed of Wrapper Class Now the question arises, all the operations are conveniently done by Primitive datatypes then what is the need of Wrapper Classes.\nFirst, Generic Classes or java.utils (example Java Collections) only supports Objects, and hence primitive data types are needed to be wrapped into Wrapper class.\nExample: List\u0026lt;Integer\u0026gt; intList = new ArrayList\u0026lt;\u0026gt;();\nSecond, In multithreading, the primitive data types are not used because they need a reference to lock variables. Locking variables prevents multiple threads to change the value of a variable simultaneously.\nFeatures of Wrapper Classes Autoboxing As the name suggests Wrapper Classes supports implicit conversion of primitive data types into Wrapper Class objects. So, we can pass any primitive value in a method which requires Wrapper classes as parameters and Java will take care of it. Same is the case for unboxing. There are some use cases where we shouldn\u0026rsquo;t rely on Autoboxing like in a for loop.\nExample:\npublic static void print(Integer num1){ System.out.println(num1); } public static void main(String[] args) { int num1 = 1; Integer num2 = Integer.valueOf(2); print(num1); print(num2); } getInteger() Method In some cases, the value of the variable is not valid and thus to make the program more robust, getInteger() Method allows a default value which will replace the invalid value during the execution of the program.\nExample:\nInteger num1 = Integer.getInteger(5, 0); // num1 = 5 Integer num2 = Integer.getInteger(null, 0); // num2 = 0, since null is invalid Integer num3 = Integer.getInteger(\u0026#34;abc\u0026#34;, -1); // num3 = -1, since \u0026#34;abc\u0026#34; can not be converted into Integer Integer num4 = Integer.getInteger(10, 0); // num4 = 10 Parse Methods Every wrapper class,( except Character ) has a parse method to convert a string value to an expected primitive type. These are generally in the given format\npublic static Integer Integer.parseInt( String value )\nHere, Integer could be replaced by any wrapper class like Double, Float etc.\nExample:\nFloat num1 = Float.parseFloat(\u0026#34;200\u0026#34;); toString() Methods Apart from the basic toString() method, which returns the string representation of the object. Integer and Long Wrapper classes provide another toString() method which converts the passed number into a specified base.\nSignature: public static Integer toString(int num, int base);\nParameters: int num: Original value, whose conversion to base is required\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int base: Target base in which value is required\nReturns: String, representation of num value in base format\nExample:\npublic static void main(String args[]) { int intValue = 31; String binaryValue = Integer.toString(intValue, 2); String octalValue = Integer.toString(intValue, 8); String hexaValue = Integer.toString(intValue, 16); System.out.println(\u0026#34;Integer Value = \u0026#34;+intValue); System.out.println(\u0026#34;Binary Value = \u0026#34; + binaryValue); System.out.println(\u0026#34;Octal Value = \u0026#34; + octalValue); System.out.println(\u0026#34;Hexadecimal Value = \u0026#34; + hexaValue); } Output:\nInteger Value = 31 Binary Value = 11111 Octal Value = 37 Hexadecimal Value = 1f"},{"uri":"https://tutswiki.com/python/","title":"Python","tags":[],"description":"","content":" Python Introduction A complete guide to Python programming language.\n"},{"uri":"https://tutswiki.com/cplusplus/multithreading/","title":"Multithreading in C++","tags":["C++"],"description":"Learn what is a process, address space, thread, its benefits, and how to use it in C++ with a complete example.","content":" What is multithreading Multithreading enables us to do parallel computing efficiently by creating multiple threads of a single process. It is used for maximum utilization of the central processing unit by concurrently executing multiple parts of a program. These parts of the program are threads.\nA process can be taken as an instance of a program that is being executed by one or more threads. When a program starts, it is loaded with an address space in the main memory from the hard disk. After being loaded on the memory it is being scheduled to an available CPU. Now when a process is scheduled on CPU, process instructions execute sequentially. There is a program counter to keep track of instructions to be executed. The program counter represents the execution context. Execution context is the state of a running process which indicates data like which instruction CPU is executing. We refer to these execution contexts as threads.\nThere can be multiple threads in a process. These threads can execute different sections of the program simultaneously and can be scheduled on single processor or multiprocessor and multicore systems. A process has its own address space while a thread shares the address space of its parent process along with all the threads its parent process has created. Threads are considered lightweight data structures compared to the process because they will always consume almost less memory than a new process would. Let\u0026rsquo;s visualize it a bit.\nSuppose we are getting some value to variable A, and there is a possibility that each thread in process P can set the value. The programmer has no control over which thread accesses a variable A and when does it access that variable. The operating system scheduler schedules processes and threads according to some scheduling algorithms ( Scheduling algorithms - First Come First Serve, Shortest Job First, Shortest Remaining Time First, Round Robin Scheduling, Priority Based Scheduling ).\nTo construct multithreaded programs. We need to construct synchronization constructs. Some of them are mutexes and semaphores. These mechanisms enforce synchronization between threads. So if a thread T2 in process P is initializing A no other thread is allowed to initialize A.\nWhy do we need Multithreading? Multiprocessing is the concept of using two or more central processing units to run a program. Multiple processes are executed simultaneously. By multiprocessing, we can avoid the problem of synchronization between threads in a multithreaded process because each process has its own address space that other processes are not allowed to write as the operating system actively prevents the process from writing to another process address space. However, address spaces can be very large and we may only need to run just a portion of the program. If we were to create many processes for parallel computing we would quickly use memory on any machine and so threads are useful. It is also not economical to have multiple processing units. The advantage is bigger than the disadvantage so we use multithreading for efficient parallel computing instead of multiprocessing.\nExamples of Multithreading  Text Editor/ Word Processor - We can have multiple tasks like typing the text, spelling check, saving and formatting of text are all being done concurrently by multiple threads. Web Browser - In a web browser, we can browse and at the same time have multiple downloads running. Web Servers - Web server handles each request with a new thread. There is a pool of threads and each time a request comes in, it is assigned a thread that\u0026rsquo;s why we are able to load Facebook, Amazon, etc so easily. If it was not multithreaded and all requests were to be allotted through the queue so we would have to wait a long time for our turn to come.  Multithreading in C++ We have the two main functions of creating a thread and waiting for the thread to finish execution.\nWe need to include a header library for threads #include\u0026lt;thread\u0026gt; Working with the threads To start a thread we need to create a new thread object and pass it a callable as an argument to its constructor. Callable is an executable code that we want to execute when the thread is running.\nWe can define a callable in three ways:\n A function object A function pointer A lambda expression  1. Using function object as callable: We need to define a class and in that class we overload an operator. The overloaded function is having the code which is to be executed.\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; // Define the class of function object class func_obj { public: void operator()(parameters)\t// Overload () operator \t{ // Code to be executed \t} }; int main() { // Create thread object \tthread thread_object(func_obj, parameters); // wait for thread thread_object to finish \tthread_object.join(); return 0; } 2. Using function pointer as callable: We need to define a function, then we can create a thread object with this function as callable. Parameters are passed after the function name.\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; // Define a function void func_point(parameter_1, parameter_2 { //Code to be executed \t} int main() { // Create thread object \tthread thread_object(func_point, parameter_1, parameter_2); // wait for thread thread_object to finish \tthread_object.join(); return 0; } Note: Parameters can be a variable, list, or vector etc.\n3. Using Lambda Expression as Callable We will define a lambda expression, and we will then pass it to the thread object constructor as the first argument followed by its parameters as further arguments.\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; int main() { // Defining a lambda expression \tauto func_lambda =[](parameters) { // Code to be executed \t}; // Create thread object \tthread thread_object(func_lambda, parameters); // wait for thread thread_object to finish \tthread_object.join(); return 0; } Note: We can also pass lambda function directly to constructors.\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; int main() { //Create thread object \tthread thread_object([], (parameters) { // Code to be executed \t};, parameters }; // wait for thread thread_object to finish \tthread_object.join(); return 0; } join () function This function is used to wait for a thread to finish before we can perform any other action.\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; int main() { //Create thread object \tthread thread_object(callable) // wait for thread thread_object to finish \tthread_object.join(); // thread_objec is finished, we can do other things \tnow. return 0; } Complete Example #include \u0026lt;iostream\u0026gt;#include \u0026lt;thread\u0026gt;using namespace std; // function pointer void func_point(int i) { for (int j = 0; j \u0026lt; i; j++) { cout \u0026lt;\u0026lt; \u0026#34;Thread with function pointer as callable.\u0026#34; \u0026lt;\u0026lt; endl; } } // function object class func_obj { public: void operator()(int x) { for (int j = 0; j \u0026lt; x; j++) { cout \u0026lt;\u0026lt; \u0026#34;Thread with function object as callable\u0026#34; \u0026lt;\u0026lt; endl; } } }; int main() { //This thread is created by function pointer as callable \tthread T1(func_point, 5); // This thread is created by function object as callable \tthread T2(func_obj, 4); //This thread is created by lambda expression as callable \tthread T3([], (int y) { for (int j = 0; j \u0026lt; y; j++) { cout \u0026lt;\u0026lt; \u0026#34;Thread with lambda expression as callable\u0026#34; \u0026lt;\u0026lt; endl; } };, 4 }; // wait for thread T1 to finish \tT1.join(); //wait for thread T2 to finish \tT2.join(); //wait for thread T3 to finish \tT3.join(); return 0; } Output:\nThread with function pointer as callable Thread with function pointer as callable Thread with lambda expression as callable Thread with lambda expression as callable Thread with function object as callable Thread with function pointer as callable Thread with function object as callable Thread with lambda expression as callable Thread with function object as callable Thread with function pointer as callable Thread with function object as callable Thread with function pointer as callable Thread with lambda expression as callable To compile program with thread support we have to use:\ng++ -std=c++11 -pthread Conclusion Multithreading is a very important feature which helps in efficiently computing multiple tasks parallely. It provides better resource utilization, simpler program design and more responsive programs. It is easy to implement and can help a lot in providing security and efficiency to our real world problems.\n"},{"uri":"https://tutswiki.com/java/serialization/","title":"Serialization in Java","tags":["Java"],"description":"Serialization is the mechanism to convert an object into a sequence of bytes so that it could be used in any external process like sending an object via a network or saving in memory.","content":" What is Serialization? Serialization is the mechanism to convert an object into a sequence of bytes so that it could be used in any external process like sending an object via a network or saving in memory. The created sequence of bytes will keep the information that is stored in the object as well as information of Object type and structure, to recreate it again when needed. The mechanism of recreating the object from these sequence of bytes is called Deserialization.\nSerialization Example Let us consider a class Post which has two data members content and likes. It is defined as follows:\nclass Post { private String content; private int likes; public Post(String content, int likes) { this.content = content; this.likes = likes; } public void printPost() { System.out.println(\u0026#34;Post : \u0026#34; + this.content); } } To Serialize the above class, we will mark the class as Serializable by implementing the interface java.io.Serializable.\nclass Post implements Serializable And then we create the following method\npublic static void serializePost(Post inputPost, String filename) { try { FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); out.writeObject(inputPost); out.close(); file.close(); } catch (IOException ex) { System.out.println(\u0026#34;IOException occured\u0026#34;); } } Explanation This method takes an object of class Post as a parameter and then serializes it. After that, it writes the serialized bytes to a file whose name is taken as the second parameter.\nHere, out.writeObject(inputPost) does the Serialization. After the bytes are written to the file, we close the filehandle by calling file.close();\nDeserialization Example Now, to deserialize the serialized object, we could use the below method.\npublic static void deserializePost(Post outputPost, String filename) { try { FileInputStream file = new FileInputStream(filename); ObjectInputStream in = new ObjectInputStream(file); outputPost = (Post) in .readObject(); } catch (IOException ex) { System.out.print(\u0026#34;IOException Occured\u0026#34;); } catch (ClassNotFoundException ex) { System.out.print(\u0026#34;ClassNotFound Occured\u0026#34;); } } Explanation Here, deserializePost() method takes two parameters where outputPost is blank Post object ( It could be initialized earlier but original values will be overwritten by this method ) and filename where the deserialized object is saved.\n This method will open the file in Input mode. in.readObject() will perform Deserialization. Finally, the result will be explicitly typecasted into Post using (Post).  The above method could expect IOException if the file does not exist already. And ClassNotFound Exception occurs when expected class is not found.\nSerialization and Deserialization Example import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; class Post implements Serializable { private String content; private int likes; public Post(String content, int likes) { this.content = content; this.likes = likes; } public void printPost() { System.out.println(\u0026#34;Post : \u0026#34; + this.content); } } public class Serialization { public static void serializePost(Post inputPost, String filename) { try { FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); out.writeObject(inputPost); out.close(); file.close(); } catch (IOException ex) { System.out.println(\u0026#34;IOException occured\u0026#34;); } } public static Post deserializePost(String filename) { try { FileInputStream file = new FileInputStream(filename); ObjectInputStream in = new ObjectInputStream(file); return (Post) in .readObject(); } catch (IOException ex) { System.out.println(\u0026#34;IOException Occured\u0026#34;); } catch (ClassNotFoundException ex) { System.out.println(\u0026#34;ClassNotFound Occured\u0026#34;); } return null; } public static void main(String[] args) { Post randomPost = new Post(\u0026#34;This is my first post\u0026#34;, 0); final String filename = \u0026#34;demo.bin\u0026#34;; System.out.println(\u0026#34;Before Serialization : \u0026#34;); randomPost.printPost(); // Serialization  serializePost(randomPost, filename); // Deserialization  Post postFromFile = deserializePost(filename); System.out.println(\u0026#34;After Serialization : \u0026#34;); postFromFile.printPost(); } } Output Before Serialization : Post: This is my first post After Serialization : Post: This is my first post Content of Serialized File $ head demo.bin ��srPost�7ޗ�[lIlikesLcontenttLjava/lang/String;xptThis is my first post Serialization with Inheritance When a parent class is marked Serializable then all its subclasses will also be marked Serializable without explicitly implementing Serializable interface.\nExample class Post implements Serializable { private String content; private int likes; public Post(String content, int likes) { this.content = content; this.likes = likes; } public void printPost() { System.out.println(\u0026#34;Post : \u0026#34; + this.content); } } class FBPost extends Post { private String comments; public addComment(String newComment) { if (this.comments == null) comments = \u0026#34;\u0026#34;; this.comments += (newComment + \u0026#34;, \u0026#34;); } public getComment() { return this.comments; } } Explanation The above example has two classes Post and FBPost. Here, FBPost inherits Post and it also has comments data member which consists of all the comments made to the post.  Here, Post implements Serializable and thus FBPost will also become Serializable by the concept of Multilevel Inheritance.\n But this concept does not work the other way round, which means when a subclass implements Serializable interface it will not affect the Parent class.\n Serialization with Aggregation Aggregation is used to form a HAS-A relationship in Java which means, one class has one or more references to other classes. Such classes will only become serializable when all the references inside these classes are Serializable. Otherwise, while attempting to serialize these classes, a NotSerializableException will occur.\nExample class Post { private String title; private String content; public String getPost() { return this.content + \u0026#34; : \u0026#34; + this.post; } } class FBPost { private Post post; private int likes; } Explanation In the above example, if the user tries to serialize the FBPost object, then NotSerizalizableException will be thrown because of post object since it is not Serializable unless it implements the Serializable interface.\nKey Terms  Byte Stream: A stream is a sequence of Objects. And a byte stream is a sequence of byte (8-bits) of data. Streams are generally used to Input and Output data. Multilevel Inheritance: As the name suggests, there are multiple levels of inheritance in this type of Inheritance. This means that one class inherits a class which already inherits another class, thus creating multiple levels of inheritance.  Cases when properties are not Serialized 1. Static Members Static members of a class are not serialized because they do not belong to any individual object.\nExample class Post implements Serializable { public String content; public int likes; public static int postCount; public Post(String content, int likes) { this.content = content; this.likes = likes; } public void printPost() { System.out.println(String.format(\u0026#34;Post : \\\u0026#34;%s\\\u0026#34; and Current Count for posts = %d.\u0026#34;, this.content, Post.postCount)); } } Explanation In the above example, we have added postCount as a class member or static member. Thus this variable will not be serialized with other data members.\nTo see this example in effect, user need to create two different programs for Serialization and Deserialization. By doing so the static member will not remember the actual value while serializing and the user will get postCount as 0 (Default Integer value) after deserialization.\n2. Transient members In some use cases, the user themselves doesn\u0026rsquo;t want to serialize all the data members of any object. For this use case, Java provides the keyword transient, any data member which is marked as transient will have a default value for their datatype in the serialized object.\nExample class Post implements Serializable { public String content; public transient int likes; public Post(String content, int likes) { this.content = content; this.likes = likes; } public void printPost() { System.out.println(String.format(\u0026#34;Post : \\\u0026#34;%s\\\u0026#34; with %d likes.\u0026#34;, this.content, this.likes)); } } // Serialization class is the same as the second example Output Before Serialization : Post: \u0026#34;This is my first post\u0026#34; with 5 likes. After Serialization : Post: \u0026#34;This is my first post\u0026#34; with 0 likes. Explanation In the above case, the number of likes went from 5 to 0 after serialization. This happened because the likes are marked as transient and thus its value is initialised with the default value of int datatype that is 0.\nUse Case Sometimes, some variables consist of large values which are very costly to transport over a network. Thus those values can be marked as transient. Also, sometimes the user does not want to share or save the value of the variable because it is either too trivial or confidential, those variables could also be marked as transient.\nNeed for Serialization  To transfer objects via a network To store Java objects in memory To store Java objects in files  [Icons credit: flaticon]\nFeatures of Serialization  Machine Independent: Any object serialized on any one machine can be deserialized by any other machine. Inheritance: If a parent class is marked as Serializable then all its subclasses will also become Serializable.  Things to remember  The serialized object will be a snapshot of the original object when it is serialized. It will NOT automatically sync with changes done to the original object, like reassigning values to data members. To reflect the new changes, the user will need to serialize the object again. If the class intended for serialization does not implement Serializable interface or any data member within it is not Serializable, then it will lead to NotSerializableException in runtime. User can try this by removing implements Serializable from class declaration.  "},{"uri":"https://tutswiki.com/python/decorators/","title":"Decorators in Python","tags":["Python"],"description":"Decorators in Python are nothing but the Gift Wrapping but for functions and classes","content":" Have you ever heard about Gift wrappings? Exactly, those which we do on the presents to be gifted. Decorators in Python are nothing but the Gift Wrapping but for functions and classes. In this tutorial, we will deep dive into the implementation of decorators on functions. But before you get into the topic, you should have a proper understanding of functions in Python. Assuming that you have, let\u0026rsquo;s get started.\nDefinition A decorator is nothing but a function that takes a function to be decorated as its parameter, and returns a function. A decorator is used to extend the functionality of a function by wrapping it in another function, i.e, The decorator function, without modifying the base function.\nSyntax @decoration_function def test_1(): print(\u0026#34;Hello World\u0026#34;) The above function simply means,\ntest_1 = decoration_function(test_1) Here, @decoration_function denotes a decorator. Now let\u0026rsquo;s define the decorator function decoration_function.\ndef decoration_function(function_to_be_decorated): def test_2(): print(\u0026#34;Decorated your function\u0026#34;) function_to_be_decorated() return test_2 Note: The decorator definition should be above the function_to_be_decorated.\nWe are all done decorating our function test_1(). Now, let\u0026rsquo;s try it out.\ntest_1() //Calling the function Complete Code:\ndef decoration_function(function_to_be_decorated): def test_2(): print(\u0026#34;Decorated your function\u0026#34;) function_to_be_decorated() return test_2 @decoration_function def test_1(): print(\u0026#34;Hello World\u0026#34;) test_1() The sequence of execution is as follows:\n decoration_function(test_1) return test_2 def test_2() print(\u0026quot;Decorated your function\u0026quot;) test_1() def test_1() print(\u0026quot;Hello World\u0026quot;)  Output:\nDecorated your function Hello World Decorating functions with Parameter Sometimes we stumble upon situations where our function takes parameters, so let us consider a function addition() which takes 2 integer parameters, a and b, and returns their sum.\n@decorate_addition def addition(a,b): print(a+b) Let us decorate the above function which handles situations where a or b is a negative integer.\ndef decorate_addition(function): def handler(a,b): if(a \u0026lt; 0 or b \u0026lt; 0): print(\u0026#34;Invalid values\u0026#34;) return return function(a,b) return handler Now, it\u0026rsquo;s time to call our function addition()\naddition(4,6) addition(4,-6) Output:\n10 Invalid values Using multiple decorators We can also add multiple decorators to our function. So let’s add another decorator on the above addition() function.\ndef max_range(function): def ranged(a,b): if(a \u0026gt; 100 or b \u0026gt; 100): print(\u0026#34;Values out of range\u0026#34;) return return function(a,b) return ranged And modifying our decorators by adding @max_range,\n@max_range @decorate_addition def addition(a,b): print(a+b) Let’s call our function again,\naddition(400,-6) Output:\nValues out of range Note: The sequence of decorators above addition() matters. It is executed from top to bottom. For instance,\n@decorate_addition @max_range def addition(a,b): print(a+b) Let\u0026rsquo;s call our function again,\naddition(400,-6) Output:\nInvalid values Decorators with multiple arguments Sometimes we come across situations where we have to pass multiple arguments, positional, or keyword. Python provides us with *args (tuple for positional arguments) and **kwargs (dictionary for keyword arguments).\nKeyword Arguments def multiple_args(function_to_be_decorated): def internal(*args,**kwargs): print(\u0026#34;Positional arguments\u0026#34;, args) print(\u0026#34;Keyword arguments\u0026#34;, kwargs) function_to_be_decorated(*args) return internal @multiple_args def test_fun(): print(\u0026#34;Keyword Args\u0026#34;) test_fun(name=\u0026#34;TutsWiki\u0026#34;, language=\u0026#34;Python\u0026#34;) Output:\nPositional arguments () Keyword arguments {\u0026#39;language\u0026#39;: \u0026#39;Python\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;TutsWiki\u0026#39;} Keyword Args Positional Arguments def multiple_args(function_to_be_decorated): def internal(*args,**kwargs): print(\u0026#34;Positional arguments\u0026#34;, args) print(\u0026#34;Keyword arguments\u0026#34;, kwargs) function_to_be_decorated(*args) return internal @multiple_args def test_fun(a,b): print(\u0026#34;Positional Args\u0026#34;) test_fun(1,2) Output:\nPositional arguments (1, 2) Keyword arguments {} Positional Args"},{"uri":"https://tutswiki.com/python/exceptions/","title":"Exceptions in Python","tags":["Python"],"description":"Python Exception is an event that occurs at runtime which disrupts the flow of execution of the program.","content":" In this tutorial, we will be learning about Exceptions. So without further ado, let\u0026rsquo;s get started.\nWhat is an Exception? The very first question that pops up in our minds.\n An Exception is an unexpected problem or issue that alters the normal flow of execution.\n What is an Exception in Python?  Exception in Python is an event that occurs at runtime which disrupts the flow of execution of a program and terminates it abnormally if left unhandled.\n Whenever an exception occurs, our program stops executing and returns an error traceback taking user to the error along with its details.\nFor Example, the exception ZeroDivisionError occurs when we divide a number by 0.\ndef division(a,b): print(a/b) division(2,0) In output, we get an exception with traceback\nTraceback (most recent call last): File \u0026#34;main.py\u0026#34;, line 4, in \u0026lt;module\u0026gt; division(2,0) File \u0026#34;main.py\u0026#34;, line 2, in division print(a/b) ZeroDivisionError: division by zero Types of exceptions There are 2 types of exceptions in Python\n Built-in User-defined  Built-in exceptions Following are some of the Built-in exceptions provided by Python.\n   Exception Reason     AssertionError Failed assert statement   AttributeError Failed attribute reference or assignment   EOFError Reached end-of-file (EOF) without reading any data from raw_input() or input() (Python 2.7 \u0026amp; Python 3.x respectively)   ImportError Import statement failed to load a module or it was not found   IndexError Index is not within the range (Generally while traversing in lists)   KeyboardInterrupt An unexpected key press interruption occurred (like Ctrl-C)   MemoryError Execution ran out of memory   NameError Local or global variable name not found   OverflowError Arithmetic result is too large to represent   ReferenceError Object referred already removed by Garbage Collector   RuntimeError When no matching category found   SyntaxError Syntax error found while parsing the code   IndentationError Unexpected or incorrect indentation   TabError Inconsistant use of spaces or tabs for indentation   TypeError Operation performed between incompatible types   TimeoutError Program not executed within a timeframe   UnboundLocalError Local variable referred but no value bounded to it   UnicodeError Error in unicode related encoding or decoding   ValueError Not a TypeError but unexpected value provided   ZeroDivisionError Number divided by zero    We handle the exceptions raised using try, except and finally statements.\n For User-defined exceptions and Exception handling, visit Exception handling in Python.\n "},{"uri":"https://tutswiki.com/java/exceptions/","title":"Exceptions in Java","tags":["Java"],"description":"An exception in Java is defined as an unwanted or unexpected event. Object, Throwable, Exception, Error.","content":" Exceptions An exception in java is defined as an unwanted or unexpected event, which arises at the time of execution of a program i.e. at run time which disturbs the normal flow or working of our program.\nFor better understanding, consider the following scenario where you have planned to watch a movie in a nearby theater and you got ready and departed from your house but in the mid-way, your vehicle got punctured and for reaching your destination you took a taxi. What happened here is that your normal work or normal flow got disturbed due to an unexpected event (here puncture). This unexpected event may occur in a program too and there it is called exceptions. To handle these unwanted events, we use the concept of exception handling i.e. finding an alternate way to maintain the normal flow like taking a taxi in the above scenario.\nObserve the below code. The code will execute flawlessly until the value of i is less than zero. As soon as the value of i becomes zero then in the print statement, the value of n/i will be 6\u0026frasl;0 which is mathematically not correct and is an exception. Hence the compiler will give an error and all the code written after the point of exception will not get executed.\nExample class test { public static void main(String[] args) { int n = 6; for (int i = 3; i \u0026gt;= 0; i--) { System.out.println(n / i); } } } Output:\n2 3 6 Arithmetic Exception (divide by zero) Exception Hierarchy graph TD; java.lang--Object; Object--Throwable; Throwable--Exceptions; Throwable--Errors; Exceptions--Runtime; Exceptions--Other;  From the above figure, we can say that throwable class is the parent class of error, and exception class and object is the parent class of the throwable class.\nError  It occurs because of a lack of system resources e.g. the hard drive is full etc. Errors are not recoverable by programmers Errors are only of one type i.e. runtime exceptions or unchecked exceptions Error has the sub class as StackOverflowError, VirtualMachineError, OutOfMemoryError  Exception  Programs are the root cause of exceptions Exceptions can be recovered or fixed by a programmer using techniques provided by Java Exceptions are of two types  Compile-time exceptions or Checked exceptions Runtime exceptions or Unchecked exceptions.   There are many inbuilt types of exceptions class provided by Java. Some of them are as follows:\n IOException: When the user is operating on input-output commands and if any exception arises at that time then IOException is thrown. RuntimeException: If any unwanted event arises at the time of execution of the code or at runtime then RuntimeException is thrown. It has further sub classes as  ArithmeticException NullPointerException NumberFormatException IndexOutOfBoundException   Checked Exception This type of exception is also known as compile-time exception. These exceptions can be checked at compile time. The compiler will show a warning at compile time when a program containing such exceptions are compiled. It includes classes like IOException, SQLExcpetion etc.\nExample import java.io.FileInputStream; class test { public static void main(String[] args) { FileInputStream fis = new FileInputStream(\u0026#34;d:/a.txt\u0026#34;); } } Output: Error: unreported exception FileNotFoundException. Must be caught or declared to be thrown\nThe above code will give you a warning at compile time that file not found, exception may arrive in future and you must handle that exception.\nUnchecked Exception These types of exceptions are also acknowledged as runtime exceptions. These exceptions can\u0026rsquo;t be checked and ignored by the compiler at compile time. Examples include ArithmetcException, ArrayIndexOutOfBoundException etc.\nExample class test { public static void main(String[] args) { int x = 10, y = 0, z; Z = x / y; System.out.println(c); } } Output: ArithmeticException: divide by zero\nThe compiler will not give any warning at the compilation time and the program will get compiled successfully. But at the runtime, it will give us an error. Hence these exceptions are ignored by the compiler and they remain unchecked.\nNow we have learned about exceptions and its type, in the next section we will learn about how to handle these exceptions.\n"},{"uri":"https://tutswiki.com/pandas-cookbook/","title":"Pandas Cookbook","tags":[],"description":"","content":" Pandas Cookbook Introduction A newbie friendly introduction to Pandas with real life examples.\n"},{"uri":"https://tutswiki.com/python/exception-handling/","title":"Exception Handling in Python","tags":["Python"],"description":"Python provides us try, raise, except, finally and else blocks for handling raised exceptions properly. Built-In and User-defined Exceptions are also covered.","content":" Now that we have knowledge of Exceptions and its types, the question arises,\n How do we handle exceptions so that flow of our program does not stop abruptly?\n Well, for that Python Exception Handling comes to our rescue.\nException Handling in Python Python provides us try, raise, except and finally blocks for handling raised exceptions properly. Let us understand each of them using an example.\ntry and except try: x = int(input(\u0026#34;Enter an integer: \u0026#34;)) except ValueError as te: print(\u0026#34;Exception Occured:\u0026#34;,te) Output:\nEnter an integer: a Exception Occured: invalid literal for int() with base 10: \u0026#39;a\u0026#39; try, except and raise try: x = int(input(\u0026#34;Enter an integer less than 10: \u0026#34;)) if(x \u0026gt; 10): raise ValueError(\u0026#34;Number not less than 10\u0026#34;) print(\u0026#34;Successfully entered\u0026#34;,x) except ValueError as ex: print(ex) Inside the try block, we write code which may raise an exception. Here, we have taken an integer input which should be less than 10. If not, we have used raise statement to manually raise ValueError exception which is a built-in exception. We have also added a custom message inside the same.\nNow if we enter a number greater than 10, say x = 11, try block will throw the exception ValueError raised by raise statement which will be then caught by except which is used to catch any exception raised inside the try block. except will then print our custom message Number not less than 10. Let us see the output by entering values.\nOutput:\nEnter an integer less than 10: 11 Number not less than 10Enter an integer less than 10: 9 Successfully entered 9 try, except and finally finally is an optional block which will run no matter what. It is used to release all the resources which were used by the program.\ntry: x = int(input(\u0026#34;Enter an integer less than 10: \u0026#34;)) if(x \u0026gt; 10): raise ValueError(\u0026#34;Number not less than 10\u0026#34;) print(\u0026#34;Successfully entered\u0026#34;,x) except ValueError as ex: print(ex) finally: print(\u0026#34;Thank You\u0026#34;) Output:\nEnter an integer less than 10: 11 Number not less than 10 Thank You try, except and else else block with try runs only if no exception is raised inside the try block. Here, try block will look for ZeroDivisionError exception if raised and will print the message Caught ZeroDivisionError, otherwise the else block will execute. So basically it works as an if\u0026hellip;else conditional statement.\ndef myFun(a,b): try: a/b except ZeroDivisionError: print(\u0026#34;Caught ZeroDivisionError\u0026#34;) else: print(\u0026#34;Successful\u0026#34;) If we call above function as\nmyFun(1,2) then output\nSuccessful and if\nmyFun(1,0) then output\nCaught ZeroDivisionError Now that we have learned about try, raise, except and finally statements, let\u0026rsquo;s use them with Built-in and User-defined exceptions.\nBuilt-in Exceptions We can handle Exceptions using the try/except/raise/finally/else blocks we have learned above. For example,\nmyList = [0,5,4,8,4] for i in range(0,6): print(myList[i]) We can see that there are 5 integers in the list myList but our for loop is iterating 6 times. So when the loop reaches the 6th iteration, it raises the following exception\n0 5 4 8 4 Traceback (most recent call last): File \u0026#34;main.py\u0026#34;, line 3, in \u0026lt;module\u0026gt; print(myList[i]) IndexError: list index out of range Now we do not want our program to stop abruptly, so we use exception handling.\nExample myList = [0,5,4,8,4] try: for i in range(0,6): print(myList[i]) except: print(\u0026#34;Exception occured\u0026#34;) finally: print(\u0026#34;Bye\u0026#34;) Output:\n0 5 4 8 4 Exception occurred Bye Catch Specific Exceptions myList = [0,5,4,8,4,\u0026#39;a\u0026#39;] try: for i in range(0,6): print(myList[i]**2) except IndexError as ie: print(ie) except TypeError as te: print(te) except: print(\u0026#34;Some Exception occured\u0026#34;) finally: print(\u0026#34;Bye\u0026#34;) Output:\n0 25 16 64 16 unsupported operand type(s) for ** or pow(): \u0026#39;str\u0026#39; and \u0026#39;int\u0026#39; Bye Let\u0026rsquo;s take another example where we\nCatch multiple Errors with single Except block def myFun(): try: 1/0 except (TypeError, ZeroDivisionError): print(\u0026#34;Caught TypeError or ZeroDivisionError\u0026#34;) myFun() Output:\ncaught TypeError or ZeroDivisionError User-defined exceptions Sometimes the built-in exceptions are not good enough to handle the exceptions properly. In that case, user has an option to define a new exception by creating a custom base class which derives from the Exception class. For instance,\nclass CustomClass(Exception): pass Here CustomClass is a custom base class which derives from Exception class. Now the user-defined exceptions derive from this base class.\nclass CustomException1(CustomClass): pass There can be multiple user-defined exceptions,\nclass NotValidError(CustomClass): pass class NotFoundError(CustomClass): pass Now let\u0026rsquo;s understand using an example\nExample Suppose we want our user to input a customer Id which starts with CID and is of 6 digits. For that, we define a function myFun() which takes a string input x and checks whether or not the string length is 6 and it starts with CID.\ndef myFun(): try: x = input(\u0026#34;Enter your Customer ID: \u0026#34;) if(len(x) != 6): raise NotValidError elif(x[0:3] != \u0026#34;CID\u0026#34;): raise NotFoundError else: print(\u0026#34;Successful\u0026#34;) except NotValidError: print(\u0026#34;Length should be 6\u0026#34;) except NotFoundError: print(\u0026#34;Should start with \u0026#39;CID\u0026#39;\u0026#34;) finally: print(\u0026#34;Thank You\u0026#34;) Output:\nEnter your Customer ID: CID999 Successful Thank YouEnter your Customer ID: CI9898 Should start with \u0026#39;CID\u0026#39; Thank YouEnter your Customer ID: CID9898 Length should be 6 Thank You Conclusion Exception handling is an important concept which makes sure that our program flow does not get disrupted unexpectedly or abruptly, the exception raised is handled properly and execution continues smoothly.\n"},{"uri":"https://tutswiki.com/java/exception-handling/","title":"Exception Handling","tags":["Java"],"description":"Exception handling is the facility provided by Java to handle all the unwanted events or exceptions that arises in our program to maintain the normal flow of our code. try,catch,throw,finally","content":" Exception handling is the facility provided by Java to handle all the unwanted event or exception that arises in our program to maintain the normal flow of our code. Whenever there is an exception, the method in which the exception occurs will create an object and that object will store three things:\n Exception name: It stores the class name which can handle the occurred exception. Description: It describes what type of exception has occurred. Stack trace: Stores the information about the line at which exception occurred or in which method the exception occurred.  graph TD; Object--JVM; JVM--id1[Default Exception Handler]; JVM--id2[Manual Handler];  Observe the above figure. As soon as the object is created, that object is passed to Java Virtual Machine (JVM) and now JVM checks whether the exception is handled by the user or not. If it is not handled then JVM passes the control to Default Exception Handler which will print the exception and our program is terminated abnormally.\nAn exception can be handled manually by the programmer using five keywords\n try catch finally throw throws  Try and Catch Syntax try { //code which can cause exception } catch(ExceptionClassName ref.var.name) { //handling code } After every try, there should be a catch block. Using try and catch block, we can be assured that our program will not terminate abnormally as it was terminating earlier without try and catch block.\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; Z = x / y; } catch(Exception e) { System.out.println(e); } System.out.println(\u0026#34;hi\u0026#34;); } } Output:\nArithmeticException: divide by zero hi  When you will compile the above code, it will easily get compiled without any warning and will display the exception that has occurred and it will also print hi which shows that our program has not terminated abnormally.\nFlow of try and catch Example class test { public static void main(String[] args) { System.out.println(\u0026#34;hi\u0026#34;); try { System.out.println(\u0026#34;welcome\u0026#34;); int x = 10, y = 2, z; Z = x / y; System.out.println(\u0026#34;to\u0026#34;); } catch(Exception e) { System.out.println(\u0026#34;Tuts\u0026#34;); System.out.println(e); System.out.println(\u0026#34;Wiki\u0026#34;); } System.out.println(\u0026#34;hello\u0026#34;); } } Output:\nhi welcome to hello In the above code, the control is first at the print statement present just before try keyword which prints hi and then the control goes in try block. The first print statement prints welcome and the mathematical expression is evaluated. Since the denominator is non zero number, no exception arises and the control passes to the last print statement in try block which prints to. Since no exception occurred, the catch block didn’t get executed and the program terminated normally by printing hello.\nNow observe the below code to understand the flow when an exception arises.\nExample class test { public static void main(String[] args) { System.out.println(\u0026#34;hi\u0026#34;); try { System.out.println(\u0026#34;welcome\u0026#34;); int x = 10, y = 0, z; Z = x / y; System.out.println(\u0026#34;to\u0026#34;); } catch(Exception e) { System.out.println(\u0026#34;2\u0026#34;); System.out.println(\u0026#34;Tuts\u0026#34;); System.out.println(\u0026#34;Wiki\u0026#34;); System.out.println(e); } System.out.println(\u0026#34;hello\u0026#34;); } }hi welcome 2 Tuts Wiki ArithmeticException: divide by zero hello Now the value of the denominator in the try block is zero which will cause an exception. The control is first at print statement before try keyword which prints hi and then the control goes in try block. The first print statement prints welcome and the mathematical expression is evaluated. Since the denominator is zero, an exception arises and at once the control is passed to catch block. All the print statement in the catch block gets executed and the program gets terminated normally by printing hello. Note that after the execution of the catch block, control does not pass to try block back. Hence everything written below the occurrence of exception in try block will remain unexecuted.\nMultiple catch block We can have multiple catch blocks with a try block and the catch block which will come first will get the control first i.e. top to bottom approach.\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; Z = x / y; } catch(ArithmeticException e) { System.out.println(e); } catch(IndexOutOfBoundException e2) { System.out.println(e2); } System.out.println(\u0026#34;hi\u0026#34;); } }ArithmeticException: divide by zero hi  Order of catch block is very important because improper ordering may give you an error. The order of the catch block should be child class (ArithmeticException) to parent class (Exception), not the parent to the child class. For better understanding, consider below example-\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; } catch(Exception e) { System.out.println(\u0026#34;exception\u0026#34;); } catch(ArithmeticException e) { System.out.println(\u0026#34;ArithmeticException\u0026#34;); } } }Exception ArithmeticException has already been caught catch(ArithmeticException e) The compiler will give an error while compiling the above code. It will tell the user that the exception which has occurred has already been caught by the first catch block and there is no use to re-write the catch block which handles the same exceptions. Therefore, the order of catch block is important and should be from the child class to the parent class, not the parent to the child class.\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; } catch(ArithmeticException e) { System.out.println(\u0026#34;Arithmeticexception\u0026#34;); } catch(Exception e) { System.out.println(\u0026#34;Exception\u0026#34;); } } }Arithmeticexception The above code will execute properly without any error because the proper ordering of the catch block has been done. The first catch block says that if any arithmetic exception arises then it can handle it and if there is any other type of exception other than arithmetic exception then the second catch block will handle it.\n"},{"uri":"https://tutswiki.com/java/throw-throws/","title":"throw and throws","tags":["Java"],"description":"The keyword throw is employed to throw an exception explicitly. It is mainly used to throw custom exceptions or user-defined exceptions.","content":" In the previous tutorial, we learned how to handle an exception using try and catch block. Now we will learn how exception handling is done using throw and throws keyword.\nthrow keyword The keyword throw is employed to throw an exception explicitly. It is mainly used to throw custom exceptions or user-defined exceptions. It is placed inside the method.\nSyntax throw new ExceptionClassName(\u0026#34;Message\u0026#34;); JVM or method does not make the exception object like it used to do before. Here the user has to explicitly make an object of the exception using the throw keyword.\nExample class test { public static void DivByZero() { throw new ArithmeticException(\u0026#34;Cannot divide by zero\u0026#34;); } public static void main(String[] args) { DivByZero(); } } Output:\nJava.lang.ArithmeticException: Cannot divide by zero We can also have a user-defined class of exceptions. Check the example given below\nExample import java.util.Scanner; class AgeLimit extends RuntimeException { AgeLimit(String s) { super(s); } } class voting { public static void main(String[] args) { int age = 16; if (age \u0026lt; 18) { throw new AgeLimit(\u0026#34;you are not eligible for voting\u0026#34;); } else { System.out.println(\u0026#34;you can vote\u0026#34;); } } System.out.println(\u0026#34;hello\u0026#34;); } Output:\nException in thread \u0026#34;main\u0026#34; AgeLimit:you are not eligible for voting. We note here that exception is still not handled because our program has terminated abnormally (because it did not print hello). To handle it, you have to use try and catch block.\nExample import java.util.Scanner; class AgeLimit extends RuntimeException { AgeLimit(String s) { super(s); } } class voting { public static void main(String[] args) { int age = 16; try { if (age \u0026lt; 18) { throw new AgeLimit(\u0026#34;you are not eligible for voting\u0026#34;); } else { System.out.println(\u0026#34;you can vote\u0026#34;); } } catch(Exception e) { e.printStackTrace(); } } System.out.println(\u0026#34;hello\u0026#34;); } Output:\nException in thread “main” AgeLimit:you are not eligible for voting. hello  Now the above code will not terminate abnormally because we have handled it using try and catch block. Remember that you cannot write any code below the throw keyword statement. If you do so then you will get a compiler error.\nthrows keyword throws keyword is used at the time of method declaration which indicates to the caller method that a particular type of exception may arrive if you are using this method and accordingly the caller method has to handle that exception. throws keyword is used only for checked exceptions.\nSyntax Method () throws Exception1 ,Exception2……Exception n For better understanding, consider the example given below\nExample import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.FileNotFoundException; { class files { void ReadFiles() throws FileNotFoundException { FileInputStream fi = new FileInputStream(\u0026#34;d:/xyz.txt\u0026#34;); } } class test { public static void main(string[] args) { try { ReadFiles(); } catch (FileNotFoundException e) { e.printStackTrace(); } System.out.println(\u0026#34;hello\u0026#34;); } } Output:\nJava.io.FileNotFoundException: d:/xyz.txt hello  Now when the main function will call the ReadFiles method then the calling method i.e. main function will get informed that the function which you are calling will throw a FileNotFoundException and therefore the main function should handle it. If we would have not used the try-catch block then the compiler would have given us warning at compile time. Since we used the try-catch block, our code will get compiled easily and will not terminate abnormally (as we can confirm from hello message above).\nDifference between throw and throws    throw throws     It is used to create an exception object manually It is used to declare the exception.   It is mainly used for an unchecked exception It is mainly used for a checked exception   It can throw only a single exception It can declare multiple exceptions   \u0026ldquo;throw\u0026rdquo; keyword is used inside the method \u0026ldquo;throws\u0026rdquo; keyword is used with a method signature    "},{"uri":"https://tutswiki.com/java/finally/","title":"finally","tags":["Java"],"description":"finally is the block that will always get executed irrespective of the fact whether the exception is handled or not.","content":" In the previous tutorial, we learned how to handle an exception using throw and throws keywords. Now we will learn about finally block.\nfinally finally is the block that will always get executed irrespective of the fact whether the exception is handled or not.\nSyntax try () { //code that might produce exception} \tcatch(Exception e) { //handle exception } \tfinally { //code that always gets executed } \t We can also have finally block without catch block.\ntry() {//code that might produce exception} finally {//code that always gets executed } But the problem with the second syntax is that we can not handle the exception since the catch block is missing.\nExample class test { public static void main(String[] args) { try { int x = 10, y = 2, z; Z = x / y; System.out.println(z); } catch(Exception e) { System.out.println(\u0026#34;welcome in catch block\u0026#34;); } finally() { System.out.println(\u0026#34;Hi, my_name_is_John\u0026#34;); } } } Output:\n5 Hi, my_name_is_John The above code will not go to catch block since no exception arises. Statements of try and finally gets executed. Now let\u0026rsquo;s see an example where an exception arises.\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; Z = x / y; System.out.println(z); } catch(Exception e) { System.out.println(\u0026#34;welcome to the catch block\u0026#34;); } finally() { System.out.println(\u0026#34;Hi, my_name_is_John\u0026#34;); } } } Output:\nWelcome to the catch block. Hi, my_name_is_John Here the exception arises but then also the finally block gets executed. Now, what happens if we write the finally block with try block but without catch block. Let\u0026rsquo;s see the given example\nExample class test { public static void main(String[] args) { try { int x = 10, y = 0, z; Z = x / y; System.out.println(z); } finally() { System.out.println(\u0026#34;Hi, my_name_is_John\u0026#34;); } System.out.println(\u0026#34;Hello\u0026#34;); } } Output:\nHi, my_name_is_John ArithmeticException: divide by zero The above code gets terminated abnormally because the exception has not been handled but then also finally block gets executed.\nUnlike catch block, we can\u0026rsquo;t use multiple finally block with one try block.\nWhen finally doesn\u0026rsquo;t work? It might happen sometime that finally block does not get executed. Some of the possible cases are:\n Using the method System.exit(0) Using a fatal error that can cause the process to abort If there is exception present in finally block itself If the thread gets disturbed  finally block is also used for explicitly closing the resources such as connections, files, etc.\ntry with resources Unlike finally, try with resources automatically closes all the running resources which have been initiated by try and catch block.\nSyntax try (Resource declaration) { // code that uses the resource } catch(ExceptionType e1) { // catch block which handles all the exceptions } Example import java.io.FileReader; import java.io.IOException; public class test { public static void main(String args[]) { try (FileReader file = new FileReader(\u0026#34;d://xyz.txt\u0026#34;)) { int[] a = new int[10]; file.read(a); for (int c: a) System.out.println(c); } catch(IOException e) { e.printStackTrace(); } } } In the above code, the FileReader class automatically gets closed as the try and catch block gets executed. Some important points regarding try and resource statement\n Try with resources statements can declare multiple classes and these classes are closed in the reverse order i.e. bottom to up. A class should be of AutoCloseable type. Resources that have been declared in the try block are automatically considered as final by the compiler.  User defined exception You can also create customized exception class. If you want to create a checked exception, you\u0026rsquo;ll need to extend the Exception class, if you want to create the unchecked or runtime exception class then you\u0026rsquo;ll need to extend RuntimeException class.\nExample import java.util.Scanner; class AgeLimit extends RuntimeException { AgeLimit(String s) { super(s); } } class voting { public static void main(String[] args) { int age = 16; if (age \u0026lt; 18) { throw new AgeLimit(\u0026#34;you are not eligible for voting\u0026#34;); } else { System.out.println(\u0026#34;you can vote\u0026#34;); } } System.out.println(\u0026#34;hello\u0026#34;); } Output:\nException in thread \u0026#34;main\u0026#34; AgeLimit:you are not eligible for voting.  Above is created an unchecked exception class by the user which extends the RuntimeException and its constructor prints the exception that occurs.\nNote With this, we have completed our tutorial of exception handling using five keywords i.e. try, catch, finally, throw and throws. Some important points which you need to know about the rules of the declaration of these five keywords are:\n There is no existence of a catch block without a try block There should be no code between try, catch, and finally block There is no existence of try block without either of the catch or finally block finally block is completely optional  "},{"uri":"https://tutswiki.com/java/lambda-expressions/","title":"Lambda Expressions in Java","tags":["Java"],"description":"It is an anonymous function which doesn&#39;t belong to any class nor a name. It provides a concise way to show a method or interface.","content":" 1. Lambda Expressions 1.1 Introduction  Lambda expression is the fundamental approach to functional programming in Java. It is an anonymous function which doesn’t belong to any class nor does it have a name. It provides a concise way to show a method or interface. Provides implementation of functional interface.  1.2 Syntax Parameter(s) -\u0026gt; body of expression\n1.3 Characteristics  Optional type declaration - Declaration of parameter type is not required. It means when declaring parameters we don\u0026rsquo;t have to declare their type. Optional parentheses - Required when multiple parameters are used. It means we don’t have place parentheses when only a single parameter is passed Optional curly braces - Only to be used when the expression body contains multiple statements and is not necessary when the body contains only one statement. Optional return keyword - Automatically returns the value when body contains one expression to return it. It means when only one expression returns the value then we dont need to add return keyword before it.  1.4 Parameter Types  Zero Parameters - No parameters are passed.\n( ) -\u0026gt; System.println(\u0026#34;No Parameters\u0026#34;) One Parameter - Only one parameter is passed.\n(x) -\u0026gt; System.println(\u0026#34;One Parameter: \u0026#34; + x) Multiple Parameters - Multiple parameters are passed.\n(x,y) -\u0026gt; System.println(\u0026#34;Multiple Parameters: \u0026#34; + x + \u0026#34; \u0026#34; + y);  1.5 Lambda Expression Example Accepts two values x, y and returns the product of those two numbers.\n(x, y) -\u0026gt; x * y 2. Functional Interface 2.1 Introduction  It is an interface which contains only one abstract method. It can have any number of default or static methods.  Examples: FileFilter, Comparators, Runnable etc.\nExample import java.util.*; // Functional Interface interface Addition { void answer(int x, int y); // Abstract function } public class Main { public static void main(String args[]) { Addition obj = (int x, int y) - \u0026gt; System.out.println(x + y); obj.answer(25, 25); } } Output:\n50 3. Lambda Variable Capture Lambda expressions can access variables declared outside the lambda function under certain conditions.\n Local Variables Instance Variables Static Variables   Local Variable import java.io.*; interface abst { void local(String s); } class main { public static void main(String[] args) { String text1 = \u0026#34;bcbcc\u0026#34;; // Local Variable  abst obj = (String a) - \u0026gt; System.out.println(a); obj.local(text1); } } Output:\nbcbcc Instance Variable and Static Variable File: Lambda.java\nimport java.io.*; interface Interf { void print(); } public class Lambda { int x; // instance variable  static int y = 100; // static variable  Lambda(int x) { this.x = x; } void show() { Interf test = () - \u0026gt; { System.out.println(\u0026#34;Value of x = \u0026#34; + x); System.out.println(\u0026#34;Value of y = \u0026#34; + y); }; test.print(); } public static void main(String arg[]) { Lambda obj = new Lambda(50); obj.show(); } } Output:\n$ javac Lamda.java $ java Lamda Value of x = 50 Value of y = 100 4. Method reference in Lambda Method reference is used to give reference to methods in the functional interface. It makes the code more concise and much more reading friendly.\n4.1 Types of method references  Static Method Reference Instance Method Reference Constructor Reference\n  Example of Static Method Reference import java.io.*; interface abst { void local(int x, int y); } public class Test { public static void adding(int x, int y) { System.out.println(\u0026#34;Sum = \u0026#34; + (x + y)); } } class Example { public static void main(String[] args) { abst ref = Test::adding; ref.local(30, 30); //output - Sum = 60  } } Example of Instance Method Reference import java.io.*; interface abst { void local(int x, int y); } public class Test { public void adding(int x, int y) { System.out.println(\u0026#34;Sum = \u0026#34; + (x + y)); } } class Example { public static void main(String[] args) { Test add = new Test(); abst ref = add::adding; ref.local(30, 30); } } Example of Constructor Reference File : Test.java\nimport java.io.*; interface Interf { Hello getMessage(String s); } class Hello { Hello(String s) { System.out.println(s); } } public class Test { public static void main(String[] args) { Interf obj = Hello::new; obj.getMessage(\u0026#34;Hello World\u0026#34;); } } Output:\n$ javac Test.java $ java Test Hello World Miscellaneous Code Examples For each loop in lambda form import java.util.*; public class Example { public static void main(String[] args) { List \u0026lt; Integer \u0026gt; list = new ArrayList \u0026lt; Integer \u0026gt; (); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); list.forEach((n) - \u0026gt; System.out.println(n)); } } Output:\n2 3 4 5 Filtering Collection Data Using Lambda Expression import java.util.*; import java.util.stream.Stream; class Product{ String brand; float price; public Product(String brand, float price) { super(); this.brand = brand; this.price = price; } } public class Test { public static void main(String[] args) { List\u0026lt;Product\u0026gt; lst=new ArrayList\u0026lt;Product\u0026gt;(); lst.add(new Product(\u0026#34;Asus\u0026#34;,10000)); lst.add(new Product(\u0026#34;Dell\u0026#34;,20000)); lst.add(new Product(\u0026#34;Rogue\u0026#34;,30000)); lst.add(new Product(\u0026#34;Mac Book\u0026#34;,40000)); Stream\u0026lt;Product\u0026gt; data = lst.stream().filter(p -\u0026gt; p.price \u0026gt; 15000); data.forEach( product -\u0026gt; System.out.println(product.brand+\u0026#34;: \u0026#34;+product.price)); } }  Output:\n$ javac Test.java $ java Test Dell: 20000.0 Rogue: 30000.0 Mac Book: 40000.0"},{"uri":"https://tutswiki.com/java/regex/","title":"Regular Expressions in Java","tags":["Java"],"description":"Regular expression in simple terms is a special sequence of symbols and alphanumeric characters that defines a search pattern.","content":" 1.1 Introduction Regular Expression in simple terms is a special sequence of symbols and alphanumeric characters that defines a search pattern.\n1.2 Uses  These are used to describe what you are looking for when you search for data in text, article etc.\n It is used for Data Validation e.g. checking if the user has inserted a valid e-mail address or not while registering in a website. It is used for Data Scraping/Web scraping e.g. when you want to scrape particular data from a website. These are also used in search engines, string processing etc.  2. Regex in Java 2.1 RegExp in Java Java Regex can be defined as an API which is used for searching and manipulating (like replacing the matched word with some other word) strings from a given text which matches the pattern defined by the API.\n2.2 Java Regex Package Java provides a package known as java.util.regex for pattern matching with regular expressions. This package consists of three main classes\n Matcher Class Pattern Class PatternSyntaxException class  2.2.1 Matcher Class Matcher class\u0026rsquo; job is to interpret the pattern defined by pattern class and is used to perform matching functions on the given character sequence.\nSome functions in the matcher class are:\n boolean matches()  Used to test whether the given string matches the given regex pattern or not and returns a boolean. If the string matches it returns true else false.  boolean find()  Used to find the next string expression which matches the given regex pattern in the given text. If any string matches the pattern it returns true else false.  boolean find(int start)  Used to search the next string expression from the given text which matches the given regex pattern from the given start number. It also returns a boolean value.   2.2.2 Pattern Class Pattern class job is to compile the given regular expression which is used to define the pattern for a regex engine. This class accepts the pattern input provided by the user and compiles it so that matcher class can perform its tasks. One of the functions in Pattern class is\n Pattern.compile(String regex)  Its job is to compile the given regex pattern and return the instance of a pattern.   2.2.3 PatternSyntaxException Class It simply is used to find errors in regular expression patterns which are provided by the user.\nExample import java.util.regex.*; public class reg { Public static void main(String[] args) { String email = \u0026#34;abcd99@gmail.com\u0026#34;; // Pattern for email validation with constraints \tString pat = \u0026#34; ^ [a - zA - Z0 - 9_ ! #$ % \u0026amp;\u0026#39;*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$\u0026#34;; Pattern p = Pattern.compile(pat); // Pattern Object  Matcher m = p.matcher(email); // Matcher Object  System.out.println(m.matches()); } } Output: Prints true if the email is valid and false for invalid, here it will print true\n2.3 Regex Quantifiers Regex quantifiers are used in regular expressions to define how often an element can occur in the strings which the user is searching for. Some examples are\n * - it symbolizes that occurrences of the element should be zero or more times + - it symbolizes that occurrences of the element should be one or more times ? - it symbolizes occurrence of the element should be zero or one. {X} - it symbolizes occurrences of the element should be X number of times {X, Y} - it symbolizes occurrences of the element should be between X and Y number of times {X,} - it symbolizes occurrences of the element should be X or more than X  2.4 Regex Character Class Java Character Class has predefined sets of expressions which can be directly used as regex expressions and can be used to create our required pattern.\n [xyz] - checks occurrence of x, y or z [^xyz] - checks occurrence of any character other than x, y or z [a-zA-Z] - checks occurrence of characters from a-z or A-Z [a-z\u0026amp;\u0026amp;[xyz]] - checks occurrence of characters from a-z with xor y or z [a-z\u0026amp;\u0026amp;[^xy]] - checks occurrence of characters from a-z except x or y or z [a-z\u0026amp;\u0026amp;[^m-p]] - checks occurrence of characters from a-z and should not have characters m through p  Example import java.util.regex. * ; public class Reg { public static void main(String[] args) { Pattern p = Pattern.compile(\u0026#34;[abc]{3}\u0026#34;); Matcher m = p.matcher(\u0026#34;bcc\u0026#34;); Matcher ma = p.matcher(\u0026#34;acz\u0026#34;); System.out.println(m.matches()); System.out.println(ma.matches()); } } Output:\ntrue false This program will only print true under the following conditions:\n String length is equal to 3. String only contains a, b or c.  2.5 Regex Metacharacters These are ordinary characters which have special meaning in computer programs and are used for making regular expressions.\nSome examples are:\n \\d - denotes you can enter any digit. It is a short form of the pattern [0-9] \\D - denotes you can enter any non-digit. It is a short form of the pattern [^0-9] \\w - denotes you can enter any word character. It is a short form of the pattern [a-zA-Z_0-9] \\W - denotes you can enter any non-word character. It is a short form of the pattern [^\\w] \\b - denotes a word boundary which means a position where a word begins or ends \\B - denotes a non-word boundary same as \\b but it is used for non-word characters.  Example import java.util.regex. * ; public class Reg { public static void main(String[] args) { Pattern p = Pattern.compile(\u0026#34;\\\\D{3}\u0026#34;); Matcher m = p.matcher(\u0026#34;123\u0026#34;); Matcher ma = p.matcher(\u0026#34;aaa\u0026#34;); System.out.println(m.matches()); System.out.println(ma.matches()); } } Output:\nfalse true"},{"uri":"https://tutswiki.com/machine-learning-apis-mlaas/","title":"List of Machine Learning APIs on Cloud (MLaaS)","tags":[],"description":"There are many ML APIs that work as a service provider (MLaaS) where the client can approach the pre-defined toolsets to handle the modulations and performances of language processing, image recognition, speech translation etc.","content":" As the world moves towards rapid technological advancements, terms like \u0026lsquo;BigData\u0026rsquo;, \u0026lsquo;Artificial Intelligence\u0026rsquo;, \u0026lsquo;Robotics\u0026rsquo; are heard on a regular basis. As vast as the study of these fields are, they share a common functionality and performance unit known as Machine Learning. Machine Learning (ML)is a way of making computers act without being explicitly programmed where the system itself analyses the data provided and formulates a decision.\nSoftware Developers and Data Scientists unlock potential for customers to do more than they otherwise could in a timely manner by building Application Programming Interface (APIs) for Machine Learning. API is a set of code between two or more software programmes. It delivers your request to the provider that you are requesting it from and then delivers back the response to you.\nAPIs of ML simplify the process for the clients by providing a primary structure through which the client can develop their model further according to the needs of the application. The client need not know what all is going on the back-end of the programme.\nThere are many ML APIs that work as a service provider (MLaaS) where the client can approach the pre-defined toolsets to handle the modulations and performances of language processing, image recognition, speech translation etc.\nAMAZON WEB SERVICES Being a established giant in the market, Amazon Web Services is one of the top revenue generators of Amazon.\nThe pay-as-you-go mega-service provider is a utility in ML and ML adjacent services also. Few of it\u0026rsquo;s common and vividly used ML APIs are:-\nAmazon Comprehend As the name suggests, Comprehend refers to the ability to understand something. The operations of synchronizing the machines to understand the user inputted text files falls under the subject of Natural Language Processing (NLP). Comprehend NLP service uses machine learning to decryt or find insights and relationships in the structured or unstructured text material.\nIt can work as a customer sentiment analyst where the service becomes familiar with the lingual; pulls out the dominant terms; understands the nature of the text and further analyse the text by splitting the words and sentences (tokenization); and automatically segregates the collections of text files into appropriable topics.\nAmazon CodeGuru It is an exclusive service to improve user’s Java Code experience by operating in two parts - ACG Profiler and ACG Reviewer. The CodeGuru Profiler collects runtime performance data from your live applications using ML algorithms to help the user in deducting and correcting the most expensive or inefficient line of codes. It basically improves the overall performance by removing the CPU bottlenecks.\nWhile the CodeGuru Reviewer doesn’t highlight syntax errors, it identifies more complex problems and suggest improvements from the AWS CodeCommit, BitBucket, and Github severs repositories on issues like concurrency, resource leak preventions and input validations.\nAmazon Lex It is the service behind Amazon Alexa! This ‘chatbot’ deep learning technology is now easily available to any developer to build efficient and organised workplace conversational models.\nAlexa Kendra This is one of most powerful and efficient AWS tool to provide Search capabilities in user\u0026rsquo;s websites and applications. Three features Alexa Kendra will soon start working upon are:\n Incremental learning: It will prioritise the documents most searched by the user to the top of the search list. Query Auto Completion: The user will be guided towards commonly asked information by automatically completing the search query. Analytics and Ongoing Improvement: The activities during searches will be captured and regular metrics will be surfaced to provide a more refined and relevant data to the user.  Amazon SageMaker SageMaker is a fully managed service that gives powerful compute engines and huge processing power by selecting the user based configurations and creating a virtual PC.\nIt provides every developer and data scientist with the freedom to frame and implement ML models using the SageMaker toolkits like Studio, AutoPilot, Ground Truth, Experiments, Notebooks, Marketplace,Debugger, Model Monitor and Neo.\nThe SageMaker is a well-packed tool that reduces the complexity from each step of the ML workflow so the user can conveniently deploy more ML used cases, anything from debugging algorithms to utilising and sharing the pre-built test codes to tracking the iterations made to a particular model .\nGOOGLE CLOUD APIs Most frequently used Google Cloud Services include Computing and hosting,Storage,Databases,Networking,Big data and Machine learning. Few of the Machine Learning APIs are as follows:\nVision This API works on pre-trained machine models through REpresentational State Transfer(REST) and Remote Procedure Call (RPC) APIs. It is based on optical character recognition where it can detect objects and faces, label images by reading printed and handwritten texts and thus convert valuable meta data into image catalogues.\nNatural Language The Text Analysis feature seems to be quite effective in Google Cloud Natural Language where it can find relation in sentences, detect Point-of-Sale (POS) tags and provide morphological analysis to find relations between words. This API falls under Conversational AI, which also supports speech APIs to convert audio to text or vice versa, provided conversational virtual assistances and dialogue-flow capabilities similar to Amazon Lex.\nTranslation API The translation API uses deep network for translation and can convert and detect over 100 languages, the maximum any platform based service provider has been capable of so far. The pricing for conversion of language is different from that detection of language.\nMICROSOFT AZURE COGNITIVE SERVICES Azure Machine Learning services are broadly divided into 5 basic categories through which they extend their solutions and trainings to ML models.\nDecision Along with chief capabilities of content personalisation and moderation, Azure is the only major platform providing Anomaly Detector Preview as a service which ingests time series data and allows the customer to fine tune the sensitivity to potential anomalies.\nLanguage The QnA Maker is an additional API service provided by Azure other than the usual Text Analysis and Translations. It allows the user to create a conversational interrogative and responsive layer from the pre-existing data. The Immersive Reader is the reading technology that empowers users of different age groups with features like reading aloud.\nSpeech The security technique of Speaker Recognition identifies and verifies the person speaking based on unique voice signatures created during voice enrolments. Like other major platforms, it also provides features to convert speech to text and vice-versa.\nVision The Computer Vision API can be used for digital market campaigns, facial recognitions, extracting text key value pairs from documents. The independently avaialble Ink Recogniser API can recognise digital handwritings, shapes and layout of inked documents.\nSearch Further classified under Bing categories, the web search APIs can automate queries and spell-checks and make engine, entity, image, news, video and visual (search using images)searches.\nGENEEA INTERPRETOR API Geneea ML API is based on Python Software Development Kit (SDK) and mainly consists of 4 elements:\nGeneral API (G3) The unique NLP feature of this API is its ability to perform Diacritics Corrections (the signs or symbols over alphabets can be automatically added indicating change in pronunciation). Like all other APIs it can detect text over 30 languages, analyse client’s sentiments, extract necessary information like places, products etc, or simplify the searches to broader topics.\nThe feature can also be accessed over experimental Kotlin SDK but should be avoided since it can be changed by Geneea in non-compatible ways.\nMedia API This API detects news article by semantics tagging which are integrated and compartmentalised in its Knowledge Base either in generic or in private buckets. The tags are then customised (numbers,labels,ids etc) and reviewed according to the feedback given by user.\nVoice of Customer(VoC) API This can evaluate customer feedback by detecting topics customers talk about. Geneeva’s featured Keboola App is the simplest way to use this API.\nIntent Detection API This one is used to detect non-parametrised intent in a text. The feature can be used to detect the violation of parametrised tests.\nThe General and VoC APIs can be activated directly by the user but the Media and Intent APIs need prior authorisation from Geneea.\nOPEN SOURCE APIs While the above mentioned foremost service API platforms can solely and efficiently act as a backbone for any business or e-commerce firm, there are many free API libraries available for experimentaion for individual users as well.\nTENSORFLOW API TensorFlow is an open source library powered by google and has numerous APIs (Keras, Distribution, Model Subclassing etc.) to access application packages for different kinds of ML models. It is based mostly at neural network tasks where the model can be trained to recognise patterns and is composed of neurons in different layers. The networks are iteratively improved by varying values in different layers.\nPREDICTIVEIO As the readers could guess, this API is used in predicting data patterns and hence computes the probability of a future dependent event. This service is divided into three parts, responsible for applying and evaluating ML algorithms on engines.\nThe Event Server unifies events from multiple platforms and the Template Gallery can be accessed to download engine templates for different type of machine learning applications. This API is built on Apache software with the assistance of resourceful libraries like Apache Spark, MLLib, HBase, Spray and Elasticsearch.\nIt’s actually APIs running down to ones and zeroes providing abstractions at many levels. The Machine learning practitioners need to ensure that they are clear on their application requirements and issues they need to work upon since every complication cannot be resolved with ML APIs.\nAlso, the user should try and stick with the service provider they usually work and are most comfortable with unless there is a requirement which can not be fulfiled by the present service provider.\nGo ahead and try the limitless powers of Machine Learning!\n"},{"uri":"https://tutswiki.com/java/garbage-collection/","title":"Garbage Collection in Java","tags":["Java"],"description":"The process of releasing the heap memory occupied by objects which do not have any live references in the Java program is known as garbage collection. null, gc, finalize.","content":" 1. Garbage Collection 1.1 Introduction The process of releasing the heap memory occupied by objects which do not have any live references in the Java program is known as garbage collection.\n1.2 Features  Garbage Collection is done automatically in java by JVM (Java Virtual Machine) There is no delete keyword in Java as in C++ to free up the memory Those memory blocks which are not referenced by any pointer are known as garbage blocks The code which is responsible for garbage collection is known as garbage collector code The main advantage of garbage collection is protection from memory leaks   2. Process Of Garbage Collection Whenever a Java program is compiled and executed, JVM creates three threads\n Main thread - this thread is responsible for running the main method() in the Java program\n Thread Scheduler - this thread controls the scheduling of the threads in the program like which thread should execute first or which thread should execute after which thread etc.\n Garbage Collector Thread - this thread is responsible to release the garbage blocks present in the memory and is the main focus of this article\n   Garbage Collector thread works in the background, performs its tasks in background and comes in the category of daemon threads or low priority threads\n Garbage Collector Thread  When the garbage collector starts running it identifies all the live objects present in the memory which have no reference in the program Before releasing their memory it calls a method named finalize(), to make sure that the objects have completed their processes or not Here finalize() method can be considered to have almost the same functionality as destructors() in C++ After the finalize() method is executed, the garbage collector releases the memory of the objects and hence protects the program from unwanted memory leaks\n  3. Object Dereferncing Methods Assing Null to Object School obj = new School(); obj = null; Here the obj variable, first refers to an object in the heap memory but after nulling the obj there is no other reference to that object, hence garbage collector identifies it and releases that object’s memory.\nAssign the Reference to Another Object School obj1 = new School(); School obj2 = new School(); obj1 = obj2; Now the object previously referenced by obj1 in the heap memory is available for garbage collection as no live reference is available for that object now.\nAnonymous Object new School(); Anonymous objects don’t have any reference so garbage collector releases their memory once they serve their purpose\n4. gc() Method  In Java, JVM implicitly calls the garbage collector but this method can be used to call the garbage collector explicitly This method doesn\u0026rsquo;t guarantee that the garbage collector will be executed at that point This method is not a command, it\u0026rsquo;s just a request, the final decision is taken by JVM whether to execute the garbage collector or not  Example File : Test.java\nimport java.io.*; public class Test{ public void finalize() { System.out.println(\u0026#34;Memory is freed\u0026#34;); } public static void main(String args[]){ Test obj1=new Test(); Test obj2=new Test(); obj1=null; obj2=null; System.gc(); } } Output\n$ javac Test.java $ java Test Memory is freed Memory is freed  In above example obj1 and obj2 are dereferenced by assinging null, after which the objects don\u0026rsquo;t have any live reference in the program and are now available for garbage collection The gc() method requests to invoke the garbage collector The garbage collector thread before releasing the memory calls the finalize() method for both objects After the execution of finalize() method it frees up the memory  "},{"uri":"https://tutswiki.com/sdkman-installing-multiple-versions-java-same-machine/","title":"SDKMan - Installing Multiple Versions of Java in Same Machine","tags":[],"description":"SDKMan is a tool by which you can install multiple versions of Java in the same machine and manually switch between them according to your needs.","content":" In today\u0026rsquo;s world technology is evolving at a very high pace, everyday something new comes in the market. Same is the case with computer languages, new languages are coming day by day and even newer versions of old languages are being released.\nFor example, we have many versions of Java like Java 7, Java 8, Java 11 and many more.\nNow let\u0026rsquo;s suppose you\u0026rsquo;re currently working on a project in Java 8 but you want to use the new features which are provided by Java 11 on the same machine or make a new project by using some other version of Java.\nBut if you install any other version in the same machine it will replace the current version of Java and might crash the project that you were working on, as it was based on a different version of Java.\nSo you need a tool by which you can install multiple versions of Java in the same machine and manually switch between them according to your needs.\nThe SDKMan tool can be used to tackle this problem.\nSDKMan  It is a software development kit manager tool which is used to manage multiple versions of the same software in a single machine. It is written in bash and prerequisites for this tool is the presence of curl and zip/unzip in the system. It is an open-source tool. It runs on UNIX based platforms.  Installing SDKMan  Just copy-paste the below lines in the terminal to install SDKMan in your system.\n$ curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash $ source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; To verify if SDKMan is installed in the system or not, run the following command.\n$ sdk version This will give the version of SDKMan which is currently installed in the system.\n  Installing Multiple Versions of Java  To see all the java versions which are available for installation use the following command\n$ sdk list java  As an example let\u0026rsquo;s install Java 9, run the following command\n$ sdk install java 9.0.4-open To check whether Java 9 is successfully installed in the system or not run the following command\n$ java -version  Now install another version of Java, say Java 10. To install it run the following command\n$ sdk install java 10.0.2-open If any other version of java is already present in the system, then it will ask whether it should make the current version the default, if you press Y then it will make the current version as the default version.\n Now to check which all Java versions are installed, just use the command sdk list java again.\n  As it is visible, two versions of Java are installed and currently the default version in the system is 10.0.2 which is represented by \u0026gt;\u0026gt;\u0026gt;\n Now if you want to use a particular version of Java temporarily but do not want to make it the default version then run below\nsdk use java \u0026lt;version name\u0026gt; Example: To use Java 9, run:\n$ sdk use java 9.0.4-open  If you want to change the default Java version, run:\nsdk default java \u0026lt;version name\u0026gt;  Example: As shown above, in our case the default is set to Java 10. Let\u0026rsquo;s change it to Java 9.\n$ sdk default java 9.0.4-open   This can also be confirmed by sdk list java\nAs it is visible \u0026gt;\u0026gt;\u0026gt; has moved from 10.0.2 to 9.0.4 indicating that Java 9 is currently the default version.\nUninstalling a Specific Version of Java  To uninstall a particular version of Java use sdk uninstall followed by version number\nsdk uninstall \u0026lt;version name\u0026gt; Example: To uninstall Java 10, run:\n$ sdk uninstall java 10.0.2-open  Now when you run sdk list java, you can see that Java 10.0.2 is uninstalled.\n  Reinstalling an Uninstalled Version  If you try to install an uninstalled version e.g. 10.0.2 then just use the install command mentioned in the earlier part of the article. The difference is that, this time it won\u0026rsquo;t download anything as downloaded files are already present in SDKMan, it\u0026rsquo;ll just install it again.  "},{"uri":"https://tutswiki.com/read-write-json-config-file-in-python/","title":"Writing and Reading JSON config file in Python","tags":["Python"],"description":"Learn how to write and read JSON config files in Python using json module.","content":" A Config short for Configuration file is a file that stores information such as parameters, settings, configurations, and preferences of an application.\nConfig files are simply plain text files with .config, .ini, .json, .xml, .yaml file extensions among others that can be created, viewed or edited using any text editor.\nFor example, the Web.config file in Microsoft ASP.NET MVC application contains configuration information that controls the working of the application. It may be for individual pages or the entire application.\nBelow is a sample Web.config file.\n\u0026lt;configuration\u0026gt; \u0026lt;appSettings\u0026gt; \u0026lt;add key=\u0026#34;tutswiki\u0026#34; value=\u0026#34;python\u0026#34; /\u0026gt; \u0026lt;add key=\u0026#34;article\u0026#34; value=\u0026#34;Config file\u0026#34; /\u0026gt; \u0026lt;/appSettings\u0026gt; \u0026lt;/configuration\u0026gt; We\u0026rsquo;ve already covered .ini, .yaml and .xml in below articles, in this article we\u0026rsquo;ll focus on .json config files.\n .ini file in Python .yaml file in Python .xml file in Python  Reading and Writing config data to JSON file in Python JSON or Javascript Object Notation file is used to store and transfer data in the form of arrays or Key-Value pairs. Let\u0026rsquo;s now understand read and write operations to the JSON file.\nCreating JSON config file in Python There are 2 methods to write in the JSON file.\nUsing json.dumps() json.dumps() takes python object as parameter.\nFirst, we need to import json module. json.dumps() method serializes (Conversion of data into series of bytes) python object (Dictionary in this case) into JSON formatted string and write() method writes that formatted JSON string to the file tutswiki.json.\nimport json article_info = { \u0026#34;domain\u0026#34; : \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34; : \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34; : \u0026#34;11/09/2020\u0026#34;, \u0026#34;topic\u0026#34; : \u0026#34;config file\u0026#34; } myJSON = json.dumps(article_info) with open(\u0026#34;tutswiki.json\u0026#34;, \u0026#34;w\u0026#34;) as jsonfile: jsonfile.write(myJSON) print(\u0026#34;Write successful\u0026#34;) Output:\nWrite successful Process finished with exit code 0 File: tutswiki.json\n{ \u0026#34;domain\u0026#34;: \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;11/09/2020\u0026#34;, \u0026#34;topic\u0026#34;: \u0026#34;config file\u0026#34; }  Note: \u0026ldquo;w\u0026rdquo; mode creates the file in the current working directory if it does not exists.\n Using json.dump() Here, unlike json.dumps(), we need not serialize python object to JSON string. Instead, json.dump() method directly stores the python object as a JSON formatted data into the JSON file.\njson.dump() takes python object and file pointer as parameters.\nimport json article_info = { \u0026#34;domain\u0026#34; : \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34; : \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34; : \u0026#34;11/09/2020\u0026#34;, \u0026#34;topic\u0026#34; : \u0026#34;config file\u0026#34; } with open(\u0026#34;tutswiki.json\u0026#34;, \u0026#34;w\u0026#34;) as jsonfile: json.dump(article_info, jsonfile) File: tutswiki.json\n{ \u0026#34;domain\u0026#34;: \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;11/09/2020\u0026#34;, \u0026#34;topic\u0026#34;: \u0026#34;config file\u0026#34; } Reading a key from JSON config file We can read a JSON file using json.load() method which deserializes the JSON object to python object, dictionary. This method takes file pointer as its parameter.\nimport json with open(\u0026#34;tutswiki.json\u0026#34;, \u0026#34;r\u0026#34;) as jsonfile: data = json.load(jsonfile) print(\u0026#34;Read successful\u0026#34;) print(data) Output:\nRead successful { \u0026#39;domain\u0026#39;: \u0026#39;tutswiki\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, \u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39;, \u0026#39;topic\u0026#39;: \u0026#39;config file\u0026#39; }  Note: If we want to deserialize a JSON string to a python object directly instead of reading from a file, we use json.loads() method which takes a JSON string as a parameter. For instance,\n import json s = \u0026#34;{\\\u0026#34;domain\\\u0026#34;: \\\u0026#34;tutswiki\\\u0026#34;, \\\u0026#34;language\\\u0026#34;: \\\u0026#34;python\\\u0026#34;}\u0026#34; data = json.loads(s) print(data) Output:\n{ \u0026#39;domain\u0026#39;: \u0026#39;tutswiki\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, \u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39;, \u0026#39;topic\u0026#39;: \u0026#39;config file\u0026#39; } Process finished with exit code 0  Updating a key in JSON config file Now let\u0026rsquo;s say we want to update the date to 12/09/2020. First, we will read the data, update the required values, and then finally write to the file as done below.\nimport json article_info = { \u0026#34;domain\u0026#34; : \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34; : \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34; : \u0026#34;11/09/2020\u0026#34;, \u0026#34;topic\u0026#34; : \u0026#34;config file\u0026#34; } with open(\u0026#34;tutswiki.json\u0026#34;, \u0026#34;r\u0026#34;) as jsonfile: data = json.load(jsonfile) # Reading the file print(\u0026#34;Read successful\u0026#34;) jsonfile.close() data[\u0026#39;date\u0026#39;] = \u0026#39;12/09/2020\u0026#39; # Updating, before it was 11/09/2020 print(\u0026#34;Date updated from 11/09/2020 to 12/09/2020\u0026#34;) with open(\u0026#34;tutswiki.json\u0026#34;, \u0026#34;w\u0026#34;) as jsonfile: myJSON = json.dump(data, jsonfile) # Writing to the file print(\u0026#34;Write successful\u0026#34;) jsonfile.close() Output:\nRead successful Date updated from 11/09/2020 to 12/09/2020 Write successful Process finished with exit code 0 File: tutswiki.json\n{ \u0026#34;domain\u0026#34;: \u0026#34;tutswiki\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;12/09/2020\u0026#34;, \u0026#34;topic\u0026#34;: \u0026#34;config file\u0026#34; }   As you can see, date in tutswiki.json file has been updated successfully.\n "},{"uri":"https://tutswiki.com/read-write-xml-config-file-in-python/","title":"Writing and Reading XML config file in Python","tags":["Python"],"description":"Learn how to write and read XML config files in Python using pyyaml module.","content":" We\u0026rsquo;ve already covered .ini, .json and .yaml in below articles, in this article we\u0026rsquo;ll focus on .xml config files.\n .ini file in Python .json file in Python .yaml file in Python  Reading and Writing config data to XML file in Python XML, or eXtensible Markup Language is a markup language just like HTML that can be interpreted by both humans and computers easily. XML does not have predefined tags. For instance,\nFile: tutswiki.xml\n\u0026lt;mail\u0026gt; \u0026lt;subject\u0026gt; config file \u0026lt;/subject\u0026gt; \u0026lt;receiver\u0026gt; www.tutswiki.com \u0026lt;/receiver\u0026gt; \u0026lt;content\u0026gt; This is an article \u0026lt;/content\u0026gt; \u0026lt;/mail\u0026gt; As we can see, all the tags used are user-defined which makes XML self-explanatory. We will be using the same file for reading and writing data.\nFor parsing the XML file, we will be using the BeautifulSoup module along with html parser. First, we need to install the latest BeautifulSoup4 package using the following command.\npip install BeautifulSoup4 We then have to import BeautifulSoup module from bs4 (BeautifulSoup4).\nfrom bs4 import BeautifulSoup Now, we are all set to parse our file.\nCreating XML config file in Python To add a new tag in our XML file tutswiki.xml, we use new_tag() method which takes an XML tag as a parameter. After creating a new tag, we use insert() method. This method takes 2 parameters, tag position, and the tag that we created earlier.\nfrom bs4 import BeautifulSoup with open(\u0026#34;tutswiki.xml\u0026#34;, \u0026#34;r\u0026#34;) as f: content = f.read() y = BeautifulSoup(content, features=\u0026#34;html.parser\u0026#34;) new_tag = y.new_tag(\u0026#34;h1\u0026#34;) y.mail.insert(2,new_tag) f = open(\u0026#34;tutswiki.xml\u0026#34;, \u0026#34;w\u0026#34;) f.write(y.prettify()) So we have created a tag h1 which will be inserted at position 2, i.e, after \u0026lt;subject\u0026gt;.\nFile: tutswiki.xml\n\u0026lt;mail\u0026gt; \u0026lt;subject\u0026gt; config file \u0026lt;/subject\u0026gt; \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;receiver\u0026gt; www.tutswiki.com \u0026lt;/receiver\u0026gt; \u0026lt;content\u0026gt; This is an article \u0026lt;/content\u0026gt; \u0026lt;/mail\u0026gt; Here, prettify() method is used to convert the data into proper XML format. If we want to add attribute and content to the new tag, we write\nnew_tag.string = \u0026#34;This is a heading\u0026#34; # content new_tag[\u0026#39;name\u0026#39;] = \u0026#39;heading\u0026#39; # attribute which will get\n\u0026lt;h1 name=\u0026#34;heading\u0026#34;\u0026gt; This is a heading \u0026lt;/h1\u0026gt; Reading a key from XML config file For reading, we will have to traverse to the tag which we want to read using the dot (.) operator. Let\u0026rsquo;s say we want to read the content of \u0026lt;h1\u0026gt; and the value of the attribute name.\nfrom bs4 import BeautifulSoup with open(\u0026#34;tutswiki.xml\u0026#34;, \u0026#34;r\u0026#34;) as f: content = f.read() y = BeautifulSoup(content, features=\u0026#34;html.parser\u0026#34;) tag = y.mail.h1 print(tag.string) print(tag[\u0026#39;name\u0026#39;]) Here tag.string fetches the value inside the tag \u0026lt;h1\u0026gt;, and we get,\nOutput:\nThis is a heading heading Updating a key in XML config file If we want to update tag name h1 to h2, we will use name property.\nfrom bs4 import BeautifulSoup with open(\u0026#34;tutswiki.xml\u0026#34;, \u0026#34;r\u0026#34;) as f: content = f.read() y = BeautifulSoup(content, features=\u0026#34;html.parser\u0026#34;) tag = y.mail.h1 tag.name = \u0026#39;h2\u0026#39; f = open(\u0026#34;tutswiki.xml\u0026#34;, \u0026#34;w\u0026#34;) f.write(y.prettify()) File: tutswiki.xml\n\u0026lt;mail\u0026gt; \u0026lt;subject\u0026gt; config file \u0026lt;/subject\u0026gt; \u0026lt;h2 name=\u0026#34;heading\u0026#34;\u0026gt; This is a heading \u0026lt;/h2\u0026gt; \u0026lt;receiver\u0026gt; www.tutswiki.com \u0026lt;/receiver\u0026gt; \u0026lt;content name=\u0026#34;article\u0026#34;\u0026gt; This is an article \u0026lt;/content\u0026gt; \u0026lt;/mail\u0026gt;"},{"uri":"https://tutswiki.com/read-write-yaml-config-file-in-python/","title":"Writing and Reading YAML config file in Python","tags":["Python"],"description":"Learn how to write and read YAML config files in Python using pyyaml module.","content":" We\u0026rsquo;ve already covered .ini, .json and .xml in below articles, in this article we\u0026rsquo;ll focus on .yaml config files.\n .ini file in Python .json file in Python .xml file in Python  Reading and Writing config data to YAML file in Python YAML or YAML Ain't Markup Language is a case sensitive and human-friendly data serialization language used mainly for configurations.\nFor reading and writing to the YAML file, we first need to install the PyYAML package by using the following command.\n$ pip install pyyaml Let\u0026rsquo;s now dive into read and write operations to the YAML file.\nCreating YAML config file in Python We can write data to the YAML file using yaml.dump() method which takes python object and file pointer as parameters.\nIn the below example, we are writing the dictionary article_info to the YAML file tutswiki.yaml.\nimport yaml article_info = [ { \u0026#39;Details\u0026#39;: { \u0026#39;domain\u0026#39; : \u0026#39;www.tutswiki.com\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, \u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39; } } ] with open(\u0026#34;tutswiki.yaml\u0026#34;, \u0026#39;w\u0026#39;) as yamlfile: data = yaml.dump(article_info, yamlfile) print(\u0026#34;Write successful\u0026#34;) Output:\nWrite successful Process finished with exit code 0 File: tutswiki.yaml\n- Details: date: 11/09/2020 domain: www.tutswiki.com language: python  Note: sort_keys parameter in dump() method can be used to sort the keys in ascending order.\n sorted = yaml.dump(data, sort_keys = True) Reading a key from YAML config file We can read the data using yaml.load() method which takes file pointer and Loader as parameters. FullLoader handles the conversion from YAML scalar values to the Python dictionary.\nTo read the value from the file, we write the below code\nimport yaml with open(\u0026#34;tutswiki.yaml\u0026#34;, \u0026#34;r\u0026#34;) as yamlfile: data = yaml.load(yamlfile, Loader=yaml.FullLoader) print(\u0026#34;Read successful\u0026#34;) print(data) Output:\nRead successful [{\u0026#39;Details\u0026#39;: {\u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39;, \u0026#39;domain\u0026#39;: \u0026#39;www.tutswiki.com\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;}}] Process finished with exit code 0 Now if we want to read the value of domain, we would write\nprint(data[0][\u0026#39;Details\u0026#39;][\u0026#39;domain\u0026#39;]) The index [0] is used to select the tag we want to read. And we move further using the key values.\nOutput:\nwww.tutswiki.com Updating a key in YAML config file What if we want to update the language python to java? For that, we will have to first read the file, reach to the key language and update its value and write the data to the file as done below.\nimport yaml article_info = [ { \u0026#39;Details\u0026#39;: { \u0026#39;domain\u0026#39; : \u0026#39;www.tutswiki.com\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, \u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39; } } ] with open(\u0026#34;tutswiki.yaml\u0026#34;, \u0026#34;r\u0026#34;) as yamlfile: data = yaml.load(yamlfile, Loader=yaml.FullLoader) print(data) print(\u0026#34;Read successful\u0026#34;) data[0][\u0026#39;Details\u0026#39;][\u0026#39;language\u0026#39;] = \u0026#39;java\u0026#39; print(\u0026#34;Value of language updated from \u0026#39;python\u0026#39; to \u0026#39;java\u0026#39;\u0026#34;) yamlfile.close() with open(\u0026#34;tutswiki.yaml\u0026#34;, \u0026#39;w\u0026#39;) as yamlfile: data1 = yaml.dump(data, yamlfile) print(data) print(\u0026#34;Write successful\u0026#34;) yamlfile.close() Output:\n[{\u0026#39;Details\u0026#39;: {\u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39;, \u0026#39;domain\u0026#39;: \u0026#39;www.tutswiki.com\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;}}] Read successful Value of language updated from \u0026#39;python\u0026#39; to \u0026#39;java\u0026#39; [{\u0026#39;Details\u0026#39;: {\u0026#39;date\u0026#39;: \u0026#39;11/09/2020\u0026#39;, \u0026#39;domain\u0026#39;: \u0026#39;www.tutswiki.com\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;java\u0026#39;}}] Write successful Process finished with exit code 0 File: tutswiki.yaml\n- Details: date: 11/09/2020 domain: www.tutswiki.com language: java As you can see, language in tutswiki.yaml file has been updated successfully.\n"},{"uri":"https://tutswiki.com/java/annotations/","title":"Annotations in Java","tags":["Java"],"description":"Java annotations are a special type of comments which embed instruction for the Java compiler. These also embed metadata which are read at runtime.","content":" 1. Java Annotation 1.1 Introduction  Java annotations are a special type of comments which embed instruction for Java compiler. These embed instructions for code processing tools. These also embed metadata which are read at runtime by Java compiler.  1.2 Built-In Annotations  @Override: This annotation makes sure to tell the compiler that the method in subclass should override the method of the superclass. If it does not override that method then it gives a compile-time error. @SuppressWarnings: This annotation is used to ignore the warnings in certain parts of the program. These are used to remove the unnecessary warnings which don\u0026rsquo;t affect our program. @Deprecated: This annotation is used to tell the compiler that these methods are deprecated methods, which means that they may not be present in the program in future. When we use such methods the compiler prints warning.  @Override Example import java.util.*; class Parent { void childOf() { System.out.println(\u0026#34;Child of Parent\u0026#34;); } } class Child extends Parent { @Override void childof() { System.out.println(\u0026#34;Parent\u0026#34;); } } public class Annotation { public static void main(String args[]) { Parent a = new Child(); a.childOf(); } } Output:\n/*prog.java:14: error: method does not override or implement a method from a supertype @Override ^ */ 1.3 Built-in Annotations used in other Annotations  @Target: This allows the user to specify the type of the declaration to which the annotation can be applied like whether the annotation can be used for class, methods, interface, enumeration etc. @Retention: This allows the user to specify, to what level the annotation will be available or till when the annotation will be retained in the program.\n RetentionPolicy.SOURCE: will not be available in compiled class and will only be retained till source level.\n RetentionPolicy.CLASS: these are retained till compile-time and will be ignored by JVM.\n RetentionPolicy.RUNTIME: available during runtime and is available to JVM also.\n  @Documented: It is used for documenting custom annotation by signalling the JavaDoc tool which compiles it and adds it to the generated document.\n @Inherited: This allows the subclasses to inherit the marked annotations by this annotation from the superclass.\n  @Target Example @Target(ElementType.METHOD) @interface Annotation { int val(); String val2(); } // this means that this annotation can be only applied to methods. 2. Types of Annotations  Marker Annotation: Annotations which don\u0026rsquo;t have any data or methods in them. Their only purpose is to mark a declaration.\nExample: @interface Annotation{ } Single Value Annotation: Annotations which have only one method in them. In this, we can either declare the variable then give value or we can also directly give the value it\u0026rsquo;s up to us.\nExample - @interface Annotation { int value() default 0; } Multi Value Annotations: Annotations which have more than one method in them. Here we have to declare members and cannot directly give them values.\nExample: @interface Annotation{ int value1(); String value2() }  3. Creating a Custom Annotation 3.1 Rules  To define an annotation in Java add @ before the interface keyword. Throw clauses should not be present in our method. The parameter list inside the method should be empty. A default value can be assigned to the method based on our requirement. The method should return one of these - primitive data type, String, Class etc.   Example File: Test.java\nimport java.util.*; import java.lang.annotation.*; import java.lang.reflect.*; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) @interface Annotation { int val(); } class Example { @Annotation(val = 25) public void sayHello() { System.out.println(\u0026#34;Hello annotation\u0026#34;); } } public class Test { public static void main(String args[]) throws Exception { Example example = new Example(); Method method = example.getClass().getMethod(\u0026#34;sayHello\u0026#34;); Annotation obj = method.getAnnotation(Annotation.class); System.out.println(\u0026#34;Value: \u0026#34; + obj.val()); } } Output\n$ javac Test.java $ java Test Value: 25"},{"uri":"https://tutswiki.com/project-manager-must-have-skills/","title":"Top 4 Must Have Skills For A Project Manager","tags":[],"description":"Project Managers act as a link between the employer, who needs the project and employees, who work on the project.","content":"  According to studies conducted by PWC, 77% of the high performing companies realise the importance of project management but only 2.5% are able to complete all the projects. Despite having all team members on board, the low productivity rate has to be explained by the Project Manager, who couldn\u0026rsquo;t plan the right course of actions or overlooked the breakdown in communications.\n As simple and self-explanatory the term Project Manager sounds, his/her duty involves lots of multi-tasking and diversified knowledge in numerous areas.\nLet\u0026rsquo;s find out a few skills required by a successful Project Manager and understand his/her position in a team.\nCritical Thinking Yes. That\u0026rsquo;s the Number 1.\nAny activity or job requires pre-planned measures to avoid any end moment hustles or dead ends. A strategic course of action has to be laid down by the project manager to ensure the rapid development of the overall team. Thorough researches on the problem at hand and spotting possible future hurdles are expected to be done by the PMs. Arising technologies to make the process easier or having an eye for other projects laid on similar terms should also be the focus points.\nA project manager, like a critical thinker, must analyse the situation by answering the main 6 W questions\n What When Where Why Who How  While all other queries can be examined easily, recognising the factors of why and who is essential. The motive of the employer, the employee and the project should be clear to the project manager. This will ensure that an appropriate role is assigned to all the teammates and also timely highlight whether a member is to be added (or removed) to bridge the differences.\nTechnical Skills But aren\u0026rsquo;t they required just by the software engineers? The answer is no.\nBasic technological and system knowledge is a necessity in today\u0026rsquo;s world since most of the work involves the use of one software or another. If a project is completely software-based, like in case of web development, familiarity with technological tools being used will improve your communications with your team-mates so that you can examine the level project has reached and further improvise it. Project Managers even need to be acquainted with basic technical tools like Excel to maintain records of teammates\u0026rsquo; performance or track the documentation of the project(s).\nMany times, Project Managers need to discover innovative communication or interactive tools (like ClickUp or Wrike) to engage both with their clients and team members and make the tasks innovative. Knowledge of basic technical skills will overall help in managing the limited time frame effectively. Leadership Qualities Many workplaces are not able to incorporate this elementary yet indispensable technique.\nWhile control over your team is necessary, the thin line between a boss and a leader should never be crossed as a project manager. Communicating your ideas and in return listening to the ideas of your colleagues is important. A project manager should keep an unbiased opinion for the team members and help the team adapt to newly introduced logical ideas between the projects. A project manager must have a good rapport with his team and keep them motivated by resolving any issues faced during the project.\nLeadership skills are developed over time, with experience, and can not be instilled instantly. A person beginning with the position of Project Manager needs to build trust and faith with his teammates by keeping a cool-head and open mind. Contract Management The client or stakeholders demand the project assigned within a limited time frame and budget. The role of surveying all the business aspects of the project and calculating the risks involved (risk analysis) in its operations and executions rests upon the Project Manager.\nThe business analysis includes checking the scalability and viability of a project and transferring or allocating the required resources to the team members. Monitoring the budget at every step is beneficial since it limits the expenditure to the threshold of financial estimates. A defined set of operational and statistical metrics can play a functional role to support the project and stakeholders\u0026rsquo; decision making. Project manager\u0026rsquo;s negotiation skills or the ability to provide an alternative to solutions play a vital part in fixing the financial estimates. Verdict Project Managers act as a link between the employer, who needs the project and employees, who work on the project. That link needs to be strong but flexible enough to encompass the flow of information and resources from both sides and deliver a refined satisfactory outcome as the end product.\n"},{"uri":"https://tutswiki.com/setup-access-questdb-python-notebook/","title":"How to setup and access QuestDB using Python","tags":["Python"],"description":"Complete guide with examples on how to install QuestDB, create new database and query the same in python.","content":" What is QuestDB? It is a tremendously fast NewSQL database which is avaiable as Open source software under Apache 2.0 license. It is basically like a superset of a SQL database (with added features and support for time-varying data or event data). It is made with the prime focus on performance.\nWhat makes QuestDB stand apart from other databases?  SIMD aggregations: QuestDB uses vectorized operations to perform many operations on only one CPU procedure which makes it do tasks in a must faster and efficient way. Easily switch to embedded Cloud native Cheaper development costs Lesser hardware requirements Can generate Real time insights Easy and secure Enterprise integration Postgres wire and Rest API support  Install QuestDB using Docker Step 1: Installing Docker\nFollow the instructions here and choose the docker installer based on your Operating system: https://docs.docker.com/engine/install/\nStep 2: Pulling the QuestDB image and creating a docker container\ndocker run -p 9000:9000 -p 8812:8812 questdb/questdb This parameter will publish a port to the host, you can specify:\n -p 9000:9000 for the REST API and the Web Console. The web console is available on http://localhost:9000 -p 8812:8812 for the Postgres wire protocol -p 9009:9009 InfluxDB line protocol  Step 3: Checking if the QuestDB container is running or not\nUse docker ps to check container status.\nStep 4: Python and Jupyter installation\n Check python version with python \u0026ndash;version or python3 \u0026ndash;version If python is available then run pip3 install requests urlib matplotlib pandas to install requried modules Install jupyter using pip3 install --upgrade ipython jupyter Enter jupyter notebook which will start jupyter, once it is up create a new notebook  Creating a Database in QuestDB We would generate some random data and store that data into a test database named weather which we would create. The create statement in QuestDB pushes the data into the bottom of the table. Our data is comprised of:\n temp is the temperature in Celcius. rain24H is the amount of precipitation in the last 24 hours. thunder is a boolean returning True if thunder is present. timestamp is the date and time. If the below code block prints 200, it means the database was created successfully. If it prints 400 then it means that the database already exists.  Code:\nimport requests import urllib.parse as par q = \u0026#39;create table weather\u0026#39;\\ \u0026#39;(temp int,\u0026#39;\\ \u0026#39;rain24H double,\u0026#39;\\ \u0026#39;thunder boolean,\u0026#39;\\ \u0026#39;timestamp timestamp)\u0026#39;\\ \u0026#39;timestamp(timestamp)\u0026#39; r = requests.get(\u0026#34;http://localhost:9000/exec?query=\u0026#34; + q) print(r.status_code) Output: 400\nAdding data to QuestDB In the next code cell, we generate and add 1000 entries of data to our database.\nimport requests import random from datetime import datetime success = 0 fail = 0 random.seed() for x in range(1000): temp = random.randint(-40, 55) rain24H = round(random.uniform(10.45, 235.15), 2) thunder = bool(random.getrandbits(1)) query = \u0026#34;insert into weather values(\u0026#34;\\ + str(temp) + \u0026#34;,\u0026#34;\\ + str(rain24H) + \u0026#34;,\u0026#34; \\ + str(thunder) +\u0026#34;,systimestamp())\u0026#34; r = requests.get(\u0026#34;http://localhost:9000/exec?query=\u0026#34; + query) if r.status_code == 200: success += 1 else: fail += 1 print(\u0026#34;Rows inserted: \u0026#34; + str(success)) if fail \u0026gt; 0: print(\u0026#34;Rows Failed: \u0026#34; + str(fail)) Output: Rows inserted: 1000\nQuery data from QuestDB import requests import io r = requests.get(\u0026#34;http://localhost:9000/exp?query=select * from weather\u0026#34;) rawData = r.text print(rawData) Output:\n\u0026#34;tempF\u0026#34;,\u0026#34;rain24H\u0026#34;,\u0026#34;thunder\u0026#34;,\u0026#34;timestamp\u0026#34; -37,234.0,false,\u0026#34;2020-08-24T11:41:37.191530Z\u0026#34; -11,165.52,false,\u0026#34;2020-08-24T11:41:37.195714Z\u0026#34; -31,178.13,true,\u0026#34;2020-08-24T11:41:37.202453Z\u0026#34; 14,31.470000000000,true,\u0026#34;2020-08-24T11:41:37.208365Z\u0026#34; 33,83.31,true,\u0026#34;2020-08-24T11:41:37.214347Z\u0026#34; Convert raw output to DataFrame import pandas as pd pData = pd.read_csv(io.StringIO(rawData), parse_dates=[\u0026#39;timestamp\u0026#39;]) print(pData) Output:\ntempF rain24H thunder timestamp 0 -37 234.00 False 2020-08-24 11:41:37.191530+00:00 1 -11 165.52 False 2020-08-24 11:41:37.195714+00:00 2 -31 178.13 True 2020-08-24 11:41:37.202453+00:00 3 14 31.47 True 2020-08-24 11:41:37.208365+00:00 4 33 83.31 True 2020-08-24 11:41:37.214347+00:00 ... ... ... ... ... 3995 -24 183.22 False 2020-08-24 11:58:32.164254+00:00 3996 1 151.96 True 2020-08-24 11:58:32.166610+00:00 3997 -40 213.86 True 2020-08-24 11:58:32.170839+00:00 3998 -33 101.91 True 2020-08-24 11:58:32.173131+00:00 3999 -38 182.98 False 2020-08-24 11:58:32.177191+00:00 [4000 rows x 4 columns] Note: The query string must be URL-encoded before it is sent.\nimport urllib.parse q = \u0026#34;select tempF,\u0026#34;\\ \u0026#34; rain24H,\u0026#34;\\ \u0026#34; timestamp\u0026#34;\\ \u0026#34; from weather\u0026#34;\\ query = urllib.parse.quote(q) r = requests.get(\u0026#34;http://localhost:9000/exp?query=\u0026#34; + query) queryData = r.content rawData = pd.read_csv(io.StringIO(queryData.decode(\u0026#39;utf-8\u0026#39;))) print(rawData) Output:\ntempF rain24H timestamp 0 -37 234.00 2020-08-24T11:41:37.191530Z 1 -11 165.52 2020-08-24T11:41:37.195714Z 2 -31 178.13 2020-08-24T11:41:37.202453Z 3 14 31.47 2020-08-24T11:41:37.208365Z 4 33 83.31 2020-08-24T11:41:37.214347Z ... ... ... ... 3995 -24 183.22 2020-08-24T11:58:32.164254Z 3996 1 151.96 2020-08-24T11:58:32.166610Z 3997 -40 213.86 2020-08-24T11:58:32.170839Z 3998 -33 101.91 2020-08-24T11:58:32.173131Z 3999 -38 182.98 2020-08-24T11:58:32.177191Z [4000 rows x 3 columns] Plotting data using matplotlib from matplotlib import pyplot as plt plt.bar(rawData[\u0026#39;timestamp\u0026#39;], rawData[\u0026#39;rain24H\u0026#39;]) from matplotlib import pyplot as plt plt.bar(rawData[\u0026#39;timestamp\u0026#39;], rawData[\u0026#39;tempF\u0026#39;]) Download notebook Check out the complete notebook at questdb.ipynb\n"},{"uri":"https://tutswiki.com/access-internet-on-linux-using-android-tethering/","title":"How to access to internet on Linux using Android Tethering","tags":["Android","Linux"],"description":"Find out how to connect your Linux machine to internet using Android&#39;s mobile data via USB, WiFi or Bluetooth.","content":" What is Tethering? It\u0026rsquo;s been over 30 years since the World Wide Web was introduced to the world. Over time, the internet took its toll and now has roughly around 45 million web pages compared to 10,000 websites earlier. We really do have come a long way.\nEmerging from the primitive world of 2G signals we are now living in the era where mostly every device has an internet connection and if not of its own, gets one from another system. The technical term for sharing your phone’s internet connection to another phone or system is known as Tethering.\nTethering on Linux Tethering the internet through your phone to your Linux desktop can be done mainly via three simple ways.\nLet\u0026rsquo;s check them out!\nUSB Tethering Connection over USB is just as simple as connecting your phone to a charger point. However, just like electricity is essential to charge your phone, internet connection in your phone is necessary to share it with others. Rare is the case when your charging cable is not suitable to be used as a data-transfer wire and you need to buy an apt one separately.\nThe connection is automatically established by plugging in your USB cable to both your computer and phone. A dialog box of confirmation highlighting the name of your device pops up.\nNow, Under the Settings in your phone select Wireless and Network (or Network and Internet). Click on the More tab and choose Tethering \u0026amp; Portable Hotspot and Enable USB Tethering. On the top right corner of your Linux machine, bring down the Network Connections toolbar as shown, where a tab Ethernet Connected is visible.\nYour system\u0026rsquo;s internet connection is ready!\nHowever, in a few cases you might have to further enable the Wired Settings window, where you can add a new connection and also view the IP address of your attached device. Here in this case, it is named Profile 1.\nClick on Profile 1\nWifi Tethering Following the same process as mentioned above, in your Android phone, open Settings and go to Network \u0026amp; Internet. Next, select Mobile Hotspot and Tethering and turn on the Mobile Hotspot. In your Linux system, again under the Network Connections, turn Wifi On\nand go to Wifi Settings.\nHere you can view all the available networks and connect with anyone by just entering the password available in your phone under Mobile Hotspot.\nThe Wi-Fi symbol in the top panel will now indicate that it\u0026rsquo;s connected.\nBluetooth Tethering Yes! The bluetooth connection can be used not only to transfer data files but for passing on your phone\u0026rsquo;s internet connection to your Linux machine. Navigating through the Network Connections tab, switch on the Bluetooth on your Linux distro and go to Bluetooth Settings.\nMake sure you have turned on Bluetooth in your phone too. Both of your devices will discover each other so click on the device\u0026rsquo;s name and a confirmation pin message will show up on both of the devices. If the pin matches, click confirm and Bluetooth pairing will be established.\nNow, again go to the Network Connections tab and under the paired device, here e9b7c69c, select the option to Connect to Internet.\nThe Bluetooth symbol in the top panel will now indicate that it\u0026rsquo;s connected.\nGo ahead and explore the unlimited boundaries of the internet on your Linux system! Thanks to the unimaginable scope of technology, without a doubt, your cellphone will always be at your rescue whenever a sudden need of an internet connection is required to your system.\n"},{"uri":"https://tutswiki.com/install-software-linux-yum-rpm-apt-dpkg/","title":"How to install software in Linux (RPM/DEB systems)","tags":["Linux"],"description":"In this tutorial we&#39;ll be covering packages, package managers and how to find, install and remove software for most popular Linux distributions. RPM/DEB based.","content":" In this tutorial, we\u0026rsquo;ll be covering packages, package managers and how to find, install and remove software for most popular Linux distributions.\nPackage Typically when you install software in a Linux system you do so with a package. A package is just a collection of files that make up an application. Additionally, a package contains data about the application as well as any steps required to successfully install and remove that application.\nData / Metadata The data or metadata that is contained within a package can include such information as the description of the application, the version and the list of dependencies or other packages that this particular application needs in order to function.\nPackage Manager A package manager is used to install, upgrade and remove packages. The package manager uses a package\u0026rsquo;s metadata to automatically install any required dependencies. Package managers keep track of what files belong to what packages, what packages are installed and what versions of those packages are installed.\nInstalling Software on RPM Distros Here\u0026rsquo;s a list of distributions that are based on the RPM package format. RPM stands for RedHat Package Manager.\n RedHat CentOS Fedora Oracle Linux Scientific Linux  yum The yum command-line utility is a package management program for those Linux distributions that use rpm packages.\nNote: Installing or removing software requires root or superuser privileges.\nFind packages to install using yum yum search string Display information about a package using yum yum info [package] Install a package with yum yum install [package] yum will typically ask you to review your request and say yes or no. If you want to continue to automatically answer yes to yum\u0026rsquo;s question use:\nyum install [-y] [package] Remove a package with yum yum remove [package] rpm In addition to the yum command, you can also use the rpm command to interact with the package manager.\nList installed packages using rpm rpm -qa List the file\u0026rsquo;s package usign rpm rpm -qf with path to a file will tell you what file a package belongs to.\nrpm -qf /path/to/file List package\u0026rsquo;s files List all the files that belong to that particular package\nrpm -ql [package] Install package using rpm rpm -ivh package.rpm Erase (uninstall) pacakge using rpm rpm -e [package]    (adsbygoogle = window.adsbygoogle || []).push({});  Installing Software on DEB Distros Another popular package format is the Debian package format. In addition to Debian, distributions like Mint and Ubuntu use deb packages.\n Debian Linux Mint Ubuntu  apt - Advanced Packacking Tool The Debian-based distributions use a package manager called apt (advanced packaging tool). apt is comprised of a few small utilities with the two most commonly used being apt-cache and apt-get.\nFind packages to install using apt-cache apt-cache search string Install a package with apt-get apt-get install [-y] [package] Remove a package but keep configurations apt-get remove [package] Remove a package and delete configurations apt-get purge [package] Display information about a package using apt-cache apt-cache show [package] dpkg In addition to the app utilities, you can use the dpkg command to interact with the package manager.\nList installed packages using dpkg dpkg -l List file\u0026rsquo;s package using dpkg dpkg -S /path/to/file List all files in a package using dpkg dpkg -L [package] Install a package with dpkg dpkg -i package.deb  Watch the video for live examples of searching, installing and removing some actual software like Dropbox using the above mentioned methods.\n   Summary Packages are used to install software on Linux system. You can manipulate packages with a package manager. Two of the most popular package formats are RPM and Debian. For RPM-based distributions use the yum and rpm commands to manage packages. For Debian-based distributions use apt and dpkg to manage packages.\n"},{"uri":"https://tutswiki.com/read-write-config-files-in-angular/","title":"Writing and Reading config files in Angular","tags":["angular"],"description":"Learn how to write and read config files in Angular using APP_INITIALIZER.","content":" Every app has some configurations to load. The most common is environment configurations which are required when you have multiple environments - local, dev, qa, uat and prod. Well this article will tell you where to store configurations and how to read them in Angular.\nStoring config in Angular Let\u0026rsquo;s say we need to store the baseUrl of our app. Where do you think this should be added? There is a defined place for storing config in Angular and you should make most use of it. But before going to that let\u0026rsquo;s check out the wrong place to store the configs.\nEnvironment.ts Wrong!\nI know this comes as first option in our mind but can you see \u0026ldquo;config\u0026rdquo; in it\u0026rsquo;s name? No, right? Cause it was never meant to store configurations in this file. The sole purpose of this is to tell the run time what version of the code you want to run.\nNow you may argue that we can create different environment.ts files for different versions, yes you can but again this is not the purpose of this file.\nThen where to store your config?\nOne thing is certain that we need a static json file to store our configs so let\u0026rsquo;s first create a config file and name it config.json. It will look something like this:\n{ \u0026#34;baseUrl\u0026#34;: \u0026#34;https://tutswiki.com/\u0026#34; }  Now we have config.json but we will need a place for it. One option is to have it in assets or dist and use it to get and set the configurations. But is this recommended? No!\nSo let\u0026rsquo;s move to our actual solution which is:\n   (adsbygoogle = window.adsbygoogle || []).push({});  APP_INITIALIZER Sounds awesome right? It will specify a factory and that will return a promise, the promise will load the config for the application. After loading the configs you can resolve the promise.\nLet\u0026rsquo;s take an example.\nimport { APP_INITIALIZER } from \u0026#39;@angular/core\u0026#39;; function initialize() { return (): Promise\u0026lt;boolean\u0026gt; =\u0026gt; { return new Promise\u0026lt;boolean\u0026gt;((resolve: (a: boolean) =\u0026gt; void): void =\u0026gt; { resolve(true); }); }; @NgModule({ declarations: [ ], imports: [ ], providers: [{ provide: APP_INITIALIZER, useFactory: initialize, multi: true }], bootstrap: [] }) export class AppModule { }  useFactory will have the function which will return a function which will return a promise.\nmulti: true will allow to have multiple instances of the provider. They are all able to run simultaneously but the code will be stopped here until we get all the promises resolved.\nIn this code sample we have added APP_INITIALIZER to app.module.ts. It will call the initialize method. You can use this method to load configurations and initialize your app. As told above, this will return a promise. You can replace resolve(true) with your code or can write a new promise.\nHow to add dependencies in this method? To add dependencies, add a deps section in its provider. Example:\nproviders: [{ provide: APP_INITIALIZER, useFactory: initialize, deps: [ HttpClient, UserInfoService, ConfigService ], multi: true }],  and add them as parameter to our initialize method.\nfunction initialize(http: HttpClient, userInfoService: UserInfoService, config: ConfigService) { return (): Promise\u0026lt;boolean\u0026gt; =\u0026gt; { return new Promise\u0026lt;boolean\u0026gt;((resolve: (a: boolean) =\u0026gt; void): void =\u0026gt; { resolve(true); }); };  Reading config file in Angular First we will need a service to save the configs we are getting from config.json so let\u0026rsquo;s create a ConfigService.\nimport { Injectable } from \u0026#39;@angular/core\u0026#39;; @Injectable({ providedIn: \u0026#39;root\u0026#39; }) export class ConfigService { baseUrl: string; constructor() { } }  We have already added this in deps of APP_INITIALIZER.\nNow let\u0026rsquo;s use initialize method to read our config file and set the necessary details for our app.\nfunction initialize(http: HttpClient, config: ConfigService): (() =\u0026gt; Promise\u0026lt;boolean\u0026gt;) { return (): Promise\u0026lt;boolean\u0026gt; =\u0026gt; { return new Promise\u0026lt;boolean\u0026gt;((resolve: (a: boolean) =\u0026gt; void): void =\u0026gt; { http.get(\u0026#39;./config.json\u0026#39;) .pipe( map((x: ConfigService) =\u0026gt; { config.baseUrl = x.baseUrl; resolve(true); }) ).subscribe(); }); }; }  And that\u0026rsquo;s how we deal with config in Angular.\n"},{"uri":"https://tutswiki.com/approximating-randomness/","title":"Approximating Randomness","tags":[],"description":"Generating random numbers from computers is essential to the development of certain kinds of software. Anything from modelling the environment, to a lottery machine, to determining the value of loot in a chest in an RPG, will require random number generation.","content":"Generating random numbers from computers is essential to the development of certain kinds of software. Anything from modelling the environment, to a lottery machine, to determining the value of loot in a chest in an RPG, will require random number generation. At first it may seem strange that computers, which are capable of producing massive amounts of digits in a short time, would not be able to produce random numbers. The difficulty is that the computers we use, are constructed specifically to follow logical steps deterministically, so to generate numbers that are truly random from a system like our computers is virtually impossible. True randomness cannot be obtained using arithmetic operations, which is exactly what our computers perform. When some sequence of numbers is random then it is not possible to predict what the next digit will be, and since computers use a set of logical steps to create any new number it is theoretically possible to predict it. Nonetheless programmers take advantage of features for creating random numbers all the time, the most widely used programming languages, provide libraries that can generate \u0026lsquo;random\u0026rsquo; values. Any role-playing game for example, that you might use, needs random values to determine the number of gold you\u0026rsquo;ll find from some locations, what items dead enemies will drop, etc. So how is it possible that even though the very nature of computers makes it impossible to exhibit random behaviour, that many programs include simulations of randomness?\n   (adsbygoogle = window.adsbygoogle || []).push({});  The answer is pseudo-random number generators(PRNG), these are programs that follow a certain algorithm to simulate random behaviour. The numbers they generate, cannot be by definition truly random, however for many uses it is a good enough approximation. The libraries in many of todays programming languages that generate random digits use PRNG\u0026rsquo;s. The basic idea is to perform some arithmetic operations on a number in sequence, to make it seem like it\u0026rsquo;s random. A PRNG always starts with an initial value called a seed. It will then perform operations on the seed to make the final number different from the original value. So when the PRNG is supplied with seeds that are in sequence, it will return numbers that seem random, because the operations that are performed on each number should change it to make it so the returned numbers are no longer following any pattern. PRNG\u0026rsquo;s are also periodical, they have a certain amount of numbers they produce, and after that the sequence starts to repeat itself. It is usually not a problem to make the period very large, so that the application that relies on it will never start to get repeated sequences.\nA very well known PRNG is the Mersenne Twister(1), it is the default PRNG for Python, Ruby, PHP and many others. It has a period of 2^(19937−1), which is a Mersenne prime number, hence the name of the generator. Invented in 1997 it was largely superior to PRNG\u0026rsquo;s like C\u0026rsquo;s rand or Java\u0026rsquo;s Random. Furthermore it passes certain statistical tests for randomness so it is a very reliable generator as it is very successful at simulating genuine randomness.\nThese programs have been used extensively and are relied upon by many applications, it is important to note that when truly random behaviour is needed then PRNG\u0026rsquo;s are not sufficient. John von Neumann famously said:\n Anyone who considers arithmetical methods of producing random digits is, of course, in a state of sin.\n In this situation he was referring to depending on PRNG\u0026rsquo;s or other arithmetic approaches to create truly random digits, which is not a good idea. Rather it is possible to use true random number generators, that are based on the idea of extracting physical phenomena that are believed to be random and using them to generate random numbers. For example atmospheric noise, or radioactive decay, etc. Even though it is possible to extract truly random numbers from the outside world, most applications that use random numbers use PRNG\u0026rsquo;s. It is because of their convenience, there is no need for any extra devices, or input, all it needs is a sequence of numbers that it later transforms into a pseudo-random sequence.\n1: Link to the implementation of Mersenne Twister. This is the latest version from the original creators: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c\n "},{"uri":"https://tutswiki.com/convert-python-script-to-module/","title":"How to convert a Python script to module","tags":["Python"],"description":"How can we import the functions (or classes) from a script without having the script start doing something?","content":" It\u0026rsquo;s common to create small scripts which we want to combine into a larger script. We don\u0026rsquo;t want to copy and paste the code. We want to leave the working code in one file and use it in multiple places. Often we want to combine elements from multiple files to create more sophisticated scripts.\nThe problem we have is that when we import a script it actually starts running. This is generally not what we expect when we import a script so that we can reuse it. How can we import the functions (or classes) from a file without having the script start doing something?\nGetting ready Let\u0026rsquo;s say that we have a handy implementation of the haversine distance function called haversine(), and it\u0026rsquo;s in a file named script.py.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Initially, the file might look like this:\nimport csv import pathlib from math import radians, sin, cos, sqrt, asin from functools import partial MI= 3959 NM= 3440 KM= 6373 def haversine( lat_1: float, lon_1: float, lat_2: float, lon_2: float, *, R: float ) -\u0026gt; float: ... and more ... nm_haversine = partial(haversine, R=NM) source_path = pathlib.Path(\u0026#34;waypoints.csv\u0026#34;) with source_path.open() as source_file: reader= csv.DictReader(source_file) start = next(reader) for point in reader: d = nm_haversine( float(start[\u0026#39;lat\u0026#39;]), float(start[\u0026#39;lon\u0026#39;]), float(point[\u0026#39;lat\u0026#39;]), float(point[\u0026#39;lon\u0026#39;]) ) print(start, point, d) start= point  We\u0026rsquo;ve omitted the body of the haversine() function, showing only \u0026hellip; and more\u0026hellip;, since the full source is available on github. We\u0026rsquo;ve focused on the context in which the function is in a Python script that also opens a file, wapypoints.csv, and does some processing on that file.\nHow can we import this module without it printing a display of distances between waypoints in our waypoints.csv file?\nHow to do it\u0026hellip; Python scripts can be simple to write. Indeed, it\u0026rsquo;s often too simple to create a working script. Here\u0026rsquo;s how we transform a simple script into a reusable library:\n1) Identify the statements that do the work of the script: we\u0026rsquo;ll distinguish between definition and action. Statements such as import, def, and class are clearly definitional—they support the work but they don\u0026rsquo;t do the work. Almost all other statements take action. In our example, we have four assignment statements that are more definition than action. The distinction is entirely one of intent. All statements, by definition, take an action. These actions, though, are more like the action of the def statement than they are like the action of the with statement later in the script. Here are the generally definitional statements:\nMI= 3959 NM= 3440 KM= 6373 def haversine( lat_1: float, lon_1: float, lat_2: float, lon_2: float, *, R: float ) -\u0026gt; float: ... and more ... nm_haversine = partial(haversine, R=NM)  The rest of the statements clearly take an action toward producing the printed results.\n2) Wrap the actions into a function:\ndef analyze(): source_path = pathlib.Path(\u0026#34;waypoints.csv\u0026#34;) with source_path.open() as source_file: reader= csv.DictReader(source_file) start = next(reader) for point in reader: d = nm_haversine( float(start[\u0026#39;lat\u0026#39;]), float(start[\u0026#39;lon\u0026#39;]), float(point[\u0026#39;lat\u0026#39;]), float(point[\u0026#39;lon\u0026#39;]) ) print(start, point, d) start= point  3) Where possible, extract literals and make them into parameters. This is often a simple movement of the literal to a parameter with a default value. From this:\ndef analyze(): source_path = pathlib.Path(\u0026#34;waypoints.csv\u0026#34;)  To this:\ndef analyze(source_name=\u0026#34;waypoints.csv\u0026#34;): source_path = pathlib.Path(source_name)  4) Include the following as the only high-level action statements in the script file:\nif __name__ == \u0026#34;__main__\u0026#34;: analyze()  We\u0026rsquo;ve packaged the action of the script as a function. The top-level action script is now wrapped in an if statement so that it isn\u0026rsquo;t executed during import.\nHow it works\u0026hellip; The most important rule for Python is that an import of a module is essentially the same as running the module as a script. The statements in the file are executed in order from top to bottom.\nWhen we import a file, we\u0026rsquo;re generally interested in executing the def and class statements. We might be interested in some assignment statements.\nWhen Python runs a script, it sets a number of built-in special variables. One of these is __name__. This variable has two different values, depending on the context in which the file is being executed:\n The top-level script, executed from the command line: In this case, the value of the built-in special name of __name__ is set to __main__.\n A file being executed because of an import statement: In this case, the value of __name__ is the name of the module being created.\n  The standard name of __main__ may seem a little odd at first. Why not use the filename in all cases? This special name is assigned because a Python script can be read from one of many sources. It can be a file. Python can also be read from the stdin pipeline, or it can be provided on the Python command line using the -c option.\nWhen a file is being imported, however, the value of __name__ is set to the name of the module. It will not be __main__. In our example, the value __name__ during import processing will be script.\nThere\u0026rsquo;s more\u0026hellip; We can now build useful work around a reusable library. We might make several files that look like this:\nFile trip_1.py:\nfrom script import analyze analyze(\u0026#39;trip_1.csv\u0026#39;)  Or perhaps something even more complex:\nFile all_trips.py:\nfrom script import analyze for trip in \u0026#39;trip_1.csv\u0026#39;, \u0026#39;trip_2.csv\u0026#39;: analyze(trip)  The goal is to decompose a practical solution into two collections of features:\n The definition of classes and functions A very small action-oriented script that uses the definitions to do useful work  To get to this goal, we\u0026rsquo;ll often start with a script that conflates both sets of features. This kind of script can be viewed as a spike solution. Our spike solution should evolve towards a more refined solution as soon as we\u0026rsquo;re sure that it works.\nA spike or piton is a piece of removable mountain-climbing gear that doesn\u0026rsquo;t get us any higher on the route, but it enables us to climb safely.\nAlso see  How to run a Python module as script? PEP 338 \u0026ndash; Executing modules as scripts What is if name == \u0026ldquo;main\u0026rdquo; in Python? What is the difference between a module and a script in Python?  "},{"uri":"https://tutswiki.com/grunt-tutorial-example/","title":"Grunt Tutorial with Live Example","tags":[],"description":"So, what is this thing called Grunt and how can it help you?","content":" So, what is this thing called Grunt and how can it help you?\nFrom the grunt documentation:\n “A task-based command line build tool for JavaScript projects”\n This means one simple thing. Stop repeating yourself and let Grunt do stuff for you. The Grunt ecosystem is constantly growing and being improved by open source contributors.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Plugins You can find plugins for almost everything. Examples of tasks could be:\n compile CoffeeScript, Jade, Sass, Stylus, Mustache,… optimize images run jshint on your code uglify your code  This allows you to optimize your workflow to the limit. If you save a file you can have your tests run or your code minified. This means you can stop worrying about this stuff. You don\u0026rsquo;t need to issue commands in the command line constantly. Just code and let Grunt work for you.\nIf you think about it Grunt is like Codekit but with nothing but a CLI. It\u0026rsquo;s cross-platform out of the box, free as in MIT licensed and extensible as hell.\nFirst use Grunt is able to set up a project for you by scaffolding a template based on your input in the commandline. This is nice but not needed for this simple demo. I want to show you how Grunt can help you in all your projects by adding just two files!\nGrunt only needs two files to work in your project directory: package.json and Gruntfile.\nI\u0026rsquo;m not going to talk about this in detail. Read up if you want to know more.\nDemo setup I made a demo repository that shows Grunt usage in it\u0026rsquo;s most basic form with only one task. This makes it easy to understand what\u0026rsquo;s actually going on.\nmodule.exports = function(grunt){ grunt.initConfig({ pkg: grunt.file.readJSON(\u0026#39;package.json\u0026#39;), // set up first custom task: concat \t// the options depend on the task you want to use \tconcat: { options: { // string to put between concatenated files \tseparator: \u0026#39;;\u0026#39; }, dist: { // files to concat together \tsrc: [\u0026#39;js/*.js\u0026#39;], // location of result file \tdest: \u0026#39;jsmin/\u0026lt;%= pkg.name %\u0026gt;.js\u0026#39; } } }); // load contrib task files  // note: these should be installed from npm  grunt.loadNpmTasks(\u0026#39;grunt-contrib-concat\u0026#39;); // register what to do when using the default \u0026#39;grunt\u0026#39; command  grunt.registerTask(\u0026#39;default\u0026#39;, [\u0026#39;concat\u0026#39;]); };  This will concate all .js files inside the /js folder and concatenate them to /jsmin in the filename of your choice.\nThe only thing you need to do is run grunt inside your project.\n$ grunt Multiple tasks Next step is to show that multiple tasks are possible. You can see below that I added concatenation for the CSS files and the concatenated JavaScript gets uglified.\nFinal gruntfile looks like this:\nmodule.exports = function(grunt){ grunt.initConfig({ pkg: grunt.file.readJSON(\u0026#39;package.json\u0026#39;), // set up first custom task: concat \t// the options depend on the task you want to use \tconcat: { options: { // string to put between concatenated files \t// can be necessary when processing minified js code \t//separator: \u0026#39;;\u0026#39; \t}, js: { // files to concat together \tsrc: [\u0026#39;js/*.js\u0026#39;], // location of result file \tdest: \u0026#39;jsmin/\u0026lt;%= pkg.name %\u0026gt;.min.js\u0026#39; }, css: { // files to concat together \tsrc: [\u0026#39;css/*.css\u0026#39;], // location of result file \tdest: \u0026#39;cssmin/all.min.css\u0026#39; } }, uglify: { options: { banner: \u0026#39;/*! \u0026lt;%= pkg.name %\u0026gt; \u0026lt;%= grunt.template.today(\u0026#34;yyyy-mm-dd\u0026#34;) %\u0026gt; */\\n\u0026#39; }, build: { src: \u0026#39;jsmin/\u0026lt;%= pkg.name %\u0026gt;.min.js\u0026#39;, dest: \u0026#39;jsmin/\u0026lt;%= pkg.name %\u0026gt;.min.js\u0026#39; } } }); // load contrib task files  // note: these should be installed from npm  grunt.loadNpmTasks(\u0026#39;grunt-contrib-concat\u0026#39;); grunt.loadNpmTasks(\u0026#39;grunt-contrib-uglify\u0026#39;); // a custom task  // no configuration for this task, it just logs stuff  grunt.registerTask(\u0026#39;default\u0026#39;, \u0026#39;Log stuff.\u0026#39;, function() { grunt.log.write(\u0026#39;I am a custom task...\u0026#39;).ok(); }); // register what to do when using the default \u0026#39;grunt\u0026#39; command  grunt.registerTask(\u0026#39;default\u0026#39;, [\u0026#39;concat\u0026#39;, \u0026#39;uglify\u0026#39;]); };  I ran this file through Docco which generated a documentation file based on the inline comments. You could even let grunt-docco plugin do this for you. Check this out in the /docs folder or see it live.\nThe latest working code can be found in the repo on GitHub.\n"},{"uri":"https://tutswiki.com/noprocrast/","title":"noprocrast","tags":["Linux"],"description":"I wrote a command line script called noprocrast. This script updates /etc/hosts to make distracting websites unreachable from my machine.","content":"I wrote a command line script called noprocrast. This script updates /etc/hosts to make distracting websites unreachable from my machine:\nsudo cp /etc/noprocrast_hosts /etc/hosts The corresponding /etc/noprocrast_hosts:\n127.0.0.1 localhost db001 db002 db003 db004 web030 web048 255.255.255.255 broadcasthost ::1 localhost fe80::1%lo0 localhost 127.0.0.1 news.ycombinator.com 127.0.0.1 reddit.com www.reddit.com 127.0.0.1 twitter.com 127.0.0.1 nytimes.com www.nytimes.com In case I really need to visit one of these sites, I use the following procrast script:\nsudo cp /etc/procrast_hosts /etc/hosts echo `date` \u0026gt;\u0026gt; ~/.procrasts Then if I want to see how I have been doing with procrastination, I tail ~/.procrasts.\n   (adsbygoogle = window.adsbygoogle || []).push({});  The /etc/procrast_hosts file is just:\n127.0.0.1 localhost db001 db002 db003 db004 web030 web048 255.255.255.255 broadcasthost ::1 localhost fe80::1%lo0 localhost If you haven\u0026rsquo;t tried an /etc/hosts hack like this, I suggest giving it a try. You may be surprised by how much time you save.\nAlso see\n get-shit-done noprocrast (ruby gem)  "},{"uri":"https://tutswiki.com/how-to-fix-sudo-node-command-not-found-error/","title":"How to fix sudo node command not found error","tags":["Linux"],"description":"To fix this, we need to “pass the environment” of the calling thread to the computation thread.","content":" Getting permission errors when installing a module?\nAre \u0026lsquo;sudo: node: command not found\u0026rsquo; errors taking away your precious sleeping hours?\nHow to fix? You have to remove any trace of node on your system, and reinstall it. It will soothe your pain:\necho \u0026#39;export PATH=$HOME/local/bin:$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bashrc . ~/.bashrc mkdir ~/local \u0026amp;\u0026amp; ~/node-latest-install \u0026amp;\u0026amp; ~/node-latest-install curl https://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1 ./configure --prefix=~/local \u0026amp;\u0026amp; make install curl https://npmjs.org/install.sh | sh rm -rf ~/node-latest-install You are one/two steps/commands away from success. Just replace /path/to/your/home/ with the absolute path to your home directory (leaving the rest of the path as is):\nsudo ln -s /path.to/your/home/local/bin/node /usr/local/bin/ sudo ln -s /path.to/your/home/local/bin/npm /usr/local/bin/ And now\u0026hellip;\nAlso see: install node and npm without having to sudo\n   (adsbygoogle = window.adsbygoogle || []).push({});  "},{"uri":"https://tutswiki.com/yet-another-lousy-monad-tutorial/","title":"Yet another lousy monad tutorial","tags":[],"description":"I&#39;m not a big fan of monads, but I understand them. Let me try to write a monad tutorial that would&#39;ve helped my past self understand what the fuss was about.","content":"I\u0026rsquo;m not a big fan of monads, but I understand them. They\u0026rsquo;re not rocket science. Let me try to write a monad tutorial that would\u0026rsquo;ve helped my past self understand what the fuss was about. I like concrete explanations that start with practical examples, without any annoying metaphors, and especially without any Haskell code. So here\u0026rsquo;s five examples that have something in common:\n   (adsbygoogle = window.adsbygoogle || []).push({});  1) If a function has type A → B, and another function has type B → C, then we can \u0026ldquo;compose\u0026rdquo; them into a new function of type A → C.\n2) Let\u0026rsquo;s talk about functions that can return multiple values. We can model these as functions of type A → List\u0026lt;B\u0026gt;. There is a natural way to \u0026ldquo;compose\u0026rdquo; two such functions. If one function has type A → List\u0026lt;B\u0026gt;, and another function has type B → List\u0026lt;C\u0026gt;, then we can \u0026ldquo;compose\u0026rdquo; them into a new function of type A → List\u0026lt;C\u0026gt;. The \u0026ldquo;composition\u0026rdquo; works by joining together all the intermediate lists of values into one. This is similar to MapReduce, which also collects together lists of results returned by individual workers.\n3) Let\u0026rsquo;s talk about functions that either return a value, or fail somewhere along the way. We can model these as functions of type A → Option\u0026lt;B\u0026gt;, where Option\u0026lt;B\u0026gt; is a type that contains either a value of type B, or a special value None. There is a natural way to \u0026ldquo;compose\u0026rdquo; two such functions. If one function has type A → Option\u0026lt;B\u0026gt;, and another function has type B → Option\u0026lt;C\u0026gt;, then we can \u0026ldquo;compose\u0026rdquo; them into a new function of type A → Option\u0026lt;C\u0026gt;. The \u0026ldquo;composition\u0026rdquo; works just like regular function composition, except if the first function returns None, then it gets passed along and the second function doesn\u0026rsquo;t get called. This way you can have a \u0026ldquo;happy path\u0026rdquo; in your code, and check for None only at the end.\n4) Let\u0026rsquo;s talk about functions that call a remote machine asynchronously. We can model these as functions of type A → Promise\u0026lt;B\u0026gt;, where Promise\u0026lt;B\u0026gt; is a type that will eventually contain a value of type B, which you can wait for. There is a natural way to \u0026ldquo;compose\u0026rdquo; two such functions. If one function has type A → Promise\u0026lt;B\u0026gt;, and another function has type B → Promise\u0026lt;C\u0026gt;, then we can \u0026ldquo;compose\u0026rdquo; them into a new function of type A → Promise\u0026lt;C\u0026gt;. The \u0026ldquo;composition\u0026rdquo; is an asynchronous operation that waits for the first promise to return a value, then calls the second function on that value. This is known in some languages as \u0026ldquo;promise pipelining\u0026rdquo;. It can sometimes make remote calls faster, because you can send both calls to the remote machine in the same request.\n5) Let\u0026rsquo;s talk about functions that do input or output in a pure functional language, like Haskell. We can define IO\u0026lt;A\u0026gt; as the type of opaque \u0026ldquo;IO instructions\u0026rdquo; that describe how to do some IO and return a value of type A. These \u0026ldquo;instructions\u0026rdquo; might eventually be executed by the runtime, but can also be freely passed around and manipulated before that. For example, to create instructions for reading a String from standard input, we\u0026rsquo;d have a function of type Void → IO\u0026lt;String\u0026gt;, and to create instructions for writing a String to standard output, we\u0026rsquo;d have String → IO\u0026lt;Void\u0026gt;. There is a natural way to \u0026ldquo;compose\u0026rdquo; two such functions. If one function has type A → IO\u0026lt;B\u0026gt;, and another function has type B → IO\u0026lt;C\u0026gt;, then we can \u0026ldquo;compose\u0026rdquo; them into a new function of type A → IO\u0026lt;C\u0026gt;. The \u0026ldquo;composition\u0026rdquo; works by just doing the IO in sequence. Eventually the whole program returns one huge complicated IO instruction with explicit sequencing inside, which is then passed to the runtime for execution. That\u0026rsquo;s how Haskell works.\nAnother thing to note is that each of the examples above also has a natural \u0026ldquo;identity\u0026rdquo; function, such that \u0026ldquo;composing\u0026rdquo; it with any other function F gives you F again. For ordinary function composition, it\u0026rsquo;s the ordinary identity function A → A. For lists, it\u0026rsquo;s the function A → List\u0026lt;A\u0026gt; that creates a single-element list. For options, it\u0026rsquo;s the function A → Option\u0026lt;A\u0026gt; that takes a value and returns an option containing that value. For promises, it\u0026rsquo;s the function A → Promise\u0026lt;A\u0026gt; that takes a value and makes an immediately fulfilled promise out of it. And for IO, it\u0026rsquo;s the function A → IO\u0026lt;A\u0026gt; that doesn\u0026rsquo;t actually do any IO.\nAt this point we could go all mathematical and talk about how \u0026ldquo;compose\u0026rdquo; is like number multiplication, and \u0026ldquo;identity\u0026rdquo; is like the number 1, and then go off into monoids and categories and functors and other things that are frankly boring to me. So let\u0026rsquo;s not go there! Whew!\nInstead, to stay more on the programming track, let\u0026rsquo;s use a Java-like syntax to define an interface Monad with two methods \u0026ldquo;identity\u0026rdquo; and \u0026ldquo;compose\u0026rdquo;. The five examples above will correspond to five different concrete classes that implement that interface, for different choices of the type parameter T.\nThe main complication is that the type parameter T must not be a simple type, like String. Instead it must be itself a generic type, like List, Option or Promise. The reason is that we want to have a single implementation of Monad\u0026lt;Option\u0026gt;, not separate implementations like Monad\u0026lt;Option\u0026lt;Integer\u0026gt;\u0026gt;, Monad\u0026lt;Option\u0026lt;String\u0026gt;\u0026gt; and so on. Java and C# don\u0026rsquo;t support generic types whose parameters are themselves generic types (the technical term is \u0026ldquo;higher-kinded types\u0026rdquo;), but C++ has some support for them, called \u0026ldquo;template template parameters\u0026rdquo;. Some functional languages have higher-kinded types, like Haskell, while others don\u0026rsquo;t have them, like ML.\nAnyway, here\u0026rsquo;s what it would look like in Java, if Java supported such things:\ninterface Monad\u0026lt;T\u0026gt; { \u0026lt;A\u0026gt; Function\u0026lt;A, T\u0026lt;A\u0026gt;\u0026gt; identity(); \u0026lt;A, B, C\u0026gt; Function\u0026lt;A, T\u0026lt;C\u0026gt;\u0026gt; compose( Function\u0026lt;A, T\u0026lt;B\u0026gt;\u0026gt; first, Function\u0026lt;B, T\u0026lt;C\u0026gt;\u0026gt; second ); } class OptionMonad implements Monad\u0026lt;Option\u0026gt; { public \u0026lt;A\u0026gt; Function\u0026lt;A, Option\u0026lt;A\u0026gt;\u0026gt; identity() { // Implementation omitted, figure it out  } public \u0026lt;A, B, C\u0026gt; Function\u0026lt;A, Option\u0026lt;C\u0026gt;\u0026gt; compose( Function\u0026lt;A, Option\u0026lt;B\u0026gt;\u0026gt; first, Function\u0026lt;B, Option\u0026lt;C\u0026gt;\u0026gt; second ) { // Implementation omitted, do it yourself  } } Defining Monad as an interface allows us to implement some general functionality that will work on all monads. For example, there\u0026rsquo;s a well known function \u0026ldquo;liftM\u0026rdquo; that converts a function of type A → B into a function of type List\u0026lt;A\u0026gt; → List\u0026lt;B\u0026gt;, or Promise\u0026lt;A\u0026gt; → Promise\u0026lt;B\u0026gt;, or anything else along these lines. For different monads, liftM will do different useful things, e.g. liftM on lists is just the familiar \u0026ldquo;map\u0026rdquo; function in disguise. The implementation of liftM with lambda expressions would be very short, though a little abstract:\n\u0026lt;T, A, B\u0026gt; Function\u0026lt;T\u0026lt;A\u0026gt;, T\u0026lt;B\u0026gt;\u0026gt; liftM( Function\u0026lt;A, B\u0026gt; func, Monad\u0026lt;T\u0026gt; monad ) { return (T\u0026lt;A\u0026gt; ta) -\u0026gt; monad.compose( () -\u0026gt; ta, (A a) -\u0026gt; monad.identity().apply(func.apply(a)) ).apply(void); } Or if you don\u0026rsquo;t like lambda expressions, here\u0026rsquo;s a version without them:\n\u0026lt;T, A, B\u0026gt; Function\u0026lt;T\u0026lt;A\u0026gt;, T\u0026lt;B\u0026gt;\u0026gt; liftM( Function\u0026lt;A, B\u0026gt; func, Monad\u0026lt;T\u0026gt; monad ) { return new Function\u0026lt;T\u0026lt;A\u0026gt;, T\u0026lt;B\u0026gt;\u0026gt;() { public T\u0026lt;B\u0026gt; apply (T\u0026lt;A\u0026gt; ta) { return monad.compose( new Function\u0026lt;Void, T\u0026lt;A\u0026gt;\u0026gt;() { public T\u0026lt;A\u0026gt; apply() { return ta; } }, new Function\u0026lt;A, T\u0026lt;B\u0026gt;\u0026gt;() { public T\u0026lt;B\u0026gt; apply(A a) { return monad.identity().apply(func.apply(a)); } } ).apply(void); } } } Monads first became popular as a nice way to deal with IO instructions in a pure language, treating them as first-class values that can be passed around, like in my example 5. Imperative languages don\u0026rsquo;t need monads for IO, but they often face a similar problem of \u0026ldquo;option chaining\u0026rdquo; or \u0026ldquo;error chaining\u0026rdquo;, like in my example 3. For example, the option types in Rust or Swift would benefit from having a \u0026ldquo;happy path\u0026rdquo; through the code and a centralized place to handle errors, which is exactly the thing that monads would give you.\nSome people think that monads are about side effects, like some sort of escape hatch for Haskell. That\u0026rsquo;s wrong, because you could always do IO without monads, and in fact the first version of Haskell didn\u0026rsquo;t use them. In any case, only two of my five examples involve side effects. Monads are more like a design pattern for composing functions, which shows up in many places. I think the jury is still out on whether imperative/OO languages need to use monads explicitly, but it might be useful to notice them when they appear in your code implicitly.\n   (adsbygoogle = window.adsbygoogle || []).push({});  "},{"uri":"https://tutswiki.com/ruby-enumerable/","title":"A Deeper Look at Ruby&#39;s Enumerable","tags":[],"description":"Ruby’s Enumerable module gives you a way of iterating over collections in a lazy manner, loading only what you need, when you need it. But it gives us so much more than that.","content":" Have you ever needed to load a VERY large file in ruby? No I don’t mean your 500 line rails model. I mean a several gig binary or text file.\nTry it. Watch your machine become unresponsive. Cry a little inside. Then reach for enumerable.\nRuby’s Enumerable module gives you a way of iterating over collections in a lazy manner, loading only what you need, when you need it. But it gives us so much more than that.\nToday I am going to walk you through a couple of highly useful methods from Enumerable that has come up in a few coding challenges I have done over the years.\n   (adsbygoogle = window.adsbygoogle || []).push({});  each_cons, any?, all?, none? I use these methods when I need to determine the \u0026lsquo;distance or difference\u0026rsquo; in a set of numbers or objects. each_cons simply gives us a \u0026lsquo;sliding\u0026rsquo; window of our list so we can compare multiple items in our list.\nnumbers = [1,3,5,8,10,54,99] cards = [5,3,4,6,2] # get only the values where the distance is greater than 10 numbers.each_cons(2).select {|a,b| b-a\u0026gt;10 } #=\u0026gt; [[10, 54], [54, 99]] # determine if the hand is a straight cards.sort.each_cons(5).all? do |series| (series.first..series.last).to_a == series end #=\u0026gt; true Our first example shows how to get the elements in the numbers list that are over 10 units in difference. I do this by using each_cons to give me a sliding window of 2 elements at a time. This give me:\nAt each step on the way I check b-a and see if that is greater than 10. If so, the select will return those groups of elements.\nThe second example simply sorts a set of \u0026lsquo;cards\u0026rsquo; and then looking at all 5 cards through each_cons and comparing the scores to see if they are in order and in sequence (a+1==b).\nLet’s play off this example a bit more, this time with dice. If we have to implement small and large straights, we have a similar problem, with a similar solution:\nFor the small straight we get 2 windows, becuase there are 5 values in the list and we are calling each_cons(4). Therefore we want a postfix of any? because either of the windows can be a run of 4.\nIn the second example we use all? to be more explicit, yet any? would have worked as well, because in the large straight, we only have one sliding window, 2,3,4,5,6.\nany? all? none? These have to be a few of my favorite methods in enumerable.\nGiven no args, they take a list of bool values and returns a bool. So [true, true, false].all? #=\u0026gt; false.\nKinda useful, but not really. If we pass it a block of code however.. now we can do something useful. Consider this example:\n.any? and .none? do what you probably think. Where .all? only returns true if ALL the conditions and elements match up, .any? returns true if ANY of them match, and .none? returns true if there were NO matches.\nWeird things like look-ahead? Say you have a file to read in line by line. You need to compare the current line to the next line to look for duplicates. each_cons(2) to the rescue!\nThis will tell us of the current line and the following line are the same.\n More uses for each_cons averages distances smoothing plots graphing geometry     (adsbygoogle = window.adsbygoogle || []).push({});  "},{"uri":"https://tutswiki.com/rest-api-in-clojure/","title":"A REST API in Clojure","tags":[],"description":"A newbie friendly introduction to REST API in Clojure. Project configuration and request handler.","content":" Clojure is one of the most interesting new languages targeting the JVM. Initially only the JVM, in the meantime it is also available for JavaScript. Essentially, you can write Clojure and either execute it as Java program or JavaScript program, of course each flavor has its unique features as well.\nClojure is a Lisp, thus the syntax may be foreign, but it is really, really easy since there are very few syntactic variations. The language “Lisp” is very lean and usually easily learned.\nIn this post, we’re going to create a complete REST application from scratch. There are already some (very) good tutorials available, but some are not quite up to date (see Heroku’s Devcenter or Mark McGranaghan for good ones). Clojure itself is still a young language, Lisp of course has a lot of history.\nOur application should allow creating, listing, fetching, updating, and deleting of documents.\nA document looks like this (JSON encoded):\n{ \u0026#34;id\u0026#34; : \u0026#34;some id\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;some title\u0026#34;, \u0026#34;text\u0026#34; : \u0026#34;some text\u0026#34; }  A GET call to /documents should return a list of these documents. A POST call to /documents with a documents as body shall create a new document, assigning a new id (ignoreing the posted one). A GET to /documents/[ID] should return the document with the given id, or 404 if the document does not exist. A PUT to /documents/[ID] should update the document with the given id and replace title and text with those from the document in the uploaded body. A DELETE to /documents/[ID] should delete the document with the given id and return 204 (NO CONTENT) in any case.     (adsbygoogle = window.adsbygoogle || []).push({});  Creating the project scaffolding We’re going to use Leiningen, the defacto build system and dependency manager for Clojure projects. Download and install it, then execute:\nlein new compojure clojure-rest We’re creating a new Compojure project called clojure-rest. Compojure is the library that maps URLs to functions in our program. Compojure (and our project) builds on Ring is the basic Server API. To start the new project run:\nlein ring server This starts the server on localhost:3000 and automatically restarts the server if any of the project files change. Thus, you can leave it running while we develop our application.\nThe new command generates two very important files for us:\nproject.clj is the project configuration. It states dependencies, the entry point etc. (read the whole documentation on Leiningen.org, and src/clojure_rest/handler.clj which contains a starting point for our application.\nProject configuration (project.clj) (defproject clojure-rest \u0026#34;0.1.0-SNAPSHOT\u0026#34; :description \u0026#34;FIXME: write description\u0026#34; :url \u0026#34;http://example.com/FIXME\u0026#34; :dependencies [[org.clojure/clojure \u0026#34;1.4.0\u0026#34;] [compojure \u0026#34;1.1.1\u0026#34;]] :plugins [[lein-ring \u0026#34;0.7.3\u0026#34;]] :ring {:handler clojure-rest.handler/app} :profiles {:dev {:dependencies [[ring-mock \u0026#34;0.1.3\u0026#34;]]}}) Update the file to look like this: (defproject clojure-rest \u0026#34;0.1.0-SNAPSHOT\u0026#34; :description \u0026#34;REST service for documents\u0026#34; :url \u0026#34;https://tutswiki.com\u0026#34; :dependencies [[org.clojure/clojure \u0026#34;1.4.0\u0026#34;] [compojure \u0026#34;1.1.1\u0026#34;] [ring/ring-json \u0026#34;0.1.2\u0026#34;] [c3p0/c3p0 \u0026#34;0.9.1.2\u0026#34;] [org.clojure/java.jdbc \u0026#34;0.2.3\u0026#34;] [com.h2database/h2 \u0026#34;1.3.168\u0026#34;] [cheshire \u0026#34;4.0.3\u0026#34;]] :plugins [[lein-ring \u0026#34;0.7.3\u0026#34;]] :ring {:handler clojure-rest.handler/app} :profiles {:dev {:dependencies [[ring-mock \u0026#34;0.1.3\u0026#34;]]}}) Besides the JSON parsing library Cheshire, we added the C3P0 Connection Pool, the H2 Database JDBC driver and Clojure’s java.jdbc contrib-library.\nI also updated the :url and :description fields.\nThe request handler (handler.clj) Next let’s have a look at the generated request handler src/clojure_rest/handler.clj:\n(ns clojure-rest.handler (:use compojure.core) (:require [compojure.handler :as handler] [compojure.route :as route])) (defroutes app-routes (GET \u0026#34;/\u0026#34; [] \u0026#34;Hello World\u0026#34;) (route/not-found \u0026#34;Not Found\u0026#34;)) (def app (handler/site app-routes)) The route GET \u0026quot;/\u0026quot; [] \u0026quot;Hello World\u0026quot; is responsible for our result we saw in the browser. It maps all GET requests to / without parameters to \u0026ldquo;Hello World\u0026rdquo;. The (def app (handler/site app-routes)) part configures our application (registering the routes).\nOur first step is to update the configuration. We’re going to work with JSON, so let’s include some Ring middlewares to setup response headers (wrap-json-response) and parse request bodies (wrap-json-body) for us. A middleware is just a wrapper around a handler, thus it can pre- and post-process the whole request/response cycle.\n(def app (-\u0026gt; (handler/api app-routes) (middleware/wrap-json-body) (middleware/wrap-json-response))) We switched also from the handler/site template to handler/api which is more appropriate for REST APIs (documentation).\nNext let’s define the routes for our application:\n(defroutes app-routes (context \u0026#34;/documents\u0026#34; [] (defroutes documents-routes (GET \u0026#34;/\u0026#34; [] (get-all-documents)) (POST \u0026#34;/\u0026#34; {body :body} (create-new-document body)) (context \u0026#34;/:id\u0026#34; [id] (defroutes document-routes (GET \u0026#34;/\u0026#34; [] (get-document id)) (PUT \u0026#34;/\u0026#34; {body :body} (update-document id body)) (DELETE \u0026#34;/\u0026#34; [] (delete-document id)))))) (route/not-found \u0026#34;Not Found\u0026#34;)) We define GET and POST for the context \u0026ldquo;/documents, and GET, PUT, DELETE for the context \u0026ldquo;:id\u0026rdquo; on top of that. :id is a placeholder and can then be injected into our parameter vector. The POST and PUT request have a special parameter body for the parsed body (this parameter is provided by the wrap-json-body middleware. For more on routes, take a look at Compojure’s documentation.\nBefore we define the functions to carry out the requests, let’s fix the imports and open a pool of database connections to work with.\nThe namespace declaration is used to define which namespaces shall be made available by Clojure.\n(ns clojure-rest.handler (:import com.mchange.v2.c3p0.ComboPooledDataSource) (:use compojure.core) (:use cheshire.core) (:use ring.util.response) (:require [compojure.handler :as handler] [ring.middleware.json :as middleware] [clojure.java.jdbc :as sql] [compojure.route :as route])) We import C3P0’s ComboPooledDataSource, a plain Java class. Next, we fetch the functions defined in compojure.core, cheshire.core, and ring.util.response into our namespace, they can be used without qualifying. Finally we require some more libraries, this time with a qualifier to prevent name clashes or to support nicer separation. I’m not sure when to make the cut between :use and :require yet, so the cut is abitrary.\n(def db-config {:classname \u0026#34;org.h2.Driver\u0026#34; :subprotocol \u0026#34;h2\u0026#34; :subname \u0026#34;mem:documents\u0026#34; :user \u0026#34;\u0026#34; :password \u0026#34;\u0026#34;}) Note, we use a in-memory database. If you’d like to keep your database between restarts, you could use :subname \u0026quot;/tmp/documents\u0026quot; for example.\nNext we open a pool of connections. C3P0 has no Clojure wrapper, so we deal with Java classes and objects directly (hence a bit more code).\n(defn pool [config] (let [cpds (doto (ComboPooledDataSource.) (.setDriverClass (:classname config)) (.setJdbcUrl (str \u0026#34;jdbc:\u0026#34; (:subprotocol config) \u0026#34;:\u0026#34; (:subname config))) (.setUser (:user config)) (.setPassword (:password config)) (.setMaxPoolSize 6) (.setMinPoolSize 1) (.setInitialPoolSize 1))] {:datasource cpds})) (def pooled-db (delay (pool db-config))) (defn db-connection [] @pooled-db) Since we deal with a in-memory database, we need to create our table now.\n(sql/with-connection (db-connection) (sql/create-table :documents [:id \u0026#34;varchar(256)\u0026#34; \u0026#34;primary key\u0026#34;] [:title \u0026#34;varchar(1024)\u0026#34;] [:text :varchar])) The intent should be easy to understand, for the details take a look at the java.jdbc documentation. We create a table documents with a :id, :title, and :text column. Note that the database column is called id, not :id.\nThe only thing missing are the functions to actually perform the actions requested by our clients.\nTo return a single document with a given id, we could come up with this:\n(defn get-document [id] (sql/with-connection (db-connection) (sql/with-query-results results [\u0026#34;select * from documents where id = ?\u0026#34; id] (cond (empty? results) {:status 404} :else (response (first results)))))) It reads like this: when called with an id, open a database connection, perform select * from documents where id = ? with the given id as parameter. If the result is empty, return 404, otherwise return the first (and only) document as response.\nThe response call will convert the document into JSON, this functionality is provided by wrap-json-response, which also sets the correct Content-Type etc.\nAnother nice one is the creation of new documents:\n(defn uuid [] (str (java.util.UUID/randomUUID))) (defn create-new-document [doc] (let [id (uuid)] (sql/with-connection (db-connection) (let [document (assoc doc \u0026#34;id\u0026#34; id)] (sql/insert-record :documents document))) (get-document id))) Here we use Java’s UUID generator (without import, hence the full package name) to generate a new id for each document created. The second let statement is responsible to replace the user-provided id (if any) with our generated one. Remember that Clojure’s datastructures are immutable, so we need to use the document variable thereafter, instead of the doc which still contains the old (or no) id.\nReturning the document is delegated to the get-document function.\nThe complete handler.clj To round the post up, here is the whole program:\n(ns clojure-rest.handler (:import com.mchange.v2.c3p0.ComboPooledDataSource) (:use compojure.core) (:use cheshire.core) (:use ring.util.response) (:require [compojure.handler :as handler] [ring.middleware.json :as middleware] [clojure.java.jdbc :as sql] [compojure.route :as route])) (def db-config {:classname \u0026#34;org.h2.Driver\u0026#34; :subprotocol \u0026#34;h2\u0026#34; :subname \u0026#34;mem:documents\u0026#34; :user \u0026#34;\u0026#34; :password \u0026#34;\u0026#34;}) (defn pool [config] (let [cpds (doto (ComboPooledDataSource.) (.setDriverClass (:classname config)) (.setJdbcUrl (str \u0026#34;jdbc:\u0026#34; (:subprotocol config) \u0026#34;:\u0026#34; (:subname config))) (.setUser (:user config)) (.setPassword (:password config)) (.setMaxPoolSize 1) (.setMinPoolSize 1) (.setInitialPoolSize 1))] {:datasource cpds})) (def pooled-db (delay (pool db-config))) (defn db-connection [] @pooled-db) (sql/with-connection (db-connection) ; (sql/drop-table :documents) ; no need to do that for in-memory databases (sql/create-table :documents [:id \u0026#34;varchar(256)\u0026#34; \u0026#34;primary key\u0026#34;] [:title \u0026#34;varchar(1024)\u0026#34;] [:text :varchar])) (defn uuid [] (str (java.util.UUID/randomUUID))) (defn get-all-documents [] (response (sql/with-connection (db-connection) (sql/with-query-results results [\u0026#34;select * from documents\u0026#34;] (into [] results))))) (defn get-document [id] (sql/with-connection (db-connection) (sql/with-query-results results [\u0026#34;select * from documents where id = ?\u0026#34; id] (cond (empty? results) {:status 404} :else (response (first results)))))) (defn create-new-document [doc] (let [id (uuid)] (sql/with-connection (db-connection) (let [document (assoc doc \u0026#34;id\u0026#34; id)] (sql/insert-record :documents document))) (get-document id))) (defn update-document [id doc] (sql/with-connection (db-connection) (let [document (assoc doc \u0026#34;id\u0026#34; id)] (sql/update-values :documents [\u0026#34;id=?\u0026#34; id] document))) (get-document id)) (defn delete-document [id] (sql/with-connection (db-connection) (sql/delete-rows :documents [\u0026#34;id=?\u0026#34; id])) {:status 204}) (defroutes app-routes (context \u0026#34;/documents\u0026#34; [] (defroutes documents-routes (GET \u0026#34;/\u0026#34; [] (get-all-documents)) (POST \u0026#34;/\u0026#34; {body :body} (create-new-document body)) (context \u0026#34;/:id\u0026#34; [id] (defroutes document-routes (GET \u0026#34;/\u0026#34; [] (get-document id)) (PUT \u0026#34;/\u0026#34; {body :body} (update-document id body)) (DELETE \u0026#34;/\u0026#34; [] (delete-document id)))))) (route/not-found \u0026#34;Not Found\u0026#34;)) (def app (-\u0026gt; (handler/api app-routes) (middleware/wrap-json-body) (middleware/wrap-json-response))) Yeah, the whole program with connection pooling, JSON de/encoding in roughly 90 lines of (admittedly dense) code.\nTo sum it up: Clojure is fun, concise, and very powerful. Together with the excellent Java integration it ranks very high on my “languages I adore” list.\n   (adsbygoogle = window.adsbygoogle || []).push({});  "},{"uri":"https://tutswiki.com/abstract-classes-and-interfaces-in-python/","title":"Abstract classes and interfaces in Python","tags":["Python"],"description":"Abstract classes, methods and Zope interfaces, adapters in Python","content":" Abstract base classes and interfaces are entities that are similar in purpose and meaning. Both the first and second are a peculiar way of documenting the code and help to limit (decouple) the interaction of individual abstractions in the program (classes).\nPython is a very flexible language. One facet of this flexibility is the possibilities provided by metaprogramming. And although abstract classes and interfaces are not represented in the core of the language, the former were implemented in the standard abc module, and the latter in the Zope project (the zope.interfaces module).\nIt makes no sense to use both at the same time, and therefore each programmer must determine for himself which tool to use when designing applications.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Abstract base classes (abc) Starting from version 2.6 of the language, the abc module is included in the standard library, which adds abstract base classes (hereinafter ABC) to the language.\nABC allows you to define a class, indicating which methods or properties must be overridden in inherited classes:\nfrom abc import ABCMeta, abstractmethod, abstractproperty class Movable(): __metaclass __ = ABCMeta @abstractmethod def move(): \u0026#34;\u0026#34;\u0026#34;Move object\u0026#34;\u0026#34;\u0026#34; @abstractproperty def speed(): \u0026#34;\u0026#34;\u0026#34;Object speed\u0026#34;\u0026#34;\u0026#34; Thus, if we want to use an object with the ability to move and a certain speed in the code, then we should use the Movable class as one of the base classes.\nThe presence of the necessary methods and attributes of the object is now guaranteed by the presence of abstractmethod and abstractproperty.\nclass Car(Movable): def __init__: self.speed = 10 self.x = 0 def move(self): self.c += self.speed def speed(self): return self.speed assert issubclass (Car, Movable) assert ininstance (Car(), Movable) It can be seen that the concept of ABC fits well into the class inheritance hierarchy, it is easy to use them, and the implementation, if you look into the source code of the abc module, is very simple. Abstract classes are used in the standard collections and number modules, defining the methods of custom inherited classes necessary for definition.\nDetails and considerations for using ABC can be found in PEP-3119.\nInterfaces (zope.interfaces) The Zope Toolkit (ZTK) is a set of libraries intended for reuse by projects to develop web applications or web frameworks. It is developed by the contributors of the Zope Foundation. The zope framework has evolved into a set of almost independent components. The glue that holds the components together is the interfaces and the adapters based on them.\nThe zope.interfaces module is the result of this work.\nIn the simplest case, using interfaces is similar to ABC:\nimport zope.interface class IVehicle(zope.interface.Interface): \u0026#34;\u0026#34;\u0026#34;Any moving thing\u0026#34;\u0026#34;\u0026#34; speed = zope.interface.Attribute(\u0026#34;\u0026#34;\u0026#34;Movement speed\u0026#34;\u0026#34;\u0026#34;) def move(): \u0026#34;\u0026#34;\u0026#34;Make a single step\u0026#34;\u0026#34;\u0026#34; class Car(object): zope.interface.implements (IVehicle) def __init__: self.speed = 1 self.location = 1 def move (self): self.location = self.speed * 1 print(\u0026#34;moved!\u0026#34;) assert IVehicle.implementedBy (Car) assert IVehicle.providedBy (Car ()) The interface declaratively shows what attributes and methods the object should have. Moreover, the class implements the interface, and the object of the class provides. You should pay attention to the difference between these concepts!\n\u0026ldquo;Implementing\u0026rdquo; an interface means that only the \u0026ldquo;produced\u0026rdquo; entity will have the required properties; and \u0026ldquo;providing\u0026rdquo; an interface speaks of the specific capabilities of the entity being evaluated. Accordingly, in Python, classes, by the way, can both implement and provide an interface.\nIn fact, the implementation declaration (IVehicle) is a convention; just a promise that a given class and its objects behave that way. No real checks will be made.\nclass IVehicle (zope.interface.Interface): \u0026#34;\u0026#34;\u0026#34;Any moving thing\u0026#34;\u0026#34;\u0026#34; speed = zope.interface.Attribute(\u0026#34;\u0026#34;\u0026#34;Movement speed\u0026#34;\u0026#34;\u0026#34;) def move(): \u0026#34;\u0026#34;\u0026#34;Make a single step\u0026#34;\u0026#34;\u0026#34; class Car(object): zope.interface.implements(IVehicle) assert IVehicle.implementedBy(Car) assert IVehicle.providedBy(Car()) The component architecture of Zope includes another important concept - adapters. Generally speaking, this is a simple design pattern that corrects one class for use somewhere where a different set of methods and attributes is required.\nAdapters Consider a simple an example from the Comprehensive Guide to Zope Component Architecture.\nSuppose there are a couple of classes, Guest and Desk. Let\u0026rsquo;s define interfaces to them, plus a class that implements the Guest interface:\nimport zope.interface from zope.interface import implements from zope.component import adapts, getGlobalSiteManager class IDesk(zope.interface.Interface): def register(): \u0026#34;Register a person\u0026#34; class IGuest(zope.interface.Interface): name = zope.interface.Attribute (\u0026#34;\u0026#34;\u0026#34;Person`s name\u0026#34;\u0026#34;\u0026#34;) class Guest (object): implements(IGuest) def __init __ (self, name): self.name = name The adapter must account for the anonymous guest by registering in the list of names:\nclass GuestToDeskAdapter (object): adapts(IGuest) implements(IDesk) def __init __ (self, guest): self.guest = guest def register (self): guest_name_db.append (self.guest.name) There is a registry that keeps track of adapters by interface. Thanks to it, you can get an adapter by passing an adaptable object to the call of the interface class. If the adapter is not registered, the second argument to the interface will be returned:\nguest = Guest (\u0026#34;Ivan\u0026#34;) adapter = IDesk (guest, alternate = None) print adapter \u0026gt;\u0026gt;\u0026gt;\u0026gt; None found gsm = getGlobalSiteManager () gsm.registerAdapter (GuestToDeskAdapter) adapter = IDesk (guest, alternate = \u0026#34;None found\u0026#34;) print adapter \u0026gt;\u0026gt;\u0026gt;\u0026gt; __ main __. GuestToDeskAdapter object at 0xb7beb64c\u0026gt; This infrastructure is useful for splitting code into components and linking them together.\nOne of the most striking examples of using this approach besides Zope itself is the Twisted network framework, where a fair amount of the architecture relies on zope.interfaces interfaces.\nConclusion Upon closer inspection, it turns out that interfaces and abstract base classes are two different things.\nAbstract classes basically hardcode the required front-end part. Checking an object against the interface of an abstract class is checked using the built-in isinstance function; class - issubclass. An abstract base class should be included in the hierarchy as a base class or mixin.\nThe downside is the semantics of checks issubclass, isinstance, which intersect with ordinary classes (their inheritance hierarchy). No additional abstractions are built on the ABC.\nInterfaces are a declarative entity, they do not set any boundaries; simply asserts that the class implements and its object provides the interface. Semantically, the statements implementedBy, providedBy are more correct. On such a simple basis, it is convenient to build a component architecture using adapters and other derived entities, which is what the large Zope and Twisted frameworks do.\nIt should be understood that the use of both tools makes sense only when building and using relatively large OOP systems - frameworks and libraries, in small programs they can only confuse and complicate the code with unnecessary abstractions.\n   (adsbygoogle = window.adsbygoogle || []).push({});  "},{"uri":"https://tutswiki.com/deep-learning-cardiovascular-imaging/","title":"How Deep Learning Helped Reducing Variability in Cardiovascular Imaging","tags":[],"description":"New software based on deep learning algorithms automatically and accurately calculates LVEF","content":" Bay Labs, a San Francisco-based medical technology company which focuses on using artificial intelligence to improve cardiovascular imaging, has released a new software EchoMD AutoEF. It is being claimed that this software will help to reduce the variability in cardiovascular imaging.\nThe software uses deep learning techniques to accurately calculate the left ventricular ejection fraction.\nWhat is Ejection Fraction? During each pumping cycle of our heart, it contracts and relaxes. When it contracts it passes the blood to ventricles. Ventricles are basically the pumping chambers. Ejection Fraction is the amount of blood withdrawn from the heart when it contracts. Medical professionals use EF to identify the health of a heart. They generally measure the EF from left ventricle because it is the main pumping chamber of the heart which passes the oxygenated blood through the ascending (upward) aorta to the rest of the body.\nMeasuring EF There are various methods available to measure LVEF, out of which Simpson’s biplane method is used widely. This method has about 9.2% average variability. The EchoMD AutoEF software by Bay Labs has an average variability of 8.2%. Moreover, EchoMD AutoEF doesn\u0026rsquo;t require any user intervention, it\u0026rsquo;s fully automatic. It calculates LVEF from complete echocardiographic patient studies, automatically.\nHow Deep Learning Helped? At present Human intervention is required to calculate LVEF. Medical professionals have to go through the recorded clips. They watch them carefully and pick the best ones then they manipulate them for quantification. This is a very time consuming and prone-to-error process (as it is done by humans). The deep learning algorithms helped in this case by totally eliminating the need to do all of the above manually. The training set included 4,000,000 images from about 9,000 patients.\nQuoting Richard Bae, who is the Director of the Echocardiography Laboratory at the Minneapolis Heart Institute:\n \u0026ldquo;Historically there have been challenges with variability and reproducibility in reporting of the ejection fraction, especially when the EF is not normal; our study showed that the EchoMD AutoEF algorithms can aid interpretation enormously and have less variability than cardiologists reported in the literature.”\n\u0026ldquo;By supporting fast, efficient and accurate AI-assisted echocardiogram analysis, the algorithms can allow physicians to focus on putting results into the context for the patient - guiding prognosis and course of management.”\n This is a great innovation in the medical field. It will help cardiologists in better decision making.\nU.S. Food and Drug Administration (FDA) has given 510(k) clearance to this product. Which means that the device is safe and effective in automatically selecting clips and calculating LVEF.\n "},{"uri":"https://tutswiki.com/google-engineers-boycott-security-tool-military/","title":"Google Engineers Boycott Against Security Tool for Military","tags":[],"description":"A group of 9 cloud engineers at Google has refused to work on air-gap due to which Google may lose a deal worth $10 billion.","content":" A group of 9 cloud engineers at Google has refused to work on a project called air-gap due to which Google may lose a deal worth $10 billion. Google needs air-gap if it has to do some sensitive work with government agencies involving sensitive data (obviously military implications there). So this group of 9 basically just said they weren\u0026rsquo;t gonna do it. About 10-12 employees have resigned so far as part of this work strike. Google spends a lot of time making sure their top talent is happy so that they stick around and don\u0026rsquo;t go to other companies, so Google just stood down on this one. Urs Hölzle, the senior VP of technical infrastructure at Google said that the feature would be postponed.\nOn the one hand this is good as it shows that employees get ample space to air grievances, but on the other hand, the shareholders will get angry as it hampers Google\u0026rsquo;s ability to compete. In order to get government contracts especially those which involves sensitive data and military require some certifications, which Google\u0026rsquo;s competitors like Microsoft and Amazon have but Google doesn\u0026rsquo;t. This air-gap feature was supposed to help Google with that but it seems it\u0026rsquo;ll be abandoned.\nWhat is air-gap? Microsoft and Amazon have set-up a service called Government Cloud (Azure Government and AWS GovCloud) where the sensitive government information can be stored. An important feature of this service is air-gap. It is a security measure which ensures that a secured computer network is physically isolated from unsecured networks. Therefore, instead of storing data from multiple sources in a single server/system you store it in a separate isolated hardware. This is helpful for the government if they want to know where their data reside (physically) so that they can wipe it immediately.\nAlthough the feature is not that difficult to implement, Google can form a new team to work on it but looking at the fate of Project Maven which got similar boycott, it\u0026rsquo;d be difficult for Google.\nBesides, U.S. Congress is accusing Google over the partnership with Huawei, a Chinese manufacturer which makes Android phones. They said  You were not with the Pentagon on an AI project but you\u0026rsquo;ll work with the Chinese handset manufacturer.\n That is a very difficult situation for Google and I think they are right now working on how to handle this.\nSource: Bloomberg\n"},{"uri":"https://tutswiki.com/nodejs-google-app-engine/","title":"How to deploy Node.js app on Google App Engine","tags":[],"description":"Learn how to deploy your Node.js app on the Google App Engine.","content":" Google App Engine is a part of the Google Cloud Suite which provides a cloud platform for developers where they can develop and host their apps. It provides easily configurable, fast and secure programming environments/tools with the help of which developers can setup a development environment in just a few minutes. Therefore developers don\u0026rsquo;t need to worry about configuring the environment, they can just focus on writing code. It supports all the popular programming languages Java, PHP, Node.js, Python, C#, .Net, Ruby and Go.\n  Till now there was no support for Node.js, but Google has just announced that developers will now be able to deploy their Node.js apps to the App Engine. Steps to deploy Node.js web service on App Engine Prerequisites  You must have a project on the Google Cloud Platform. If you don\u0026rsquo;t, create one using the GCP Console.\n The development environment should be configured. You have 2 options here.\n Configure it on the cloud using Cloud Shell Setup your local machine  Download and install Node.js and Node Package Manager Get Node.js and npm   Only Node.js version 8 or greater is supported on App Engine.\n  Download and install Google Cloud SDK Get Google Cloud SDK   Google Cloud SDK also installs gcloud command line tool.\n        (adsbygoogle = window.adsbygoogle || []).push({});  Hello world!  There\u0026rsquo;s a sample Node.js repository on GitHub. Either clone it using git or download the zip.\ngit clone https://github.com/GoogleCloudPlatform/nodejs-docs-samples Navigate to the below directory\ncd nodejs-docs-samples/appengine/hello-world/standard Install the required dependencies using npm utility\nnpm install Start the web server\nnpm start Check output\n If you are using Cloud Shell then click on Web preview If you are on Local Machine then navigate to http://localhost:8080/    Deploy on App Engine Since we have verified that our Hello World program is working fine, it\u0026rsquo;s time to deploy it.\n If you had installed Google Cloud SDK properly (as mentioned in Prerequisites), you\u0026rsquo;ll have access to the gcloud command. Run it as below\ngcloud app deploy Your app should now be live at https://\u0026lt;PROJECT_ID\u0026gt;.appspot.com/\ngcloud app browse   That\u0026rsquo;s it. You have successfully deployed your sample Node.js app on the Google App Engine.\n Refer Google\u0026rsquo;s official guide on Building a Node.js App on App Engine\n You can try out Google App Engine\u0026rsquo;s free tier to deploy your Node.js app and see if you like it.\n  div.notices { margin: 0.3rem 0;  "},{"uri":"https://tutswiki.com/angular6-features/","title":"What&#39;s new in Angular 6 (Features List)","tags":["angular"],"description":"List of major changes in Angular 6. ng-add, ng-update, material, cdk and starter components.","content":" Angular 6 is out with all new features. It is a major release in which Angular team has synchronized many of the important framework packages to make most out of cross compatibility. All the major framework packages like @angular/core, @angular/compiler, @angular/common etc., are reworked and released as version 6.0.0. Below is the list of major changes in Angular 6, let\u0026rsquo;s explore them one by one.\nAngular 6 Features:  New CLI commands  ng update ng add  Referencing providers Angular Elements Angular Material + CDK Components  Tree Badge Bottom-Sheet Overlay  Starter Components  Dashboard Side-Nav Datatable  Library Support CLI Workspaces RxJS v6 Long Term Support  ng update A new command is introduced in Angular CLI which analyzes package.json and recommends any updates (if needed) on the installed packages.\nThis is going to make your life easy as now you don\u0026rsquo;t have to manually synchronize your dependencies. This will work using Schematics, a workflow tool which is based on Tree data structure. For example a tree has base, scripts following schematics will also have a base and that base will be the root structure. Any modification has first have to pass from staging area to make its way to the root. If any of the dependency provide a schematic then it can automatically update your code whenever there are major changes.\nSo now if you run ng update @angular/common it will update the package and run any schematic available for this package.\n   (adsbygoogle = window.adsbygoogle || []).push({});  To get more details on ng update usage, refer the official specification.\nng add This is another CLI command added in Angular 6. This will be helpful in adding new packages to your project. It downloads the packages (with their dependencies) using the package manager and installs them with the help of Schematics.\nng add @angular/material // Install and configure Angular Material ng add @ng-bootstrap/schematics // Add ng-bootstrap in your application  This area will flourish with increase in packages supporting ng add. Refer Material\u0026rsquo;s ng-add schematic to get an idea on how to write one for your application.\nReferencing Providers Before this update we used to reference services from module but with Angular 6 we will reference module from service.\nAngular Elements @angular/elements creates a custom element which acts as a bridge between Angular component interface and change detection functionality to the built-in DOM API. You can bootstrap Angular components with your application and they will be registered as Angular Elements. One of the benefits that you get from this is that it\u0026rsquo;ll dynamically insert HTML code holding Angular components after your application is compiled.\nAngular Material + CDK Components Below are some new components that have been added in Angular 6.\n Tree: It is based on datatable component and is best suited for representing hierarchical data. CDK contains the core tree directive (cdk-tree) whereas mat-tree comes with Material design style. See this presentation from ng conf 2018 to get more details on Material Trees.   Badge: This component can be used to display a small piece of information such as notification count on notification drawer, unread emails count over the email icon etc.   Bottom-Sheet: This component is mobile-centric which can be used to present a list of options for a particular action. It appears from the bottom of the viewport (with slide-up animation).   Overlay: @angular/cdk/overlay has been updated with a new positioning logic which helps in creating intelligent pop-ups that remain on the screen in all situations.   Starter Components With Angular 6 you get 3 new starter components after running ng add @angular/material. With this update in place, it\u0026rsquo;s very easy to create simple UI.\n Create a dashboard\nng generate @angular/material:material-dashboard --name=test-dashboard    Create side navigation\nng generate @angular/material:material-nav --name=test-nav    Create a datatable\nng generate @angular/material:material-table --name=test-table   Library Support Library support has been added in 6.0.0. You can easily create a library using below command. See details.\nng generate library \u0026lt;name\u0026gt;  CLI Workspaces CLI can now support workspaces with multiple projects. angular-cli.json has been renamed to angular.json. Each workspace can have multiple projects, each project can have targets and each target can have a configuration.\nRxJS v6 Angular 6 supports RxJS v6. RxJS v6 ensures that only those modules are bundled in production that are being used by your application. If you are moving from the previous version to Angular 6 then you have to change import statements and operator usage to make your application work. But if you don\u0026rsquo;t want to change then you can use this new package rxjs-compat which provides backward compatibility.\nLong Term Support Angular team announced to provide long-term support for all major releases starting from version 4. LTS will include 6 months of active development + 12 months of security patches and critical bug fixes.\nOther Changes:  \u0026lt;template\u0026gt; tag has been removed so now you have to use \u0026lt;ng-template\u0026gt; instead. - @angular/http is deprecated, @angular/common/http is the recommended alternative. If above-listed features look promising to you and you want to use Angular 6 for your existing project, then follow https://update.angular.io/.\n   "},{"uri":"https://tutswiki.com/github-alternatives/","title":"GitHub Alternatives (Free, Paid, Self-Hosted)","tags":[],"description":"Popular Alternatives to GitHub for Web, Linux, Windows, Self-Hosted and more.","content":" The trending news of yesterday was the acquisition of GitHub (the world\u0026rsquo;s leading software development platform) by Microsoft. This is a great deal for Microsoft which might put it in the position it was about 10 years ago in the software market. But a lot of open-source fans are unhappy with this.\nA couple of years ago Microsoft was anti-open-source.\n \u0026ldquo;Open source is an intellectual-property destroyer. I can\u0026rsquo;t imagine something that could be worse than this for the software business and the intellectual-property business.\u0026rdquo; - Jim Allchin (Former Windows chief), 2001\n  \u0026ldquo;Linux is a cancer that attaches itself in an intellectual property sense to everything it touches.\u0026rdquo; - Steve Ballmer (Former CEO)\n However, in recent years Microsoft has tried hard to catch up with the open-source world. They are promoting themselves as a supporter of open-source. They have open-sourced some of their projects and also joined The Linux Foundation as a platinum member.\nNobody knows whether they are doing this because they accepted that open-source is good or they are just trying to stay in the business by getting the attention of open-source users. Surely there are trust issues. Some GitHub users have already started looking for alternatives.\nBelow is a list of some popular services similar to GitHub:\n   (adsbygoogle = window.adsbygoogle || []).push({});  1. GitLab Most of the users on Social Media seem to be choosing GitLab as a replacement for GitHub.\nFeatures:  Issue board, Issue tracker (with due dates) Built-in CI/CD Unlimited private repositories Faster file search Cherry pick changes File locking Web IDE Wiki for project Ad free Code review and comments are supported in pull requests Static/Dynamic Application Security Testing, Docker container scanning Smart Mirroring for faster clone, fetch, pull (Premium) Host static websites  GitLab statistics shows that a lot of repos have been imported from GitHub in past few hours.\n 2. BitBucket An Atlassian product which is the most popular alternative to GitHub.\nFeatures:  Unlimited private repositories JIRA integration 2 factor authentication LFS support Source code search Wiki for project Issue tracker Ad free Code review and comments are supported in pull requests BitBucket cloud for hosting static websites (similar to GitHub pages) Smart Mirroring for faster clone, fetch, pull (Premium)  Pricing: Bitbucket Data Center vs GitHub Enterprise    (adsbygoogle = window.adsbygoogle || []).push({});  3. Gitea A lightweight GitHub clone (forked from GoGs) written in Go lang.\nFeatures:  GitHub clone Runs on Windows, Mac and Linux Lightweight (Even supports Raspberry Pi) Install from binary Ship with docker, vagrant or as a package Repo viewer Issue tracker Wiki API support Help (Support Forum and Chat)  4. SourceForge One of the oldest (since 1999) to offer free services to open source projects.\nFeatures:  Issue tracking Code hosting Mirroing Wiki Mailing lists Support forums User reviews on projects Micro-blog for project Unlimited bandwidth Download statistics Tool to import GitHub projects  5. Launchpad A Canonical product, which is quite famous for hosting Ubuntu projects.\nFeatures:  Issue tracking Code hosting (supports both Git and Bazaar) Code reviews Build and host Ubuntu projects Mailing lists Translations FAQs Specification tracking  6. Cloud Source Repositories (Paid) A Google product which is a part of Google Cloud.\nFeatures:  Connect your repo from BitBucket or GitHub Source code browser Debug and error reporting tools Stable and easily scalable infrastructure CI through Container Builder Preinstalled tools (Programming languages, Cloud shell, and Shell Editor) Faster deployment through App Engine Deployment through custom triggers (HTTP, Pub/Sub etc.)  Pricing: 7. AWS CodeCommit (Paid) An Amazon product which is similar to Cloud Source Repo, if you already have an AWS account you get it for free (Maximum 5 users allowed per month).\nFeatures:  Hosted on AWS Encrypted repositories Code review and comments are supported in pull requests Scalable No limit on size or type of data Easy migration from other services  Pricing: 8. Phabricator (Self-hosted) Features:  Source code hosting Git, Mercurial, SVN support Code review and auditing Wiki Issue tracker Workboard Chat channel Command line tools (lint, unit-tests) API support  Pricing: 9. GitBucket (Self-hosted) A git platform on JVM.\nFeatures:  Powered with Scala Highly scalable GitHub API compatible Repo viewer Issue tracker Wiki Plugin support  10. GoGs (Self-hosted) An easy to install and lightweight GitHub clone written in Go.\nFeatures:  GitHub clone Install from binary Ship with docker, vagrant or as a package Cross platform support Lightweight (runs on Raspberry Pi) Repo viewer Issue tracker Wiki  11. GitPrep (Self-hosted) A GitHub clone written in Perl.\nFeatures:  GitHub clone Portable Issue tracker CGI support Built-in web server SSL Support Public key auth support  12. Allura (Self-hosted) A product from Apache. Sourceforge runs on Allura.\nFeatures:  Code repo Supports Git, Mercurial, SVN Issue tracker Discussion forums Wiki Mailing lists     (adsbygoogle = window.adsbygoogle || []).push({});  Do let us know which alternative do you like the most?\n "},{"uri":"https://tutswiki.com/what-is-the-use-of-yield-in-python/","title":"What is the use of yield in Python?","tags":["Python"],"description":"What does yield do? How is it different from return?","content":" References  What does the “yield” keyword do in Python? Yield expressions  "},{"uri":"https://tutswiki.com/append-vs-extend-python/","title":"Difference between append and extend in Python","tags":["Python"],"description":"What is the difference between list methods append and extend in Python?","content":" append and extend are list methods in Python which can be used to combine multiple lists. But what is the difference between them? When should you use one over another, let\u0026rsquo;s find out.\nThe official documentation describes them as:\n list.append(x): Add an item to the end of the list; equivalent to a[len(a):] = [x].\n list.extend(L): Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.\n  Notice the bold words in the definition. append adds an item and extend appends all the items of the given list.\nLet\u0026rsquo;s take an example:\nappend a list to another list in Python some_list = [\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5] another_list = [\u0026#39;new data\u0026#39;, 12] some_list.append(another_list) print some_list Output:\n[\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5, [\u0026#39;new data\u0026#39;, 12]] As you can see, the append method took an item i.e. the object of another list and added it to some_list as it is.\nextend a list with another list in Python some_list = [\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5] another_list = [\u0026#39;new data\u0026#39;, 12] some_list.extend(another_list) print some_list Output:\n[\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5, \u0026#39;new data\u0026#39;, 12] In case of extend you can see that all the items from another_list were appended to some_list one by one. So you can say extend method concatenates one list with another list.\nQuiz Q: What will be the output of below code:\nsome_list = [\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5] data = \u0026#39;hello\u0026#39; some_list.extend(data) print some_list A: Output is\n[\u0026#39;string\u0026#39;, 1, \u0026#39;another string\u0026#39;, 6.5, \u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;] Explanation: If you notice carefully, data is a string and strings in Python are iterable. Therefore the extend method iterated over all characters in the string one by one and appended them to the list.\nSo based on above we can say that below 2 code snippets are equivalent:\nfor data in iterator: some_list.append(data)some_list.extend(iterator)"},{"uri":"https://tutswiki.com/print-same-line-python/","title":"How to print on same line with print in Python","tags":["Python"],"description":"Use a comma at the end of print function to write the data on same line","content":" In Python, when you use the print function, it prints a new line at the end.\nFor example:\nprint \u0026#34;This is some line.\u0026#34; print \u0026#34;This is another line.\u0026#34; Output:\nThis is some line. This is another line. What if you want to avoid the newline and want to print both statements on same line? Well, there are 2 possible solutions.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Add comma at the end of print print \u0026#34;This is some line.\u0026#34;, print \u0026#34;This is another line.\u0026#34; Output:\nThis is some line. This is another line. If you are using Python 3 then use the below:\nprint (\u0026#34;This is some line.\u0026#34;, end=\u0026#34;\u0026#34;) print (\u0026#34;This is another line.\u0026#34;) Use sys module import sys sys.stdout.write(\u0026#34;This is some line.\u0026#34;) sys.stdout.write(\u0026#34;This is another line.\u0026#34;)"},{"uri":"https://tutswiki.com/read-write-config-files-in-python/","title":"Writing and Reading config files in Python","tags":["Python"],"description":"Learn how to write and read .ini config files in Python using configparser module.","content":" I\u0026rsquo;m sure you must be aware about the importance of configuration files. Config files help creating the initial settings for any project, they help avoiding the hardcoded data.\nImagine if you migrate your server to a new host and suddenly your application stops working, now you have to go through your code and search/replace IP address of host at all the places. Config file comes to the rescue in such situation. You define the IP address key in config file and use it throughout your code. Later when you want to change any attribute, just change it in the config file. So helpful, isn\u0026rsquo;t it?\nLet\u0026rsquo;s see how can we create and read config files in Python.\n   (adsbygoogle = window.adsbygoogle || []).push({});  We’ve already covered .yaml, .json and .xml in below articles, in this article we’ll focus on .ini config files.\n .json file in Python .yaml file in Python .xml file in Python  Creating config file in Python In Python we have configparser module which can help us with creation of config files (.ini format).\nfrom configparser import ConfigParser #Get the configparser object config_object = ConfigParser() #Assume we need 2 sections in the config file, let\u0026#39;s call them USERINFO and SERVERCONFIG config_object[\u0026#34;USERINFO\u0026#34;] = { \u0026#34;admin\u0026#34;: \u0026#34;Chankey Pathak\u0026#34;, \u0026#34;loginid\u0026#34;: \u0026#34;chankeypathak\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;tutswiki\u0026#34; } config_object[\u0026#34;SERVERCONFIG\u0026#34;] = { \u0026#34;host\u0026#34;: \u0026#34;tutswiki.com\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8080\u0026#34;, \u0026#34;ipaddr\u0026#34;: \u0026#34;8.8.8.8\u0026#34; } #Write the above sections to config.ini file with open(\u0026#39;config.ini\u0026#39;, \u0026#39;w\u0026#39;) as conf: config_object.write(conf) Now if you check the working directory, you will notice config.ini file has been created, below is its content.\n[USERINFO] admin = Chankey Pathak password = tutswiki loginid = chankeypathak [SERVERCONFIG] host = tutswiki.com ipaddr = 8.8.8.8 port = 8080 Reading a key from config file So we have created a config file, now in your code you have to read the configuration data so that you can use it by \u0026ldquo;keyname\u0026rdquo; to avoid hardcoded data, let\u0026rsquo;s see how to do that.\nfrom configparser import ConfigParser #Read config.ini file config_object = ConfigParser() config_object.read(\u0026#34;config.ini\u0026#34;) #Get the password userinfo = config_object[\u0026#34;USERINFO\u0026#34;] print(\u0026#34;Password is {}\u0026#34;.format(userinfo[\u0026#34;password\u0026#34;])) Output:\nPassword is tutswiki Updating a key in config file Suppose you have updated the password for chankeypathak user. You can update the same in config file using below:\nfrom configparser import ConfigParser #Read config.ini file config_object = ConfigParser() config_object.read(\u0026#34;config.ini\u0026#34;) #Get the USERINFO section userinfo = config_object[\u0026#34;USERINFO\u0026#34;] #Update the password userinfo[\u0026#34;password\u0026#34;] = \u0026#34;newpassword\u0026#34; #Write changes back to file with open(\u0026#39;config.ini\u0026#39;, \u0026#39;w\u0026#39;) as conf: config_object.write(conf) Now if you open the config.ini file, you will notice that the password has been updated.\n"},{"uri":"https://tutswiki.com/run-module-as-script-python/","title":"How to run a Python module as script?","tags":["Python"],"description":"If you want to run the module itself as a script then you should use the __name__ variable.","content":" Suppose you have a module named mymath.py, which has a couple of functions. You can import this module in your script and call these functions.\ndef int_sum(a, b): print a+b def some_other_function(): pass But, what if you want to run the module itself as a script?\n   (adsbygoogle = window.adsbygoogle || []).push({});  Well, if you want to use a Python module as script then you just have to use the conditional for __name__.\ndef int_sum(a, b): print a+b if __name__ == \u0026#34;__main__\u0026#34;: import sys int_sum(int(sys.argv[1]),int(sys.argv[2])) Now you can run the above as:\n$ python mymath.py 1 2 3 This works because the value of built-in __name__ variable is set to __main__ if the Python code is executed directly through the interpreter. If you use the above module in a script using import then in that case the value of __name__ is the filename of module.\nAlso see  How to convert a Python script to module PEP 338 \u0026ndash; Executing modules as scripts What is if name == \u0026ldquo;main\u0026rdquo; in Python? What is the difference between a module and a script in Python?  "},{"uri":"https://tutswiki.com/if-name-main-in-python/","title":"What is if __name__ == &#34;__main__&#34; in Python?","tags":["Python"],"description":"If you are new to Python then you may have noticed if __name__ == &#34;__main__&#34; line in some python codes.","content":" If you are new to Python then you may have noticed if __name__ == \u0026quot;__main__\u0026quot; line in some python codes.\nYou may be wondering:\n What does that mean? What purpose does it serve? I don\u0026rsquo;t see it in all Python codes, so when should I use it exactly? Can you give me some examples?  Let me try to explain the above to you.\nIn Python all modules have some built-in attributes. __name__ is one of them. Now the question is what does __name__ contain?\nWell, that depends actually. It depends on how you use the module.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Case 1: Running the module directly If you run the module directly in a standalone program then in that case the value of __name__ attribute is set to __main__.\nFor example, create a file main.py and enter below code.\nif __name__ == \u0026#34;__main__\u0026#34;: print \u0026#34;Directly called from python interpreter\u0026#34; print \u0026#34;Value of __name__ attribute is \u0026#34;+__name__ else: print \u0026#34;Not directly called\u0026#34; print \u0026#34;Value of __name__ attribute is \u0026#34;+__name__ Now run the above code as below:\n$ python main.py Output:\nDirectly called from Python interpreter Value of __name__ attribute is __main__ Notice that when we ran the program directly from python interpreter the conditional __name__ == __main__ returned True and the print statement inside the if block got executed.\nCase 2: Using the module with import If you use the module in another program (using the import function), then in that case the value of __name__ attribute is set to the filename of the module.\nLet\u0026rsquo;s try to import the above created main.py.\n$ python \u0026gt;\u0026gt;\u0026gt; import main.py Output:\nNot directly called Value of __name__ attribute is main References  __main__ — Top-level script environment What does if __name__ == “__main__”: do?  "},{"uri":"https://tutswiki.com/pandas-cookbook/chapter1/","title":"Chapter 1 - Reading from a CSV","tags":[],"description":"Read data from a CSV using pandas dataframe, filter required columns and plot those columns.","content":" # Render our plots inline %matplotlib inline import pandas as pd import matplotlib.pyplot as plt pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) # Make the graphs a bit prettier plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 5)    (adsbygoogle = window.adsbygoogle || []).push({});  1.1 Reading data from a CSV file You can read data from a CSV file using the read_csv function. By default, it assumes that the fields are comma-separated.\nWe\u0026rsquo;re going to be looking some cyclist data from Montréal. Here\u0026rsquo;s the original page (in French). We\u0026rsquo;re using the data from 2012. Download the bikes.csv file to try out the below examples.\nThis dataset is a list of how many people were on 7 different bike paths in Montreal, each day.\nimport pandas as pd broken_df = pd.read_csv(\u0026#39;bikes.csv\u0026#39;) # Look at the first 3 rows broken_df[:3] Output:\n  Date;Berri 1;Br�beuf (donn�es non disponibles);C�te-Sainte-Catherine;Maisonneuve 1;Maisonneuve 2;du Parc;Pierre-Dupuy;Rachel1;St-Urbain (donn�es non disponibles)     0  01/01/2012;35;;0;38;51;26;10;16;   1  02/01/2012;83;;1;68;153;53;6;43;   2  03/01/2012;135;;2;104;248;89;3;58;    3 rows × 1 columns\n  You\u0026rsquo;ll notice that this is totally broken! read_csv has a bunch of options that will let us fix that, though. Here we\u0026rsquo;ll\n Change the column separator to a ; Set the encoding to '_latin1_' (the default is '_utf8_') Parse the dates in the 'Date' column Tell it that our dates have the date first instead of the month first Set the index to be the 'Date' column\nfixed_df = pd.read_csv(\u0026#39;bikes.csv\u0026#39;, sep=\u0026#39;;\u0026#39;, encoding=\u0026#39;latin1\u0026#39;, parse_dates=[\u0026#39;Date\u0026#39;], dayfirst=True, index_col=\u0026#39;Date\u0026#39;) fixed_df[:3]  Output:\n  Berri 1 Brébeuf (données non disponibles) Côte-Sainte-Catherine Maisonneuve 1 Maisonneuve 2 du Parc Pierre-Dupuy Rachel1 St-Urbain (données non disponibles)   Date              2012-01-01  35 NaN  0  38  51  26  10  16 NaN   2012-01-02  83 NaN  1  68  153  53  6  43 NaN   2012-01-03  135 NaN  2  104  248  89  3  58 NaN    3 rows × 9 columns\n 1.2 Selecting a column When you read a CSV, you get a kind of object called a DataFrame, which is made up of rows and columns. You get columns out of a DataFrame the same way you get elements out of a dictionary.\nHere\u0026rsquo;s an example:\nfixed_df[\u0026#39;Berri 1\u0026#39;] Output:\nDate 2012-01-01 35 2012-01-02 83 2012-01-03 135 2012-01-04 144 2012-01-05 197 2012-01-06 146 2012-01-07 98 2012-01-08 95 2012-01-09 244 2012-01-10 397 2012-01-11 273 2012-01-12 157 2012-01-13 75 2012-01-14 32 2012-01-15 54 ... 2012-10-22 3650 2012-10-23 4177 2012-10-24 3744 2012-10-25 3735 2012-10-26 4290 2012-10-27 1857 2012-10-28 1310 2012-10-29 2919 2012-10-30 2887 2012-10-31 2634 2012-11-01 2405 2012-11-02 1582 2012-11-03 844 2012-11-04 966 2012-11-05 2247 Name: Berri 1, Length: 310, dtype: int64 1.3 Plotting a column Just add .plot() to the end! How could it be easier? =)\nWe can see that, unsurprisingly, not many people are biking in January, February, and March.\nimport pandas as pd import matplotlib.pyplot as plt fixed_df = pd.read_csv(\u0026#39;bikes.csv\u0026#39;, sep=\u0026#39;;\u0026#39;, encoding=\u0026#39;latin1\u0026#39;, parse_dates=[\u0026#39;Date\u0026#39;], dayfirst=True, index_col=\u0026#39;Date\u0026#39;) fixed_df[\u0026#39;Berri 1\u0026#39;].plot() Output:   We can also plot all the columns just as easily. We\u0026rsquo;ll make it a little bigger, too. You can see that it\u0026rsquo;s more squished together, but all the bike paths behave basically the same \u0026ndash; if it\u0026rsquo;s a bad day for cyclists, it\u0026rsquo;s a bad day everywhere.\nfixed_df.plot(figsize=(15, 10)) plt.show() Output:\n  1.4 Putting all that together Here\u0026rsquo;s the code we needed to write do draw that graph, all together:\ndf = pd.read_csv(\u0026#39;bikes.csv\u0026#39;, sep=\u0026#39;;\u0026#39;, encoding=\u0026#39;latin1\u0026#39;, parse_dates=[\u0026#39;Date\u0026#39;], dayfirst=True, index_col=\u0026#39;Date\u0026#39;) df[\u0026#39;Berri 1\u0026#39;].plot() Output:  \n"},{"uri":"https://tutswiki.com/java/postgresql/","title":"PostgreSQL in Java","tags":["Java"],"description":"A complete guide on how to install PostgreSQL in Windows/Linux and use JDBC in Java to connect, create, insert, update, delete records in database. Code examples included.","content":" What is PostgreSQL? PostgreSQL is a free and open-source ORDBMS which is known for its extensibility and SQL compliance. It is recommended, for storing a high volume of data, thus used in major web development projects, which can produce a large amount of user-generated data.\nFeatures of PostgreSQL  Stores high volume of Data efficiently. Supports Composite Datatypes. Supports GeoSpatial Database. Supports Type Inheritance like Table Inheritance, View Inheritance, etc. High conformance with SQL standard.  Installing PostgreSQL Installing PostgreSQL 12 in Windows  Download GUI setup from the official website\n After clicking on Download the Installer, you\u0026rsquo;ll get the list of different setups. From the list, Select Windows x86-64 for row 12.X\n After completion of Download, open the Setup file, and you\u0026rsquo;ll get the following screen, click on the Next button.\n Choose Destination Directory   Select Components  PostgreSQL Server(Compulsory): This is the core component of the PostgreSQL. pgAdmin4: This provides GUI to interact with PostgreSQL Server. Stack Builder: This is a GUI utility to install additional modules for PostgreSQL. Command Line Tools(Compulsory): This provides the CLI to interact with PostgreSQL Server.    Select Directory for storing data. This folder will have all the Data that the user will store in PostgreSQL.   Enter the password for the Root User: postgres. Do enter it carefully, because this is the root password.   Configure the Port on which you want to run the PostgreSQL Server. (Default = 5432). Do not change if you are a beginner.   Set your Locale. Locale is a parameter that defines the user\u0026rsquo;s region and hence affects the language of the User interface. Here, the most visible change it will cause is the change in the default date-time format.   Installation Summary   Wait for the process to complete.\n Setup Complete\n   Change the Path variable for the system to make PostgreSQL globally available.\n Search for Edit Environment Variables in Start Menu   Select Edit Environment Variables   Edit System\u0026rsquo;s Path variable   Add a new variable and pass the path to the bin folder of the Postgres installation directory.   Click OK on all the opened windows.  To test the Postgres Installation:\n Enter command psql -U postgres Enter your root password, which you entered in \u0026ldquo;password step\u0026rdquo; in installation section If entered without any error, you will see the new prompt of the Postgres postgres=# Enter \\du to list all the available users Enter \\l to list all the databases Enter \\conninfo to view connection info    Possible Errors  Password Authentication Failed: That means the entered password is wrong psql not found: That means the environment variable is not correctly setup.  In the above setup, you will also get GUI Software for Database Management called PGAdmin4. You can find the executable in the directory pgadmin/pgadmin4.exe inside the Installation Folder. In the left pane, you can select the server. When selected, it will ask the password for postgres user, you should enter the same password that you set during installation.\nThe GUI will open in the browser and will look like this.\nInstalling PostgreSQL in Ubuntu Linux  First update system repositories\nsudo apt-get update Install PostgreSQL\nsudo apt-get install postgresql We can also add Contrib packages for additional functionalities\nsudo apt-get install postgresql postgresql-contrib Open PostgreSQL\nsudo -u postgres psql To exit PostgreSQL CUI, use \\q and hit Enter.\npostgres=# \\q To create a user\nsudo -u postgres createuser --i Enter the name of role to add: my_user Shall the new role be a superuser? (y/n) y To create a database\nsudo -u postgres createdb my_db To connect via the created role\nsudo -u my_user psql To check Connection Info, after the above command\n/conninfo Output:\nYou are now connected to database \u0026#34;my_db\u0026#34; as user \u0026#34;my_user\u0026#34; via socket in \u0026#34;\u0026lt;Postgres Installation path\u0026gt;\u0026#34; at port \u0026#34;5432\u0026#34; To locate config files, use ls etc/postgresql/\u0026lt;version\u0026gt;/main/\nls etc/postgresql/12/main/ conf.d pg_ctl.conf pg_ident.conf start.conf environment pg_hba.conf postgresql.conf  To use GUI for PostgreSQL, you can download PGAdmin3 from the Ubuntu Software.\nJDBC in Java Java Database Connectivity (JDBC) is the standard API that enables Java applications to connect with the various databases.\n It provides the methods to connect with the databases and execute queries on them which includes queries to get, add, remove, and modify data in a database. JDBC is database-independent and uses vendor-specific drivers to connect with databases. JDBC also provides a JDBC-to-ODBC bridge to communicate with databases with ODBC.  For the following content, you are expected to have a basic knowledge of Java and DBMS.\nHow to use JDBC To use JDBC, you should have a database with a user which have sufficient privileges on that database. JDBC also needs that user\u0026rsquo;s name and password to create a connection with the database.\nExample postgres=# CREATE DATABASE my_database; CREATE DATABASE postgres=# CREATE USER temp_user WITH ENCRYPTED PASSWORD \u0026#39;temp_password\u0026#39;; CREATE ROLE postgres=# GRANT ALL PRIVILEGES ON DATABASE my_database to temp_user; GRANT postgres=# Apart from this, users must also have the PostgreSQL Drivers for JDBC. These drivers can be downloaded from the postgresql website.\nSetup project in Netbeans IDE Netbeans is the official Java IDE and managed by Oracle.\n Download and install Netbeans IDE. Create a new Java Project in Netbeans IDE. Add downloaded PostgreSQL driver in the Project.  Right-click on Projects and select Properties. Click on Add Library and search for the PostgreSQL driver and select it. If not found, click on Add JAR/Folder and select downloaded Drivers.   Setup project in IntelliJ  Download and install IntelliJ Community Edition. Create a Java Command Line Project. Add downloaded PostgreSQL driver in the Project.\n After opening the project, click on File and then select Project Structure. Go to Library in Project Settings Menu in Left Pane. Click on the + Plus button in Main Pane. Browse for the Downloaded PostgreSQL Drivers and select the jar file.   Writing First JDBC program Prerequisites: A Database and UserName and Password for the user with privileges on the Database.\nCode package com.personal; import java.sql.Connection; import java.sql.DriverManager; public class Main { public static void main(String[] args) { Connection c = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); Connection conn = DriverManager.getConnection( \u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;, // Connection String  \u0026#34;temp_user\u0026#34;, // Database User Name  \u0026#34;temp_password\u0026#34;); // Database User Password  System.out.println(\u0026#34;Opened database successfully\u0026#34;); if (conn.getMetaData().supportsBatchUpdates()) { System.out.println(\u0026#34;The Database drivers support Batch Updates\u0026#34;); } else { System.out.println(\u0026#34;The Database drivers does not support Batch Updates\u0026#34;); } } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } } } Output:\nOpened database successfully The Database drivers support Batch Updates Explanation In the above program:\n Class.forName initializes the PostgreSQL Drivers. The next line creates the connection object which connects to the Database via the forementioned Drivers.\nHere, Connections string is \u0026quot;\u0026lt;DriverClass\u0026gt;://\u0026lt;Database_Host\u0026gt;:\u0026lt;Database_Port\u0026gt;/\u0026lt;Database_Name\u0026gt;\u0026quot; For a successful connection, a success message will print. Otherwise, the Exception will be thrown. After successful creation, we also check whether the driver supports the Batch Updates or not.\nThis line is used to make use of the connection made in the previous step.  Possible Errors  Password authentication failed for user \u0026quot;\u0026lt;user\u0026gt;\u0026quot;\nPossible Cause: If user name or password is incorrect.\n database \u0026quot;my_database\u0026quot; does not exist\nPossible Cause: If the database my_database is not present.\n  Creating a new table using JDBC Code package com.personal; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.sql.Statement; public class Main { public static void createTable(Connection conn) throws SQLException { final Statement statement = conn.createStatement(); String query = \u0026#34;CREATE TABLE post \u0026#34; + \u0026#34;(id SERIAL NOT NULL, \u0026#34; + \u0026#34;content VARCHAR(255), \u0026#34; + \u0026#34;likes INTEGER, \u0026#34; + \u0026#34;PRIMARY KEY (id))\u0026#34;; statement.executeUpdate(query); } public static void main(String[] args) { Connection conn = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); conn = DriverManager.getConnection(\u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;,\u0026#34;temp_user\u0026#34;, \u0026#34;temp_password\u0026#34;); System.out.println(\u0026#34;Creating Table `Post`\u0026#34;); createTable(conn); System.out.println(\u0026#34;Created Table `Post`\u0026#34;); } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } finally { if (conn != null) { try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } Output:\nCreating Table `Post` Created Table `Post` Explanation  The createTable() method creates a table with columns id, content, and likes where id is Auto-Generated, Primary key for the table; content is a string which contains the content of the posts; likes is an integer that will store the total likes given to the post. In this method, we used the Statement object to create a static statement for a database. Then we used executeUpdate() to execute the statement. Here, executeStatement() will return 0(zero) by default. This method could throw SQLException if any database access occurs.  Possible Errors  Relation \u0026quot;post\u0026quot; already exists: If post table is already present in the Database.  Verification To verify that the table is created, you can do any of the following:\n Run this program again. If the table already exists, a PSQLException is thrown with the message \u0026ldquo;Table already exists\u0026rdquo;. Open psql in the terminal with the following command: psql -U temp_user -d my_database and then enter the respective password. After this, enter command \\dt;, and you will get the following output\nmy_database=\u0026gt; \\dt; List of relations Schema | Name | Type | Owner --------+------+-------+----------- public | post | table | temp_user (1 row)  Entering a new record in the table Code package com.personal; import java.sql.*; public class Main { public static void addPost(Connection conn, String content, int likes) throws SQLException { String query = \u0026#34;INSERT INTO post(content, likes) VALUES (?, ?)\u0026#34;; PreparedStatement statement = conn.prepareStatement(query); statement.setString(1, content); statement.setInt(2, likes); statement.executeUpdate(); } public static void main(String[] args) { Connection conn = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); conn = DriverManager.getConnection(\u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;, \u0026#34;temp_user\u0026#34;, \u0026#34;temp_password\u0026#34;); System.out.println(\u0026#34;Creating `Post`\u0026#34;); addPost(conn, \u0026#34;This is my First post by JDBC\u0026#34;, 1); System.out.println(\u0026#34;Successfully Created First `Post`\u0026#34;); } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } finally { if (conn != null) { try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } Output:\nCreating `Post` Successfully Created `Post` Explanation  Here, addPost() takes Connection as the parameter with the content and likes for a Post. And then add the create a new record with passed content and likes in the post table. Here, we have used PreparedStatement instead of Statement because the Query is dynamic. PreparedStatement is used when the queries are dynamic or queries are reused. Here, we have used executeUpdate() method to execute statement. Here, the method should return 1(One) which represents the addition of one record. User can check the value by enclosing the executeUpdate() line inside the System.out.println().  Verification To verify that the record is added in the table, you should follow these steps:\n First, open psql by the following command: psql -U temp_user -d my_database and then enter the respective password. Then the records can be viewed by the following command SELECT * from post, and you will get the following output.\nmy_database=\u0026gt; SELECT * from post; id | content | likes ----+-------------------------------+------- 1 | This is my First post by JDBC | 1 (1 row)  Fetching records from the table Code package com.personal; import java.sql.*; public class Main { public static void printAllPosts(Connection conn) throws SQLException { final Statement statement = conn.createStatement(); final String query = \u0026#34;SELECT * FROM post\u0026#34;; ResultSet result = statement.executeQuery(query); while (result.next()) { int id = result.getInt(\u0026#34;id\u0026#34;); String content = result.getString(\u0026#34;content\u0026#34;); int likes = result.getInt(\u0026#34;likes\u0026#34;); System.out.printf(\u0026#34;Post with Id = %d had content = \u0026#39;%s\u0026#39; with %d likes\\n\u0026#34;, id, content, likes); } } public static void main(String[] args) { Connection conn = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); conn = DriverManager.getConnection(\u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;,\u0026#34;temp_user\u0026#34;, \u0026#34;temp_password\u0026#34;); System.out.println(\u0026#34;Content of table `Post`:\u0026#34;); printAllPosts(conn); } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } finally { if (conn != null) { try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } Output:\nContent of table `Post`: Post with Id = 1 had content = \u0026#39;This is my First post by JDBC\u0026#39; with 1 likes Explanation  The method printAllPosts() prints all the posts of the table post. It again uses the Statement object to form a query because the required query is static. Then, it uses executeQuery() method to execute the Statement and unlike executeUpdate() method, this method returns a ResultSet which has all the records that are produced by the query. Initially, ResultSet will have a cursor on the first record of the queried data. The Queried record can be fetched by the next() method of ResultSet which moves the cursor to the next record. The getInt() and getString() methods are used to get the Data of a result where the parameter will specify the column for which method is called, and the return value will be the value of the specified column.  Update existing record in the table Code package com.personal; import java.sql.*; public class Main { public static void updateLikes(Connection conn, Integer id, Integer likes) throws SQLException { String query = \u0026#34;UPDATE post set likes = ? WHERE id = ?\u0026#34;; PreparedStatement statement = conn.prepareStatement(query); statement.setInt(1, likes); statement.setInt(2, id); statement.executeUpdate(); } public static void main(String[] args) { Connection conn = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); conn = DriverManager.getConnection(\u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;, \u0026#34;temp_user\u0026#34;, \u0026#34;temp_password\u0026#34;); System.out.println(\u0026#34;Updating Likes for Post with id 1 to 5 likes\u0026#34;); updateLikes(conn, 1, 5); System.out.println(\u0026#34;Update Successful\u0026#34;); } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } finally { if (conn != null) { try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } Output:\nUpdating Likes for Post with id 1 to 5 likes Update Successful Explanation  The method updateLikes() will take the Connection with the id of the desired post and new Count of likes for that post as parameters. It is used to update the likes for the post with id passed as parameters. In the implementation, PreparedStatement is used, since the parameters id and likes will get updated with each call. The executeUpdate() will execute the Statement and returns the count of the records affected by the query. In this case, the count should be 1(One).  Verification You can verify the above program by the following methods:\n Use the aforementioned printAllPosts() method and find the post with id = 1 from the output and check whether its likes got updated to 1 or not. Can run the following query directly in psql: SELECT * FROM post WHERE id = 1, and you will get the following output.\nmy_database=\u0026gt; SELECT * FROM post WHERE id = 1; id | content | likes ----+-------------------------------+------- 1 | This is my First post by JDBC | 5 (1 row)  Deleting a record from the table Code package com.personal; import java.sql.*; public class Main { public static void deletePost(Connection conn, Integer id) throws SQLException { String query = \u0026#34;DELETE FROM \\\u0026#34;post\\\u0026#34; WHERE id = ?\u0026#34;; PreparedStatement statement = conn.prepareStatement(query); statement.setInt(1, id); statement.executeUpdate(); } public static void main(String[] args) { Connection conn = null; try { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;); conn = DriverManager.getConnection(\u0026#34;jdbc:postgresql://localhost:5432/my_database\u0026#34;, \u0026#34;temp_user\u0026#34;, \u0026#34;temp_password\u0026#34;); System.out.println(\u0026#34;Deleting Post with id 1 from table `Post`:\u0026#34;); deletePost(conn, 1); System.out.println(\u0026#34;Deletion Successful\u0026#34;); } catch (Exception e) { e.printStackTrace(); System.err.println(e.getClass().getName() + \u0026#34;: \u0026#34; + e.getMessage()); System.exit(0); } finally { if (conn != null) { try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } Output:\nDeleting Post with id 1 from table `Post`: Deletion Successful Explanation  The deletePost() method takes Connection as a parameter with the id of the post for deletion. This method also uses PreparedStatement to form a statement and uses executeUpdate() to execute the statement. Here, executeUpadate() will return the count of records affected by the execution of the statement and should be equal to 1(One).  Verification User can verify the above program using the following methods\n Can run the above printAllPost() method to print the Posts, and try to find the Post with Id = 1, if not found then the program worked correctly. Can run the following Query, directly in psql: SELECT * FROM post WHERE id = 1, and you will get the following output.\nmy_database=\u0026gt; SELECT * FROM post WHERE id = 1; id | content | likes ----+---------+------- (0 rows)  \nDifference between executeUpdate() and executeQuery()    executeUpdate() executeQuery()     executeUpdate() is generally used to execute the statement which doesn\u0026rsquo;t return any column (DML Queries like UPDATE query) executeQuery() is used when the execution of statements will return one or more records. (SELECT statements)   executeUpdate() returns an integer which represents the number of records affected by the executed DML query or in case of other queries it returns 0. executeQuery() returns the ResultSet which has the records produced by the query and will have the cursor pointing to the first record.    Difference between Statement and PreparedStatement    Statement PreparedStatement     The Statement is static, and hence will result in the same query in each execution PreparedStatement is dynamic and can be modified by the parameters which can be set dynamically.   The Statement is generally used for one time. The Statement queries will result in the same query every but the output may vary based on the other queries ran in the middle of the two uses of Statement. PreparedStatement can be reused any number of times. Whenever parameters are changed, the query will change. This is faster than creating a new Statement every time.    Features of JDBC  Portability: JDBC code is highly portable as compared to ODBC. Advanced Datatypes Support: Like BLOB, etc. Supports Batch Processing: Batch processing aims to reduce Database Visits thus it optimizes the execution time when the Database is stored in a different system than the server and if there is an inherent latency in connection with the Database. Supports Savepoints: JDBC supports the savepoints which allow users to roll back the changes done till a particular savepoint.  Key Terms  Relational Database: Relational Database stores the data in such a way so that it allows information to get accessed or identified by other related information, thus creating a relationship between them. The most common way to structure a Relational Database is through related tables. RDBMS: Relational Database Management System is the software that enables users to build and manage a relational database. ORDBMS: Object-Relation Database Management System combines the advantages of Object-Oriented Database Models and RDBMS to provide a superior DBMS. It allows the usage of complex data types and types of inheritance. SQL: Structured Query Language is used to access and manage RDBMS. It is famous for its simplicity, usefulness, and similarity with the English language. It provides functionality to\n Query the stored data (DQL - Data Query Language), Define a schema for data (DDL - Data Definition Language), Manipulate data (DML - Data Manipulation Language), and Control over data (DCL - Data Control Language)   "},{"uri":"https://tutswiki.com/r/","title":"R","tags":[],"description":"","content":" R Introduction A complete guide to R programming language.\n"},{"uri":"https://tutswiki.com/pandas-cookbook/chapter2/","title":"Chapter 2 - Selecting and finding desired data","tags":[],"description":"Select data from a pandas dataframe, take slices and get columns","content":" # The usual preamble %matplotlib inline import pandas as pd import matplotlib.pyplot as plt # Make the graphs a bit prettier, and bigger pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) # This is necessary to show lots of columns in pandas 0.12.  # Not necessary in pandas 0.13. pd.set_option(\u0026#39;display.width\u0026#39;, 5000) pd.set_option(\u0026#39;display.max_columns\u0026#39;, 60) plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 5) We\u0026rsquo;re going to use a new dataset here, to demonstrate how to deal with larger datasets. This is a subset of the of 311 service requests from NYC Open Data. Download the file 311-service-requests.csv.\ncomplaints = pd.read_csv(\u0026#39;311-service-requests.csv\u0026#39;) Depending on your pandas version, you might see an error like \u0026quot;DtypeWarning: Columns (8) have mixed types\u0026quot;. This means that it\u0026rsquo;s encountered a problem reading in our data. In this case it almost certainly means that it has columns where some of the entries are strings and some are integers.\nFor now we\u0026rsquo;re going to ignore it and hope we don\u0026rsquo;t run into a problem, but in the long run we\u0026rsquo;d need to investigate this warning.\n   (adsbygoogle = window.adsbygoogle || []).push({});  2.1 What\u0026rsquo;s even in it? (the summary) When you print a large dataframe, it will only show you the first few rows. If you don\u0026rsquo;t see this, don\u0026rsquo;t panic! The default behavior for large dataframes changed between pandas 0.12 and 0.13. Previous to 0.13 it would show you a summary of the dataframe. This includes all the columns, and how many non-null values there are in each column.\ncomplaints Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0   26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1   26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2   26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3   26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4   26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)   5   26592370  10/31/2013 01:46:52 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Banging/Pounding  Club/Bar/Restaurant  11372  37 AVENUE  37 AVENUE  84 STREET  85 STREET  NaN  NaN  BLOCKFACE  JACKSON HEIGHTS  NaN  Precinct  Open  10/31/2013 09:46:52 AM  NaN  03 QUEENS  QUEENS  1016948  212540  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.749989 -73.881988  (40.7499893014072, -73.88198770727831)   6   26595682  10/31/2013 01:46:40 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11419  107-50 109 STREET  109 STREET  107 AVENUE  109 AVENUE  NaN  NaN  ADDRESS  SOUTH RICHMOND HILL  NaN  Precinct  Assigned  10/31/2013 09:46:40 AM  10/31/2013 01:59:51 AM  10 QUEENS  QUEENS  1030919  187622  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681533 -73.831737  (40.68153278675525, -73.83173699701601)   7   26595195  10/31/2013 01:44:19 AM  10/31/2013 01:58:49 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11417  137-09 CROSSBAY BOULEVARD  CROSSBAY BOULEVARD  PITKIN AVENUE  VAN WICKLEN ROAD  NaN  NaN  ADDRESS  OZONE PARK  NaN  Precinct  Closed  10/31/2013 09:44:19 AM  10/31/2013 01:58:49 AM  10 QUEENS  QUEENS  1027776  184076  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.671816 -73.843092  (40.67181584567338, -73.84309181950769)   8   26590540  10/31/2013 01:44:14 AM  10/31/2013 02:28:04 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Talking  Club/Bar/Restaurant  10011  258 WEST 15 STREET  WEST 15 STREET  7 AVENUE  8 AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:44:14 AM  10/31/2013 02:00:56 AM  04 MANHATTAN  MANHATTAN  984031  208847  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.739913 -74.000790  (40.73991339303542, -74.00079028612932)   9   26594392  10/31/2013 01:34:41 AM  10/31/2013 02:23:51 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11225  835 NOSTRAND AVENUE  NOSTRAND AVENUE  UNION STREET  PRESIDENT STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 09:34:41 AM  10/31/2013 01:48:26 AM  09 BROOKLYN  BROOKLYN  997941  182725  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.668204 -73.950648  (40.66820406598287, -73.95064760056546)   10  26595176  10/31/2013 01:25:12 AM  NaN  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  11218  3775 18 AVENUE  18 AVENUE  EAST 9 STREET  EAST 8 STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Open  10/31/2013 09:25:12 AM  NaN  14 BROOKLYN  BROOKLYN  992726  170399  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634378 -73.969462  (40.63437840816299, -73.96946177104543)   11  26591982  10/31/2013 01:24:14 AM  10/31/2013 01:54:39 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10003  187 2 AVENUE  2 AVENUE  EAST 11 STREET  EAST 12 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:24:14 AM  10/31/2013 01:54:39 AM  03 MANHATTAN  MANHATTAN  988110  205533  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.730816 -73.986073  (40.73081644089586, -73.98607265739876)   12  26594169  10/31/2013 01:20:57 AM  10/31/2013 02:12:31 AM  NYPD  New York City Police Department  Illegal Parking  Double Parked Blocking Vehicle  Street/Sidewalk  10029  65 EAST 99 STREET  EAST 99 STREET  MADISON AVENUE  PARK AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:20:57 AM  10/31/2013 01:42:05 AM  11 MANHATTAN  MANHATTAN  997470  226725  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.788974 -73.952259  (40.78897400211689, -73.95225898702977)   13  26594391  10/31/2013 01:20:13 AM  NaN  NYPD  New York City Police Department  Noise - Vehicle  Engine Idling  Street/Sidewalk  10466  NaN  NaN  NaN  NaN  STRANG AVENUE  AMUNDSON AVENUE  INTERSECTION  BRONX  NaN  Precinct  Open  10/31/2013 09:20:13 AM  NaN  12 BRONX  BRONX  1029467  264124  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.891517 -73.836457  (40.89151738488846, -73.83645714593568)   14  26590917  10/31/2013 01:19:54 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Rat Sighting  1-2 Family Mixed Use Building  11219  63 STREET  63 STREET  13 AVENUE  14 AVENUE  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  NaN  Pending  11/30/2013 01:19:54 AM  10/31/2013 01:29:26 AM  10 BROOKLYN  BROOKLYN  984467  167519  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.626477 -73.999218  (40.6264774690411, -73.99921826202639)   15  26591458  10/31/2013 01:14:02 AM  10/31/2013 01:30:34 AM  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  10025  NaN  NaN  NaN  NaN  WEST 99 STREET  BROADWAY  INTERSECTION  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:14:02 AM  10/31/2013 01:30:34 AM  07 MANHATTAN  MANHATTAN  992454  229500  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.796597 -73.970370  (40.7965967075252, -73.97036973473399)   16  26594086  10/31/2013 12:54:03 AM  10/31/2013 02:16:39 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10310  173 CAMPBELL AVENUE  CAMPBELL AVENUE  HENDERSON AVENUE  WINEGAR LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:54:03 AM  10/31/2013 02:07:14 AM  01 STATEN ISLAND  STATEN ISLAND  952013  171076  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636182 -74.116150  (40.63618202176914, -74.1161500428337)   17  26595117  10/31/2013 12:52:46 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Posted Parking Sign Violation  Street/Sidewalk  11236  NaN  NaN  NaN  NaN  ROCKAWAY PARKWAY  SKIDMORE AVENUE  INTERSECTION  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:52:46 AM  NaN  18 BROOKLYN  BROOKLYN  1015289  169710  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.632437 -73.888173  (40.63243692394328, -73.88817263437012)   18  26590389  10/31/2013 12:51:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  NaN  226 42 ST E  42 ST E  CHURCH AVE  SNYDER AVE  NaN  NaN  ADDRESS  NaN  NaN  NaN  Open  NaN  NaN  Unspecified BROOKLYN  BROOKLYN  NaN  NaN  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   19  26594210  10/31/2013 12:46:27 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10033  NaN  NaN  NaN  NaN  WEST 184 STREET  BROADWAY  INTERSECTION  NEW YORK  NaN  Precinct  Assigned  10/31/2013 08:46:27 AM  10/31/2013 01:32:41 AM  12 MANHATTAN  MANHATTAN  1002294  249712  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.852058 -73.934776  (40.85205827756883, -73.93477640780834)   20  26592932  10/31/2013 12:43:47 AM  10/31/2013 12:56:20 AM  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  11216  778 PARK PLACE  PARK PLACE  ROGERS AVENUE  NOSTRAND AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:43:47 AM  10/31/2013 12:56:20 AM  08 BROOKLYN  BROOKLYN  997608  184656  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.673505 -73.951844  (40.67350473678714, -73.95184414979961)   21  26594152  10/31/2013 12:41:17 AM  10/31/2013 01:04:37 AM  NYPD  New York City Police Department  Noise - Commercial  Banging/Pounding  Store/Commercial  10016  155 E 34TH ST  E 34TH ST  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:41:17 AM  10/31/2013 01:04:38 AM  06 MANHATTAN  MANHATTAN  990133  211136  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.746194 -73.978769  (40.74619417253121, -73.97876853124392)   22  26589678  10/31/2013 12:39:55 AM  NaN  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Music  Street/Sidewalk  11419  NaN  NaN  NaN  NaN  112 STREET  ATLANTIC AVENUE  INTERSECTION  SOUTH RICHMOND HILL  NaN  Precinct  Open  10/31/2013 08:39:55 AM  NaN  09 QUEENS  QUEENS  1030314  191578  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.692394 -73.833891  (40.69239424979043, -73.8338912453996)   23  26592304  10/31/2013 12:38:00 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11216  371 TOMPKINS AVENUE  TOMPKINS AVENUE  MADISON STREET  PUTNAM AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Assigned  10/31/2013 08:38:00 AM  10/31/2013 01:16:53 AM  03 BROOKLYN  BROOKLYN  999720  188825  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.684944 -73.944221  (40.6849442562592, -73.94422078036632)   24  26591892  10/31/2013 12:37:16 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  Partial Access  Street/Sidewalk  10305  1496 BAY STREET  BAY STREET  LYMAN AVENUE  SCHOOL ROAD  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Assigned  10/31/2013 08:37:16 AM  10/31/2013 12:52:10 AM  01 STATEN ISLAND  STATEN ISLAND  967283  160518  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.607245 -74.061106  (40.60724493456944, -74.06110566015863)   25  26591573  10/31/2013 12:35:18 AM  10/31/2013 02:41:35 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:35:18 AM  10/31/2013 01:45:17 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)   26  26590509  10/31/2013 12:33:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  NaN  38 ST E  38 ST E  CHURCH AVE  LINDEN BLVD  NaN  NaN  BLOCKFACE  NaN  NaN  NaN  Open  NaN  NaN  Unspecified BROOKLYN  BROOKLYN  NaN  NaN  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   27  26591379  10/31/2013 12:32:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Harboring Bees/Wasps  Bees/Wasps - Not a beekeper  3+ Family Mixed Use Building  10025  501 WEST 110 STREET  WEST 110 STREET  AMSTERDAM AVENUE  BROADWAY  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  11/30/2013 12:32:44 AM  NaN  09 MANHATTAN  MANHATTAN  994143  231888  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.803149 -73.964266  (40.80314938553783, -73.96426608076082)   28  26594085  10/31/2013 12:32:08 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10026  121 WEST 116 STREET  WEST 116 STREET  LENOX AVENUE  7 AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Assigned  10/31/2013 08:32:08 AM  10/31/2013 02:00:57 AM  10 MANHATTAN  MANHATTAN  997947  231613  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.802390 -73.950526  (40.80238950799943, -73.95052644123253)   29  26589201  10/31/2013 12:32:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  10309  295 BAYVIEW AVENUE  BAYVIEW AVENUE  VAIL AVENUE  BAYVIEW LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  NaN  Open  NaN  NaN  03 STATEN ISLAND  STATEN ISLAND  927687  127837  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.517378 -74.203435  (40.517377871705676, -74.20343466779575)   30  26591641  10/31/2013 12:31:17 AM  10/31/2013 02:41:36 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:31:17 AM  10/31/2013 01:43:09 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)   31  26595564  10/31/2013 12:30:36 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11236  AVENUE J  AVENUE J  EAST 80 STREET  EAST 81 STREET  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:30:36 AM  NaN  18 BROOKLYN  BROOKLYN  1008937  170310  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634104 -73.911055  (40.634103775951736, -73.91105541883589)   32  26591378  10/31/2013 12:30:31 AM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  10036  645 10 AVENUE  10 AVENUE  WEST 45 STREET  WEST 46 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  NaN  NaN  04 MANHATTAN  MANHATTAN  985965  216868  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.761929 -73.993809  (40.761928847500016, -73.99380918401052)   33  26593872  10/31/2013 12:29:47 AM  10/31/2013 12:38:29 AM  NYPD  New York City Police Department  Noise - House of Worship  Banging/Pounding  House of Worship  10025  NaN  NaN  NaN  NaN  WEST 99 STREET  AMSTERDAM AVENUE  INTERSECTION  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:29:47 AM  10/31/2013 12:38:29 AM  07 MANHATTAN  MANHATTAN  992846  229279  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.795990 -73.968954  (40.795989749917204, -73.96895423714467)   34  26591420  10/31/2013 12:28:30 AM  10/31/2013 02:06:11 AM  NYPD  New York City Police Department  Homeless Encampment  NaN  Residential Building/House  10025  2754 BROADWAY  BROADWAY  WEST 105 STREET  WEST 106 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:28:30 AM  10/31/2013 02:06:11 AM  07 MANHATTAN  MANHATTAN  993139  231139  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.801095 -73.967894  (40.8010946529914, -73.96789356094007)   35  26592976  10/31/2013 12:23:24 AM  10/31/2013 01:05:41 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11433  173-41 103 ROAD  103 ROAD  173 STREET  177 STREET  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Closed  10/31/2013 08:23:24 AM  10/31/2013 01:05:41 AM  12 QUEENS  QUEENS  1044124  195866  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.704081 -73.784054  (40.70408112125158, -73.78405385422116)   36  26590262  10/31/2013 12:23:00 AM  NaN  DOT  Department of Transportation  Traffic Signal Condition  Controller  NaN  11235  NaN  NaN  NaN  NaN  SHORE BOULEVARD  CASS PLACE  INTERSECTION  BROOKLYN  NaN  NaN  Open  NaN  NaN  15 BROOKLYN  BROOKLYN  997073  151225  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.581744 -73.953836  (40.5817444882428, -73.95383634845487)   37  26589606  10/31/2013 12:20:44 AM  10/31/2013 02:10:24 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11216  826 ST JOHN'S PLACE  ST JOHN'S PLACE  ROGERS AVENUE  NOSTRAND AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:20:44 AM  10/31/2013 02:10:24 AM  08 BROOKLYN  BROOKLYN  997865  183985  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.671663 -73.950919  (40.671662601079895, -73.95091901534035)   38  26592083  10/31/2013 12:20:00 AM  NaN  DOT  Department of Transportation  Traffic Signal Condition  Controller  NaN  11213  NaN  NaN  NaN  NaN  BUFFALO AVENUE  PARK PLACE  INTERSECTION  BROOKLYN  NaN  NaN  Open  NaN  NaN  08 BROOKLYN  BROOKLYN  1004987  184136  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.672063 -73.925244  (40.67206324438088, -73.92524432147842)   39  26593840  10/31/2013 12:19:48 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11379  78-41 68 ROAD  68 ROAD  78 STREET  79 STREET  NaN  NaN  ADDRESS  MIDDLE VILLAGE  NaN  Precinct  Open  10/31/2013 08:19:48 AM  NaN  05 QUEENS  QUEENS  1019062  198120  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.710402 -73.874433  (40.71040190143904, -73.8744325577748)   40  26589646  10/31/2013 12:18:05 AM  10/31/2013 01:26:15 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11101  34-19 STEINWAY STREET  STEINWAY STREET  34 AVENUE  35 AVENUE  NaN  NaN  ADDRESS  LONG ISLAND CITY  NaN  Precinct  Closed  10/31/2013 08:18:05 AM  10/31/2013 01:26:15 AM  01 QUEENS  QUEENS  1006080  214807  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.756245 -73.921205  (40.75624514774764, -73.92120466494264)   41  26593296  10/31/2013 12:16:25 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Food Establishment  Rodents/Insects/Garbage  Restaurant/Bar/Deli/Bakery  10014  12 CHRISTOPHER STREET  CHRISTOPHER STREET  GREENWICH AVENUE  GAY STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  12/07/2013 12:16:25 AM  NaN  02 MANHATTAN  MANHATTAN  984181  206685  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.733979 -74.000249  (40.73397924003587, -74.0002489720853)   42  26590480  10/31/2013 12:15:06 AM  10/31/2013 03:00:20 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  11231  325 COLUMBIA STREET  COLUMBIA STREET  NaN  NaN  NaN  NaN  LATLONG  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:15:06 AM  10/31/2013 02:58:55 AM  06 BROOKLYN  BROOKLYN  982995  187440  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681156 -74.004525  (40.68115617695543, -74.00452481832494)   43  26589626  10/31/2013 12:14:42 AM  10/31/2013 01:39:00 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11234  2192 FLATBUSH AVENUE  FLATBUSH AVENUE  EAST 46 STREET  AVENUE O  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:14:42 AM  10/31/2013 01:39:00 AM  18 BROOKLYN  BROOKLYN  1003628  163910  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.616550 -73.930202  (40.61655032892211, -73.93020153359745)   44  26592898  10/31/2013 12:12:08 AM  10/31/2013 01:13:45 AM  NYPD  New York City Police Department  Noise - Park  Loud Talking  Park/Playground  10457  CROTONA PARK NORTH  CROTONA PARK NORTH  CLINTON AVENUE  PROSPECT AVENUE  NaN  NaN  BLOCKFACE  BRONX  NaN  Precinct  Closed  10/31/2013 08:12:08 AM  10/31/2013 01:13:45 AM  06 BRONX  BRONX  1013947  245819  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.841342 -73.892672  (40.841341641554614, -73.89267161957397)   45  26590446  10/31/2013 12:11:58 AM  10/31/2013 01:54:38 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10459  819 EAST 167 STREET  EAST 167 STREET  UNION AVENUE  PROSPECT AVENUE  NaN  NaN  ADDRESS  BRONX  NaN  Precinct  Closed  10/31/2013 08:11:58 AM  10/31/2013 01:54:38 AM  03 BRONX  BRONX  1011935  240454  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.826623 -73.899965  (40.826622810177874, -73.8999653556452)   46  26595546  10/31/2013 12:09:07 AM  10/31/2013 12:53:12 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10465  4005 EAST TREMONT AVENUE  EAST TREMONT AVENUE  SAMPSON AVENUE  GERBER PLACE  NaN  NaN  ADDRESS  BRONX  NaN  Precinct  Closed  10/31/2013 08:09:07 AM  10/31/2013 12:53:12 AM  10 BRONX  BRONX  1034640  238172  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.820259 -73.817942  (40.820259030934515, -73.81794234356029)   47  26595944  10/31/2013 12:08:47 AM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  10036  NaN  NaN  NaN  NaN  WEST 46 STREET  10 AVENUE  INTERSECTION  NEW YORK  NaN  NaN  Open  11/14/2013 12:08:47 AM  NaN  04 MANHATTAN  MANHATTAN  986020  216961  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.762184 -73.993611  (40.76218409774632, -73.99361062023596)   48  26595084  10/31/2013 12:07:45 AM  10/31/2013 01:43:11 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10014  12 CHRISTOPHER STREET  CHRISTOPHER STREET  GREENWICH AVENUE  GAY STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:07:45 AM  10/31/2013 01:43:11 AM  02 MANHATTAN  MANHATTAN  984181  206685  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.733979 -74.000249  (40.73397924003587, -74.0002489720853)   49  26595553  10/31/2013 12:05:10 AM  10/31/2013 02:43:43 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11225  25 LEFFERTS AVENUE  LEFFERTS AVENUE  WASHINGTON AVENUE  BEDFORD AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:05:10 AM  10/31/2013 01:29:29 AM  09 BROOKLYN  BROOKLYN  995366  180388  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.661793 -73.959934  (40.6617931276793, -73.95993363978067)   50  26594087  10/31/2013 12:04:50 AM  10/31/2013 01:09:38 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  10011  258 WEST 15TH STREET  WEST 15TH STREET  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:04:50 AM  10/31/2013 01:09:38 AM  04 MANHATTAN  MANHATTAN  983789  208891  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.740034 -74.001664  (40.74003415280169, -74.00166357336052)   51  26595572  10/31/2013 12:03:27 AM  NaN  DOT  Department of Transportation  Broken Muni Meter  No Receipt  Street  10003  NaN  NaN  NaN  NaN  EAST 10 STREET  2 AVENUE  INTERSECTION  NEW YORK  NaN  NaN  Open  11/21/2013 12:03:27 AM  NaN  03 MANHATTAN  MANHATTAN  987906  205154  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.729776 -73.986809  (40.72977626532991, -73.98680891976119)   52  26590848  10/31/2013 12:02:01 AM  10/31/2013 01:02:28 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11207  422 WYONA STREET  WYONA STREET  SUTTER AVENUE  BLAKE AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:02:01 AM  10/31/2013 01:02:28 AM  05 BROOKLYN  BROOKLYN  1014188  182855  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.668521 -73.892081  (40.66852085465471, -73.89208096944678)   53  26590413  10/31/2013 12:01:47 AM  10/31/2013 12:39:31 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10002  121 RIVINGTON STREET  RIVINGTON STREET  ESSEX STREET  NORFOLK STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:01:47 AM  10/31/2013 12:39:31 AM  03 MANHATTAN  MANHATTAN  987766  201503  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.719755 -73.987316  (40.71975521311322, -73.98731595609806)   54  26591287  10/31/2013 12:01:45 AM  10/31/2013 12:02:37 AM  HRA  HRA Benefit Card Replacement  Benefit Card Replacement  Medicaid  NYC Street Address  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  Closed  NaN  NaN  0 Unspecified  Unspecified  NaN  NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   55  26595001  10/31/2013 12:01:34 AM  10/31/2013 01:32:43 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  10034  524 WEST 207TH STREET  WEST 207TH STREET  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:01:34 AM  10/31/2013 01:32:43 AM  01 MANHATTAN  MANHATTAN  1006481  254514  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.865229 -73.919626  (40.86522877164924, -73.91962575276823)   56  26591162  10/31/2013 12:01:00 AM  NaN  DSNY  BCC - Brooklyn South  Sanitation Condition  15 Street Cond/Dump-Out/Drop-Off  Street  11231  135 COLUMBIA STREET  COLUMBIA STREET  KANE STREET  IRVING STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  DSNY Garage  Open  NaN  NaN  06 BROOKLYN  BROOKLYN  983797  189648  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.687217 -74.001633  (40.68721671044577, -74.00163340956126)   57  26593459  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  ELECTRIC  ELECTRIC-SUPPLY  RESIDENTIAL BUILDING  11233  199 HOWARD AVENUE  HOWARD AVENUE  BAINBRIDGE STREET  CHAUNCEY STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  03 BROOKLYN  BROOKLYN  1006513  187623  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681631 -73.919732  (40.68163056217252, -73.91973166452124)   58  26592634  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  PLUMBING  BASIN/SINK  RESIDENTIAL BUILDING  11233  199 HOWARD AVENUE  HOWARD AVENUE  BAINBRIDGE STREET  CHAUNCEY STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  03 BROOKLYN  BROOKLYN  1006513  187623  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681631 -73.919732  (40.68163056217252, -73.91973166452124)   59  26591688  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  HEATING  HEAT  RESIDENTIAL BUILDING  10453  150 WEST 179 STREET  WEST 179 STREET  ANDREWS AVENUE  LORING PLACE  NaN  NaN  ADDRESS  BRONX  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  05 BRONX  BRONX  1008161  250940  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.855415 -73.913565  (40.855414830918306, -73.91356461276855)    ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...    111069 rows × 52 columns\n  2.2 Selecting columns and rows To select a column, we index with the name of the column, like this:\ncomplaints[\u0026#39;Complaint Type\u0026#39;] Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent 5 Noise - Commercial 6 Blocked Driveway 7 Noise - Commercial 8 Noise - Commercial 9 Noise - Commercial 10 Noise - House of Worship 11 Noise - Commercial 12 Illegal Parking 13 Noise - Vehicle 14 Rodent ... 111054 Noise - Street/Sidewalk 111055 Noise - Commercial 111056 Street Sign - Missing 111057 Noise 111058 Noise - Commercial 111059 Noise - Street/Sidewalk 111060 Noise 111061 Noise - Commercial 111062 Water System 111063 Water System 111064 Maintenance or Facility 111065 Illegal Parking 111066 Noise - Street/Sidewalk 111067 Noise - Commercial 111068 Blocked Driveway Name: Complaint Type, Length: 111069, dtype: object To get the first 5 rows of a dataframe, we can use a slice: df[:5]. This is a great way to get a sense for what kind of information is in the dataframe \u0026ndash; take a minute to look at the contents and get a feel for this dataset.\ncomplaints[:5] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0  26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1  26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2  26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3  26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4  26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)    5 rows × 52 columns\n  We can combine these to get the first 5 rows of a column:\ncomplaints[\u0026#39;Complaint Type\u0026#39;][:5] Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent Name: Complaint Type, dtype: object and it doesn\u0026rsquo;t matter which direction we do it in:\ncomplaints[\u0026#39;Complaint Type\u0026#39;][:5] Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent Name: Complaint Type, dtype: object 2.3 Selecting multiple columns What if we just want to know the complaint type and the borough, but not the rest of the information? Pandas makes it really easy to select a subset of the columns: just index with list of columns you want.\ncomplaints[[\u0026#39;Complaint Type\u0026#39;, \u0026#39;Borough\u0026#39;]] Output:\n  Complaint Type Borough     0   Noise - Street/Sidewalk  QUEENS   1   Illegal Parking  QUEENS   2   Noise - Commercial  MANHATTAN   3   Noise - Vehicle  MANHATTAN   4   Rodent  MANHATTAN   5   Noise - Commercial  QUEENS   6   Blocked Driveway  QUEENS   7   Noise - Commercial  QUEENS   8   Noise - Commercial  MANHATTAN   9   Noise - Commercial  BROOKLYN   10  Noise - House of Worship  BROOKLYN   11  Noise - Commercial  MANHATTAN   12  Illegal Parking  MANHATTAN   13  Noise - Vehicle  BRONX   14  Rodent  BROOKLYN   15  Noise - House of Worship  MANHATTAN   16  Noise - Street/Sidewalk  STATEN ISLAND   17  Illegal Parking  BROOKLYN   18  Street Light Condition  BROOKLYN   19  Noise - Commercial  MANHATTAN   20  Noise - House of Worship  BROOKLYN   21  Noise - Commercial  MANHATTAN   22  Noise - Vehicle  QUEENS   23  Noise - Commercial  BROOKLYN   24  Blocked Driveway  STATEN ISLAND   25  Noise - Street/Sidewalk  STATEN ISLAND   26  Street Light Condition  BROOKLYN   27  Harboring Bees/Wasps  MANHATTAN   28  Noise - Street/Sidewalk  MANHATTAN   29  Street Light Condition  STATEN ISLAND   30  Blocked Driveway  STATEN ISLAND   31  Noise - Street/Sidewalk  BROOKLYN   32  Taxi Complaint  MANHATTAN   33  Noise - House of Worship  MANHATTAN   34  Homeless Encampment  MANHATTAN   35  Blocked Driveway  QUEENS   36  Traffic Signal Condition  BROOKLYN   37  Noise - Commercial  BROOKLYN   38  Traffic Signal Condition  BROOKLYN   39  Blocked Driveway  QUEENS   40  Noise - Commercial  QUEENS   41  Food Establishment  MANHATTAN   42  Noise - Commercial  BROOKLYN   43  Noise - Commercial  BROOKLYN   44  Noise - Park  BRONX   45  Noise - Street/Sidewalk  BRONX   46  Noise - Commercial  BRONX   47  Taxi Complaint  MANHATTAN   48  Noise - Commercial  MANHATTAN   49  Noise - Street/Sidewalk  BROOKLYN   50  Noise - Commercial  MANHATTAN   51  Broken Muni Meter  MANHATTAN   52  Blocked Driveway  BROOKLYN   53  Noise - Commercial  MANHATTAN   54  Benefit Card Replacement  Unspecified   55  Noise - Commercial  MANHATTAN   56  Sanitation Condition  BROOKLYN   57  ELECTRIC  BROOKLYN   58  PLUMBING  BROOKLYN   59  HEATING  BRONX    ... ...    111069 rows × 2 columns\n  That showed us a summary, and then we can look at the first 10 rows:\ncomplaints[[\u0026#39;Complaint Type\u0026#39;, \u0026#39;Borough\u0026#39;]][:10] Output:\n  Complaint Type Borough     0  Noise - Street/Sidewalk  QUEENS   1  Illegal Parking  QUEENS   2  Noise - Commercial  MANHATTAN   3  Noise - Vehicle  MANHATTAN   4  Rodent  MANHATTAN   5  Noise - Commercial  QUEENS   6  Blocked Driveway  QUEENS   7  Noise - Commercial  QUEENS   8  Noise - Commercial  MANHATTAN   9  Noise - Commercial  BROOKLYN    10 rows × 2 columns\n  2.4 What\u0026rsquo;s the most common complaint type? This is a really easy question to answer! There\u0026rsquo;s a .value_counts() method that we can use:\ncomplaints[\u0026#39;Complaint Type\u0026#39;].value_counts() Output:\nHEATING 14200 GENERAL CONSTRUCTION 7471 Street Light Condition 7117 DOF Literature Request 5797 PLUMBING 5373 PAINT - PLASTER 5149 Blocked Driveway 4590 NONCONST 3998 Street Condition 3473 Illegal Parking 3343 Noise 3321 Traffic Signal Condition 3145 Dirty Conditions 2653 Water System 2636 Noise - Commercial 2578 ... Opinion for the Mayor 2 Window Guard 2 DFTA Literature Request 2 Legal Services Provider Complaint 2 Open Flame Permit 1 Snow 1 Municipal Parking Facility 1 X-Ray Machine/Equipment 1 Stalled Sites 1 DHS Income Savings Requirement 1 Tunnel Condition 1 Highway Sign - Damaged 1 Ferry Permit 1 Trans Fat 1 DWD 1 Length: 165, dtype: int64 If we just wanted the top 10 most common complaints, we can do this:\ncomplaint_counts = complaints[\u0026#39;Complaint Type\u0026#39;].value_counts() complaint_counts[:10] Output:\nHEATING 14200 GENERAL CONSTRUCTION 7471 Street Light Condition 7117 DOF Literature Request 5797 PLUMBING 5373 PAINT - PLASTER 5149 Blocked Driveway 4590 NONCONST 3998 Street Condition 3473 Illegal Parking 3343 dtype: int64 But it gets better! We can plot them!\ncomplaint_counts[:10].plot(kind=\u0026#39;bar\u0026#39;) Output:  \n"},{"uri":"https://tutswiki.com/blog/","title":"Blog","tags":[],"description":"Programming articles on Tuts Wiki. Includes Python, Java, Linux, Clojure, NodeJS, GitHub and more.","content":""},{"uri":"https://tutswiki.com/pandas-cookbook/chapter3/","title":"Chapter 3 - Filtering dataframes","tags":[],"description":"Here we get into serious slicing and dicing and learn how to filter dataframes in complicated ways, really fast.","content":" # The usual preamble %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np # Make the graphs a bit prettier, and bigger pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 5) # This is necessary to show lots of columns in pandas 0.12.  # Not necessary in pandas 0.13. pd.set_option(\u0026#39;display.width\u0026#39;, 5000) pd.set_option(\u0026#39;display.max_columns\u0026#39;, 60) Let\u0026rsquo;s continue with our NYC 311 service requests example.\ncomplaints = pd.read_csv(\u0026#39;311-service-requests.csv\u0026#39;)    (adsbygoogle = window.adsbygoogle || []).push({});  3.1 Selecting only noise complaints I\u0026rsquo;d like to know which borough has the most noise complaints. First, we\u0026rsquo;ll take a look at the data to see what it looks like:\ncomplaints[:5] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0  26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1  26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2  26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3  26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4  26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)    5 rows × 52 columns\n  To get the noise complaints, we need to find the rows where the \u0026ldquo;Complaint Type\u0026rdquo; column is \u0026ldquo;Noise - Street/Sidewalk\u0026rdquo;. I\u0026rsquo;ll show you how to do that, and then explain what\u0026rsquo;s going on.\nnoise_complaints = complaints[complaints[\u0026#39;Complaint Type\u0026#39;] == \u0026#34;Noise - Street/Sidewalk\u0026#34;] noise_complaints[:3] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0   26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   16  26594086  10/31/2013 12:54:03 AM  10/31/2013 02:16:39 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10310  173 CAMPBELL AVENUE  CAMPBELL AVENUE  HENDERSON AVENUE  WINEGAR LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:54:03 AM  10/31/2013 02:07:14 AM  01 STATEN ISLAND  STATEN ISLAND  952013  171076  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636182 -74.116150  (40.63618202176914, -74.1161500428337)   25  26591573  10/31/2013 12:35:18 AM  10/31/2013 02:41:35 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:35:18 AM  10/31/2013 01:45:17 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)    3 rows × 52 columns\n  If you look at noise_complaints, you\u0026rsquo;ll see that this worked, and it only contains complaints with the right complaint type. But how does this work? Let\u0026rsquo;s deconstruct it into two pieces\ncomplaints[\u0026#39;Complaint Type\u0026#39;] == \u0026#34;Noise - Street/Sidewalk\u0026#34; Output:\n0 True 1 False 2 False 3 False 4 False 5 False 6 False 7 False 8 False 9 False 10 False 11 False 12 False 13 False 14 False ... 111054 True 111055 False 111056 False 111057 False 111058 False 111059 True 111060 False 111061 False 111062 False 111063 False 111064 False 111065 False 111066 True 111067 False 111068 False Name: Complaint Type, Length: 111069, dtype: bool This is a big array of Trues and Falses, one for each row in our dataframe. When we index our dataframe with this array, we get just the rows where our boolean array evaluated to True. It\u0026rsquo;s important to note that for row filtering by a boolean array the length of our dataframe\u0026rsquo;s index must be the same length as the boolean array used for filtering.\nYou can also combine more than one condition with the \u0026amp; operator like this:\nis_noise = complaints[\u0026#39;Complaint Type\u0026#39;] == \u0026#34;Noise - Street/Sidewalk\u0026#34; in_brooklyn = complaints[\u0026#39;Borough\u0026#39;] == \u0026#34;BROOKLYN\u0026#34; complaints[is_noise \u0026amp; in_brooklyn][:5] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     31   26595564  10/31/2013 12:30:36 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11236  AVENUE J  AVENUE J  EAST 80 STREET  EAST 81 STREET  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:30:36 AM  NaN  18 BROOKLYN  BROOKLYN  1008937  170310  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634104 -73.911055  (40.634103775951736, -73.91105541883589)   49   26595553  10/31/2013 12:05:10 AM  10/31/2013 02:43:43 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11225  25 LEFFERTS AVENUE  LEFFERTS AVENUE  WASHINGTON AVENUE  BEDFORD AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:05:10 AM  10/31/2013 01:29:29 AM  09 BROOKLYN  BROOKLYN  995366  180388  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.661793 -73.959934  (40.6617931276793, -73.95993363978067)   109  26594653  10/30/2013 11:26:32 PM  10/31/2013 12:18:54 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11222  NaN  NaN  NaN  NaN  DOBBIN STREET  NORMAN STREET  INTERSECTION  BROOKLYN  NaN  Precinct  Closed  10/31/2013 07:26:32 AM  10/31/2013 12:18:54 AM  01 BROOKLYN  BROOKLYN  996925  203271  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.724600 -73.954271  (40.724599563793525, -73.95427134534344)   236  26591992  10/30/2013 10:02:58 PM  10/30/2013 10:23:20 PM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11218  DITMAS AVENUE  DITMAS AVENUE  NaN  NaN  NaN  NaN  LATLONG  BROOKLYN  NaN  Precinct  Closed  10/31/2013 06:02:58 AM  10/30/2013 10:23:20 PM  01 BROOKLYN  BROOKLYN  991895  171051  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636169 -73.972455  (40.63616876563881, -73.97245504682485)   370  26594167  10/30/2013 08:38:25 PM  10/30/2013 10:26:28 PM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11218  126 BEVERLY ROAD  BEVERLY ROAD  CHURCH AVENUE  EAST 2 STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 04:38:25 AM  10/30/2013 10:26:28 PM  12 BROOKLYN  BROOKLYN  990144  173511  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.642922 -73.978762  (40.6429222774404, -73.97876175474585)    5 rows × 52 columns\n  Or if we just wanted a few columns:\ncomplaints[is_noise \u0026amp; in_brooklyn][[\u0026#39;Complaint Type\u0026#39;, \u0026#39;Borough\u0026#39;, \u0026#39;Created Date\u0026#39;, \u0026#39;Descriptor\u0026#39;]][:10] Output:\n  Complaint Type Borough Created Date Descriptor     31   Noise - Street/Sidewalk  BROOKLYN  10/31/2013 12:30:36 AM  Loud Music/Party   49   Noise - Street/Sidewalk  BROOKLYN  10/31/2013 12:05:10 AM  Loud Talking   109   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 11:26:32 PM  Loud Music/Party   236   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 10:02:58 PM  Loud Talking   370   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 08:38:25 PM  Loud Music/Party   378   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 08:32:13 PM  Loud Talking   656   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 06:07:39 PM  Loud Music/Party   1251  Noise - Street/Sidewalk  BROOKLYN  10/30/2013 03:04:51 PM  Loud Talking   5416  Noise - Street/Sidewalk  BROOKLYN  10/29/2013 10:07:02 PM  Loud Talking   5584  Noise - Street/Sidewalk  BROOKLYN  10/29/2013 08:15:59 PM  Loud Music/Party    10 rows × 4 columns\n  3.2 A digression about numpy arrays On the inside, the type of a column is pd.Series\npd.Series([1,2,3]) Output:\n0 1 1 2 2 3 dtype: int64 and pandas Series are internally numpy arrays. If you add .values to the end of any Series, you\u0026rsquo;ll get its internal numpy array\nnp.array([1,2,3]) Output:\narray([1, 2, 3])pd.Series([1,2,3]).values Output:\narray([1, 2, 3]) So this binary-array-selection business is actually something that works with any numpy array:\narr = np.array([1,2,3]) arr != 2 Output:\narray([ True, False, True], dtype=bool)arr[arr != 2] Output:\narray([1, 3]) 3.3 So, which borough has the most noise complaints? is_noise = complaints[\u0026#39;Complaint Type\u0026#39;] == \u0026#34;Noise - Street/Sidewalk\u0026#34; noise_complaints = complaints[is_noise] noise_complaints[\u0026#39;Borough\u0026#39;].value_counts() Output:\nMANHATTAN 917 BROOKLYN 456 BRONX 292 QUEENS 226 STATEN ISLAND 36 Unspecified 1 dtype: int64 It\u0026rsquo;s Manhattan! But what if we wanted to divide by the total number of complaints, to make it make a bit more sense? That would be easy too:\nnoise_complaint_counts = noise_complaints[\u0026#39;Borough\u0026#39;].value_counts() complaint_counts = complaints[\u0026#39;Borough\u0026#39;].value_counts() noise_complaint_counts / complaint_counts Output:\nBRONX 0 BROOKLYN 0 MANHATTAN 0 QUEENS 0 STATEN ISLAND 0 Unspecified 0 dtype: int64 Oops, why was that zero? That\u0026rsquo;s no good. This is because of integer division in Python 2. Let\u0026rsquo;s fix it, by converting complaint_counts into an array of floats.\nnoise_complaint_counts / complaint_counts.astype(float) Output:\nBRONX 0.014833 BROOKLYN 0.013864 MANHATTAN 0.037755 QUEENS 0.010143 STATEN ISLAND 0.007474 Unspecified 0.000141 dtype: float64 Now let\u0026rsquo;s plot it!\n(noise_complaint_counts / complaint_counts.astype(float)).plot(kind=\u0026#39;bar\u0026#39;) Output:\n  So Manhattan really does complain more about noise than the other boroughs! Neat.\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/counting-sort/","title":"Counting Sort","tags":["DSA"],"description":"Counting sort is one of the very few sorting algorithms that can sort elements in almost linear time. It works by counting the frequency of elements, storing it in an auxiliary array, and finding an appropriate place for each element with the help of this count array.","content":" Counting sort is one of the very few sorting algorithms that can sort elements in almost linear time.\nIt works by counting the frequency of elements, storing it in an auxiliary array, and finding an appropriate place for each element with the help of this count array.\nCounting sort works best for small range values, but its linear time complexity doesn\u0026rsquo;t guarantee that it will work faster than other sorting algorithms in all cases, as the length of count array is equal to the max element of the array, which can turn out to be very large at times.\nUnderstanding Counting Sort Algorithm The basic idea of working of this algorithm is counting how many elements are smaller than a particular element, with the help of this we can directly place the element in its correct position without any comparisons.\nFor example, if we know that \u0026lsquo;4\u0026rsquo; elements are less than \u0026lsquo;13\u0026rsquo; in a certain array, then the correct place for 13 will be 5th ( index 4 ).\nCounting Sort Algorithm  Consider an array of size \u0026lsquo;n\u0026rsquo;, having elements in range (0-k) Create an integer array of size \u0026lsquo;k\u0026rsquo; and initialize its all elements to 0 ( We will call this array count) Iterate through each element of the given array, and for each occurrence of an element increment count[element]. For example, if the element is 3 then we will increment count[3], After the count of each element is stored, cumulate the count array values, that is, find the cumulative frequency. This gives us the correct position of elements. Count[i]=Count[i]+Count[i-1] Iterate i from (lengthOfArray-1) to 0, and perform ResultArray[ Count[ Array[i] ] -1 ]=Array[i], after this decrement the count of element in count array. Count[ Array[i] ]\u0026ndash;  Counting Sort Example Consider an array: 7 4 3 4 6 7 2 5\nNow we will create a count array of size 8 (since elements are in range 0-7), whose all elements will be initialzed to 0.\nAfter counting each element the count array will look like:\nNow we will compute the cumulative count, that is, use the previous two values and add them to compute the current value.\nThe count array after computing all cumulative value will look as follows:\nAfter having cumulative count we can compute the correct position of respective elements as follows:-\ni= (lengthOfArray-1 to 0) i= 7 to 0 i=7 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[7]]-1] = Array[7] resultArray[ count[5]-1] = 5 resultArray[4]= 5 count[5]-- count[5]=4 i=6 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[6]]-1] = Array[6] resultArray[ count[2]-1] = 2 resultArray[0]= 2 count[2]-- count[2]=0 i=5 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[5]]-1] = Array[5] resultArray[ count[7]-1] = 7 resultArray[7]= 7 count[7]-- count[7]=7 i=4 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[4]]-1] = Array[4] resultArray[ count[6]-1] = 6 resultArray[5]= 6 count[6]-- count[6]=5 i=3 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[3]]-1] = Array[3] resultArray[ count[4]-1] = 4 resultArray[3]= 4 count[4]-- count[4]=3 i=2 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[2]]-1] = Array[2] resultArray[ count[3]-1] = 3 resultArray[1]= 3 count[3]-- count[3]=1 i=1 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[1]]-1] = Array[1] resultArray[ count[4]-1] = 4 resultArray[2]= 4 count[4]-- count[4]=2 i=0 resultArray [count [Array[i]] - 1] = Array[i] resultArray[ count [Array[0]]-1] = Array[0] resultArray[ count[7]-1] = 7 resultArray[6]= 7 count[7]-- count[7]=5 Now the result array will be the required sorted array, which will look as follows:\nNow that we know how Counting Sort works, let\u0026rsquo;s look at the code for the same.\nCode for Counting Sort public class Sorting { int[] countingSort(int arr[], int k) { int lengthOfArray = arr.length; int count[] = new int[k + 1]; int resultArray[] = new int[lengthOfArray]; // array to store elements in sorted order  // storing count of respective elements \tfor (int i = 0; i \u0026lt; lengthOfArray; i++) { count[arr[i]]++; } // calculating cumulative frequency \tfor (int i = 1; i \u0026lt;= k; i++) { count[i] = count[i] + count[i - 1]; } // placing elements in their correct position \tfor (int i = lengthOfArray - 1; i \u0026gt;= 0; i--) { resultArray[count[arr[i]] - 1] = arr[i]; count[arr[i]]--; } return resultArray; } public static void main(String[] args) { Sorting sort = new Sorting(); // creating object of class Sorting \tint[] arr = { 7, 4, 3, 4, 6, 7, 2, 5 }; arr = sort.countingSort(arr, 7); // method call \tSystem.out.println(\u0026#34;Array after applying Counting sort : \u0026#34; + Arrays.toString(arr)); } } Performance    Case Runtime     Best O(n)   Average O(n+k)   Worst O(n+k)   Auxiliary Space O(n+k)    Here k is the upper limit of the range of elements.\nThe main advantage of counting sort is its linear time complexity which works very well for small range elements.\nBut consider a case where there might be values in thousands. In this case, we will have to create a count array of thousands of size, and also perform thousands of operations, which will make complexity worse than most of the sorting algorithms.\nHence it is advisable to go with counting sort only if the number of elements is small and range of elements is less.\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/quick-sort/","title":"Quick Sort","tags":["DSA"],"description":"Quick sort is one of the most widely used and efficient divide and conquer sorting algorithms. Steps explained with code.","content":" Quick sort is one of the most widely used and efficient sorting algorithms. It is a divide and conquer technique, that means, we divide a problem into sub-problems and then solve them accordingly.\nThis sorting algorithm includes selecting a pivot point and finding its appropriate place in the array by putting elements smaller to it on its left side, and the elements greater than it to its right side. We then create a partition around this correct position of pivot.\nThis process of creating a partition is the backbone of the Quick Sort algorithm.\nIt is to be noted that any element can be selected as the pivot, but we have to proceed accordingly. In our case we will use the first element of Array as pivot element.\nUnderstanding Quick Sort Firstly we can select the pivot point in the following ways:-\n Select the first element as pivot point Select the last element as pivot point Select median element as the pivot point Select any other element as the pivot point  Then we find the index where this pivot should be present in the sorted array.\nThe array is then partitioned around this pivot, and recursive calls are made to the left and right sub-arrays following the same procedure, that is, selecting the pivot point and finding its correct place in the sorted array.\nWe can divide the algorithm into two parts, one will be the responsible for partitioning the array and finding the correct position of the pivot, while the other part will be responsible for placing recursive calls to the left and right sub-arrays accordingly.\nNow let\u0026rsquo;s look at the detailed algorithm.\nPartitioning Algorithm  Select the first element as pivot point Take two integers i \u0026amp; j that point to low and high of the array respectively Increment the value of i until Array[i] is less than pivot Decrement the value of j until Array[j] is greater than pivot Swap Array[i] and Array[j] If i and j pass each other, that is, i \u0026gt; j, swap pivot and Array[j]  Now, this pivot is the correct place for this element in the array.\nQuick Sort Algorithm Steps  Call partition method: partition (Array, low, high) Make recursive call to the left sub-array: quickSort( Array, low, partition-1) Make recursive call to the right sub-array: quickSort( Array, partition+1, high) Continue this until high is greater than low.  Example Consider an Array: 6 4 13 7 5 17 8\nWe select Array[0] =\u0026gt; 6 as the pivot, and take two pointers i and j.\nNow we will increment the value of i until the value at i is less than the pivot, and decrement the value of j until the value at j is greater than the pivot.\ni=0, j=6, pivot=6 (Array[0]) Array[i]=6, which is equal to the pivot i++ i=1 Array[i]=4, which is less than the pivot i++ i=2 Array[i]=13, which is greater than the pivot loop exit value of i = 2 Array[j]=8, which is greater than the pivot j-- j=5 Array[j]=17, which is greater than the pivot j-- j=4 Array[j]=5, which is less than the pivot loop exit value of j = 4 Now we will swap Array[i] and Array[j],that is, Array[2] and Array[4] Now the array will look like\nAgain we will follow tha same procedure until value of i is less than j.\ni=2, j=4, pivot=6 Array[i]=5, which is less than pivot i++ i=3 Array[i]=7, which is greater than pivot loop exit value of i = 3 Array[j]=13, which is greater than pivot j-- j=3 Array[j]=7, which is greater than pivot j-- j=2 Array[j]=5, which is less than pivot loop exit value of j=2 Note that now j \u0026lt; i, so we will exit from loop Now we will swap pivot and Array[j], this makes pivot placed in its correct position with elements smaller in its left side, and elements greater on the right side. The array now looks like:\nNow the array is partitioned around the pivot.\nOnce we get the partitioning done, same process is followed recursively on the left and right sub-arrays, which makes every element placed in their correct positions.\nThe tree will look as follows:-\nNow let\u0026rsquo;s have a look at the code for Quick Sort.\nQuick Sort Code import java.util.Arrays; public class Sorting { int partition(int arr[], int low, int high) { int pivot = arr[low]; // selecting first element as pivot element \tint i = low; int j = high; int temp; // temporary variable for swapping  while (i \u0026lt; j) { while (arr[i] \u0026lt;= pivot) { i++; } while (arr[j] \u0026gt; pivot) { j--; } //swapping \tif (i \u0026lt; j) { temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } arr[low] = arr[j]; arr[j] = pivot; return j; } void quickSort(int arr[], int low, int high) { if (low \u0026lt; high) { int locationOfPivot = partition(arr, low, high); quickSort(arr, low, locationOfPivot - 1); // recursive call to left sub-array \tquickSort(arr, locationOfPivot + 1, high); // recursive call to right sub-array \t} } public static void main(String[] args) { Sorting sort = new Sorting(); // creating object of class Sorting \tint[] arr = { 9, 14, 6, 1, 7, 11, 3, 5 }; sort.quickSort(arr, 0, 7); // method call \tSystem.out.println(\u0026#34;Array after applying Quick Sort: \u0026#34; + Arrays.toString(arr)); } } Performance    Case Runtime     Best O(nlogn)   Average O(nlogn)   Worst O(n^2)   Space complexity O(n)    Since quick sort is a recursive algorithm, therefore it requires a stack for computation and hence the space complexity O(n).\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/heap-sort/","title":"Heap Sort","tags":["DSA"],"description":"Heap sort algorithm is a comparison based sorting technique, it&#39;s basic working is similar to that of insertion sort. It is an in-place sorting algorithm.","content":" Sorting as you might already know is basically an algorithm that is used for arranging elements of a list in a certain order. (Usually ascending or descending). Sorting is one of the most important categories of algorithms, it can significantly reduce the complexity of problems, and is generally used for efficient searching.\nThere are an ample number of sorting algorithms available like the Bubble sort, Selection sort, Insertion sort, Merge sort, Quick sort, Heap sort, Counting sort and more. The type of algorithm to choose depends on the type of problem. (Generally Merge Sort and Quick sort are used.)\nToday we will be discussing Heap Sort. Now before directly jumping to Heap Sort, we must be aware of a few terminologies.\n1. Complete Binary Tree We can define a complete binary tree as a tree in which every level is completely filled except possibly the last, and it is as left as possible.\n2. Binary Heap A binary heap is a complete binary tree in which the value of parent is greater or lesser than its children.\nIf the value of parent is greater than its children, then it’s called max-heap else we call it min-heap.\nWe can represent the heap as a binary tree or an array.\nArray Representation of Heap: As we have already discussed that heap is a type of complete binary tree, therefore it is easy to represent it as an array.\nLet\u0026rsquo;s suppose that the parent node is at index i\nThen the left child will be at (2 * i) + 1\nAnd the right child will be at (2 * i) + 2\nExamples Parent index= 0\nLeft child index= 2*0 + 1 = 1\nRight child index= 2*0 +2=2\nParent index= 1\nLeft child index= 2*1 + 1 = 3\nRight child index= 2*1 +2=4\nParent index= 2\nLeft child index= 2*2 + 1 = 5\nRight child index= 2*2 +2=6\nHeapSort Heap sort algorithm is a comparison based sorting technique, it\u0026rsquo;s basic working is similar to that of insertion sort. It is an in-place sorting algorithm but is not stable, that is, the original order of keys is not maintained.\nUnderstanding the algorithm In the heap sort algorithm, we insert all the elements from the unsorted list or array into a heap. We then create max-heap which brings the largest element at the root of the heap, we exchange this value with the last value and then decrement size of the array. Then, we heapify the first element. This process is continued until there is only one element left in the array.\nJava Code for Heap Sort import java.util.Arrays; public class Sorting { public void heapSort(int arr[]) { int lengthOfArray = arr.length; // creating heap  for (int i = (lengthOfArray - 1) / 2; i \u0026gt;= 0; i--) { heapify(arr, lengthOfArray, i); } // Sorting  for (int i = lengthOfArray - 1; i \u0026gt;= 0; i--) { // Swap the root node with last node  int temp = arr[i]; arr[i] = arr[0]; arr[0] = temp; heapify(arr, i, 0); } } public void heapify(int[] arr, int index, int i) { // Initializing parent and children  int parentIndex = i; int leftChild = (2 * i) + 1; int rightChild = (2 * i) + 2; // comparing the left child value  if (leftChild \u0026lt; index \u0026amp;\u0026amp; arr[leftChild] \u0026gt; arr[parentIndex]) { parentIndex = leftChild; } // comparing the right child value  if (rightChild \u0026lt; index \u0026amp;\u0026amp; arr[rightChild] \u0026gt; arr[parentIndex]) { parentIndex = rightChild; } if (parentIndex != i) { int temp = arr[parentIndex]; arr[parentIndex] = arr[i]; arr[i] = temp; heapify(arr, index, parentIndex); // recursive call  } } // Driver Code  public static void main(String args[]) { Sorting sort = new Sorting(); int[] arr = { 46, 76, 24, 1, 9, 7, 11, 38, 79, 13 }; sort.heapSort(arr); System.out.println(\u0026#34;Array after applying heap sort is \u0026#34; + Arrays.toString(arr)); } } The above program will generate the following output:\nArray after applying heap sort is [1, 7, 9, 11, 13, 24, 38, 46, 76, 79] Performance of Heap Sort  Worst case time complexity: O(nlogn) Best case time complexity: O(nlogn) Average case time performance: O(nlogn) Worst case space complexity: O(n) Auxiliary space complexity: O(1)  "},{"uri":"https://tutswiki.com/data-structures-algorithms/merge-sort/","title":"Merge Sort","tags":["DSA"],"description":"Merge sort is a popular sorting algorithm which uses divide and conquer algorithm. The heart of the Merge Sort is a procedure called Merge.","content":" Merge sort is a popular sorting algorithm which uses divide and conquer algorithm. Consider an array A to be sorted. We divide the array A into two parts and sort them individually. The heart of the Merge Sort is a procedure called Merge. Let\u0026rsquo;s see the Merge procedure first and then we will use Merge as a subroutine to implement Merge Sort algorithm.\nMerge Procedure Here sub-array_1 A[p,q] and sub-array-2 A[q+1,r] are sorted individually and we want to sort them as a whole.\n Len1 = q-p+1 and Len2 = r-q Create two separate lists of sizes of Len1+1 and Len2+1 Copy the two sorted part of the arrays into the lists Add infinity to the end of both lists (the maximum number the data structure can support) Take 3 pointers i, j, k where i \u0026amp; j point to first elements of both the lists and k points to the first element of the original array A   Now we will fill the array A(basically overwrite) in a sorted manner. Compare the elements at i and j. Whichever is smaller (say i), copy its value to kth index in array A and then increment pointers k and i (we considered ele(i) \u0026lt;ele(j)). We repeat the above process till k does not reach the end of the array A. Compare (1,2) and then increment i and k  Compare (5,2) and then increment j and k  Compare (5,4) and then increment j and k  Compare (5,6) and then increment i and k  Compare (7,6) and then increment j and k  Compare (7,9) and then increment i and k  Compare (8,9) and then increment i and k  Compare (inf,9) and then increment j and k  Thus by the end of the Merge procedure the two individually sorted sub_array gets sorted as a whole in the original array A  Psuedo code for Merge Sort procedure Merge(A, p, q, r) { // Consider all arrays as 1-indexed arrays n1 = q - p + 1 n2 = r - p let Left[1.......n1 + 1] and Right[1.........n2 + 1] be two new arrays for (i = 1 to n1) // to copy the first sorted list into array Left \u0026#34;O(N / 2)\u0026#34; { Left[i] = A[p + i - 1] } for (j = 1 to n2) // to copy the second sorted list into array Right \u0026#34;O(N / 2)\u0026#34; { Right[i] = A[q + j] } Left[n1 + 1] = inf Right[n2 + 1] = inf i = 1, j = 1 for (k = p to r) { // \u0026#34;O(N / 2)\u0026#34; if (Left[i] \u0026lt;= Right[j]) { A[k] = Left[j] i++ } else { A[k] = Right[j] j++ } k++ } } Time complexity of merge procedure time taken = O(n/2 + n/2 + n) = O(n)\nSpace complexity of merge procedure: extra space = O(n/2 + n/2) // for two extra arrays Left and Right = O(n)\nNow, we have an array A consisting on n elements. Let T(n) be the time required to sort the array.\nPsuedo code for Merge sort Merge_sort(A, p, r) { if (p \u0026lt; r) { q = floor((p + r) / 2) // find the mid point Merge_sort(A, p, q) // T(n / 2) Merge_sort(A, q + 1, r) // T(n / 2) Merge(A, p, q, r) // T(n) } } Time complexity of merge sort T(n) = time taken to sort n sized array\nWe divided the array into two n/2 sized array and sorted them individually.\nSo, time taken to sort those two sub arrays = T(n/2) + T(n/2) = 2T(n/2)\nMerging the two arrays of size n/2 into an array of size n requires calling of the merge procedure which requires a time of O(n)\nSo, we come to the following recursive equation: T(n) = 2*T(n/2) + O(n)\nUsing Master\u0026rsquo;s theorem, we get T(n) = O(n.logn)\nRecursive tree  Consider an array with 6 elements. The array is 1-indexed, thus p=1 and r=6. Let MS represent the Merge_sort function and Merge as usual represents our Merge function. We see that the total number of function call here is 16. The height of the tree is floor(log2n) + 1. Substitute n = 6, we get four levels as shown  Space complexity of merge sort  We don\u0026rsquo;t consider the space required for variables p, q, r, i, j as they require constant space. The input array is already given. Thus, it is not considered in the extra space required category. The procedure Merge requires two new lists of size n/2 every time it is called on an array of size n. Instead of creating two list space every time, we can use as a global array of O(n) space for copying of elements. It can be used by every call to procedure Merge one by one.\n(1) Thus space required for Merge is O(n) The other extra space used during merge sort is the stack space for recursive function calls. Now in our example, for n=6, the number of function calls was 16 But, do we really need a stack with 16 activation records entries? Turns out, we don\u0026rsquo;t really need a stack of height 16. All the function calls in the same level in the recursion tree ocuupy the same cell of the stack. Thus we have a stack of height equal to the height of the tree.\nHeight of stack = Height of the recursive tree\n For n sized array Number of levels = floor(log2n) + 1 Assume each cell of stack( Activation record) is ok size k.\n (2) Stack Size = (floor(log2n) + 1)*k = O(k*log2n) = O(log2n) From (1) and (2) Space Complexity = n + log2n = O(n)   Note  Merge sort falls under the category of out-of-place sorting algorithm since we need extra space for sorting (extra space is needed in the merge procedure, thus it is not in-place) Merge sort is a stable sorting algorithm as the algorithm used in our pseudo code doesn\u0026rsquo;t change the relative position of same valued elements  "},{"uri":"https://tutswiki.com/data-structures-algorithms/tree-data-structure/","title":"Tree Data Structure","tags":["DSA"],"description":"Linear and Non-Linear data strcutures. Tree represents the nodes connected by edges. We will discuss binary tree or binary search tree specifically.","content":" Data structures are different ways in which we can store or organise data. They can be classified into broadly two types.\n1. Linear Data Structures Data structures in which data is stored in the sequential arrangement are called linear data structures. For example arrays, linked lists, queues etc. Please note that this does not imply storing data in consecutive locations. Data can be stored anywhere in the memory, though the linked list is a linear data structure, it does not store data in contiguous memory locations. By linear data structures, we mean that when we traverse the data structure then we will always get the values in a sequence.\n2. Non-linear Data Structures Non-linear data structure does not follow any sequence for storing data. Here data is stored hierarchically in multiple levels. Here computer memory is used more efficiently than linear data structures. E.g. trees, graphs\nTrees Tree is a hierarchical data structure. In tree data structure, data is stored in the form of nodes. Each node can be connected to zero or multiple nodes through edges. In this data structure, the arrangement of data resembles an inverted tree. It consists of one root node, branches and leaves. The root node is the node in the topmost layer while leaves are the nodes in the bottommost layer. Parent nodes are connected to their children through edges. Any node of a tree can have zero children or multiple children. E.g. in a binary tree any node can have minimum zero and at most two children. A N-ary tree can have minimum zero and at most n children.\nBinary Tree Any node of a binary tree can have 0, 1 or at most 2 children. Every node in a binary tree has a parent node except the root node. Every node can have 0, 1 or 2 children except the leaf nodes which will have 0 children. In a binary tree, every node contains data and pointers to the left and right child nodes respectively.\nBasic terminologies  Root: node at the topmost level of the tree Leaf node: node at the bottommost level of the tree Edge: a line connecting parent node to the child node Parent node: node connected to the given node in the level above Child node: node connected to the given node in the level below Grandparent: parent of the parent node is called a grandparent Siblings: nodes having the same parent node Height: total no. of levels between the root node and the leaf in the bottommost level Depth: length of the path from the root to a particular node Subtree: any node and all its descendants form a subtree of the given tree  Structure of a binary tree node struct tree { int data; struct tree *left; struct tree *right; } Basic Tree Functions  Insert: insert a new node Search: search a node with the given key Delete: delete a node Preorder traversing: Access the root, then traverse the left subtree and later traverse the right subtree Inorder traversing: Traverse left subtree then access root and later traverse right subtree Postorder traversing: Traverse left subtree, then traverse right subtree and visit the root in the end  Binary Search Tree (BST) These are special types of binary trees where the value of every node in the left subtree is less than the value of the root node as well as the value of every node in the right subtree is greater than the value of the root node. Binary search trees are very efficient for performing search operations. Operations like search, insertion and deletion can be done in trees in O(h) time where h is the height of the tree. AVL tree is a special type of binary search tree which maintains the height of a tree equal to log(n). Hence search complexity in case of AVL tree is always log(n).\nThe below image shows an example of a BST.\n"},{"uri":"https://tutswiki.com/pandas-cookbook/chapter4/","title":"Chapter 4 - Groupby and Aggregate","tags":[],"description":"Find out on which weekday people bike the most with groupby and aggregate","content":" %matplotlib inline import pandas as pd import matplotlib.pyplot as plt pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) # Make the graphs a bit prettier plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 5) plt.rcParams[\u0026#39;font.family\u0026#39;] = \u0026#39;sans-serif\u0026#39; # This is necessary to show lots of columns in pandas 0.12.  # Not necessary in pandas 0.13. pd.set_option(\u0026#39;display.width\u0026#39;, 5000) pd.set_option(\u0026#39;display.max_columns\u0026#39;, 60) Okay! We\u0026rsquo;re going back to our bike path dataset here. I live in Montreal, and I was curious about whether we\u0026rsquo;re more of a commuter city or a biking-for-fun city \u0026ndash; do people bike more on weekends, or on weekdays?\n4.1 Adding a \u0026lsquo;weekday\u0026rsquo; column to our dataframe First, we need to load up the data. We\u0026rsquo;ve done this before.\nbikes = pd.read_csv(\u0026#39;bikes.csv\u0026#39;, sep=\u0026#39;;\u0026#39;, encoding=\u0026#39;latin1\u0026#39;, parse_dates=[\u0026#39;Date\u0026#39;], dayfirst=True, index_col=\u0026#39;Date\u0026#39;) bikes[\u0026#39;Berri 1\u0026#39;].plot() Output:  \nNext up, we\u0026rsquo;re just going to look at the Berri bike path. Berri is a street in Montreal, with a pretty important bike path. I use it mostly on my way to the library now, but I used to take it to work sometimes when I worked in Old Montreal. So we\u0026rsquo;re going to create a dataframe with just the Berri bikepath in it\nberri_bikes = bikes[[\u0026#39;Berri 1\u0026#39;]].copy() berri_bikes[:5] Output:\n  Berri 1   Date      2012-01-01  35   2012-01-02  83   2012-01-03  135   2012-01-04  144   2012-01-05  197      Next, we need to add a \u0026lsquo;weekday\u0026rsquo; column. Firstly, we can get the weekday from the index. We haven\u0026rsquo;t talked about indexes yet, but the index is what\u0026rsquo;s on the left on the above dataframe, under \u0026lsquo;Date\u0026rsquo;. It\u0026rsquo;s basically all the days of the year.\nberri_bikes.index Output:\n\u0026lt;class \u0026#39;pandas.tseries.index.DatetimeIndex\u0026#39;\u0026gt; [2012-01-01, ..., 2012-11-05] Length: 310, Freq: None, Timezone: None You can see that actually some of the days are missing \u0026ndash; only 310 days of the year are actually there. Who knows why. Pandas has a bunch of really great time series functionality, so if we wanted to get the day of the month for each row, we could do it like this:\nberri_bikes.index.day Output:\narray([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5], dtype=int32) We actually want the weekday, though:\nberri_bikes.index.weekday Output:\narray([6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0], dtype=int32) These are the days of the week, where 0 is Monday. I found out that 0 was Monday by checking on a calendar.\nNow that we know how to get the weekday, we can add it as a column in our dataframe like this:\nberri_bikes.loc[:,\u0026#39;weekday\u0026#39;] = berri_bikes.index.weekday berri_bikes[:5] Output:\n  Berri 1 weekday   Date       2012-01-01  35  6   2012-01-02  83  0   2012-01-03  135  1   2012-01-04  144  2   2012-01-05  197  3      4.2 Adding up the cyclists by weekday This turns out to be really easy! Dataframes have a .groupby() method that is similar to SQL groupby, if you\u0026rsquo;re familiar with that. I\u0026rsquo;m not going to explain more about it right now \u0026ndash; if you want to to know more, the documentation is really good.\nIn this case, berri_bikes.groupby('weekday').aggregate(sum) means\n \u0026ldquo;Group the rows by weekday and then add up all the values with the same weekday.\u0026rdquo;\n weekday_counts = berri_bikes.groupby(\u0026#39;weekday\u0026#39;).aggregate(sum) weekday_counts Output:\n  Berri 1   weekday      0  134298   1  135305   2  152972   3  160131   4  141771   5  101578   6  99310      It\u0026rsquo;s hard to remember what 0, 1, 2, 3, 4, 5, 6 mean, so we can fix it up and graph it:\nweekday_counts.index = [\u0026#39;Monday\u0026#39;, \u0026#39;Tuesday\u0026#39;, \u0026#39;Wednesday\u0026#39;, \u0026#39;Thursday\u0026#39;, \u0026#39;Friday\u0026#39;, \u0026#39;Saturday\u0026#39;, \u0026#39;Sunday\u0026#39;] weekday_counts Output:\n  Berri 1     Monday  134298   Tuesday  135305   Wednesday  152972   Thursday  160131   Friday  141771   Saturday  101578   Sunday  99310      weekday_counts.plot(kind=\u0026#39;bar\u0026#39;) Output:\n  So it looks like Montrealers are commuter cyclists \u0026ndash; they bike much more during the week. Neat!\n4.3 Putting it together Let\u0026rsquo;s put all that together, to prove how easy it is. 6 lines of magical pandas! If you want to play around, try changing sum to max, numpy.median, or any other function you like.\nbikes = pd.read_csv(\u0026#39;../data/bikes.csv\u0026#39;, sep=\u0026#39;;\u0026#39;, encoding=\u0026#39;latin1\u0026#39;, parse_dates=[\u0026#39;Date\u0026#39;], dayfirst=True, index_col=\u0026#39;Date\u0026#39;) # Add the weekday column berri_bikes = bikes[[\u0026#39;Berri 1\u0026#39;]].copy() berri_bikes.loc[:,\u0026#39;weekday\u0026#39;] = berri_bikes.index.weekday # Add up the number of cyclists by weekday, and plot! weekday_counts = berri_bikes.groupby(\u0026#39;weekday\u0026#39;).aggregate(sum) weekday_counts.index = [\u0026#39;Monday\u0026#39;, \u0026#39;Tuesday\u0026#39;, \u0026#39;Wednesday\u0026#39;, \u0026#39;Thursday\u0026#39;, \u0026#39;Friday\u0026#39;, \u0026#39;Saturday\u0026#39;, \u0026#39;Sunday\u0026#39;] weekday_counts.plot(kind=\u0026#39;bar\u0026#39;) Output:\n  "},{"uri":"https://tutswiki.com/data-structures-algorithms/binary-search-tree/","title":"Binary Search Tree","tags":["DSA"],"description":"Binary Search Trees are special types of binary trees where the value of every node in the left subtree is less than the value of the root node as well as the value of every node in the right subtree is greater than the value of the root node.","content":" Previous article gave the Introduction to Trees and BST. This article will explain some important operations on BST.\nBinary Search Trees are special types of binary trees where the value of every node in the left subtree is less than the value of the root node as well as the value of every node in the right subtree is greater than the value of the root node.\nStructure Structure of a BST node is like following:\nstruct BST { int data; struct BST *left; struct BST *right; }; Some important BST Functions: 1. Creating new node struct BST* createNode(int value) { struct BST* newNode = (struct BST*)malloc(sizeof(struct BST)); newNode-\u0026gt;data = value; newNode-\u0026gt;left = NULL; newNode-\u0026gt;right = NULL; return newNode; } 2. Inserting a new node in the BST struct BST* insert(BST* root,int value) { if(root==NULL) return createNode(value); if(value\u0026lt;root-\u0026gt;data) root-\u0026gt;left = insert(root-\u0026gt;left,value); else root-\u0026gt;right = insert(root-\u0026gt;right,value); return root; } 3. Inorder Traversal void inOrder(struct BST* root) { if(root!=NULL) { inOrder(root-\u0026gt;left); cout\u0026lt;\u0026lt;root-\u0026gt;data\u0026lt;\u0026lt;\u0026#34; \u0026#34;; inOrder(root-\u0026gt;right); } } 4. Preorder Traversal void preOrder(struct BST* root) { if(root!=NULL) { cout\u0026lt;\u0026lt;root-\u0026gt;data\u0026lt;\u0026lt;\u0026#34; \u0026#34;; preOrder(root-\u0026gt;left); preOrder(root-\u0026gt;right); } } 5. Postorder Traversal void postOrder(struct BST* root) { if(root!=NULL) { postOrder(root-\u0026gt;left); postOrder(root-\u0026gt;right); cout\u0026lt;\u0026lt;root-\u0026gt;data\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } 6. Finding the minimum node According to the property of the BST, the value of every node in the left subtree of the current node should be less than the value of the current node. Hence, this property is used while finding the minimum node in a BST. We reach to the leftmost node in the BST which has the minimum possible value in the BST.\nstruct BST* findMinNode(struct BST* root) { struct BST* temp = root; while(temp-\u0026gt;left!=NULL \u0026amp;\u0026amp; temp) temp = temp-\u0026gt;left; return temp; } 7. Deleting a node For deleting a node, first of all, we need to reach that node. The function does this by recursively calling itself within the function. When we are reached to that particular node to be deleted there are 3 possible cases:\n The node is a leaf node The node has a single child The node has 2 children  After deleting a node we must replace it by its inorder successor or inorder predecessor to maintain the property of BST.\nSo if the node belongs to the first 2 cases then we return a pointer to the right subtree or left subtree whichever is available and free that node. Both the left and right subtree pointers are anyways going to be NULL in case of leaf nodes. Hence they will also get deleted.\nIf the node belongs to the third case then we replace its value with the value of the inorder successor. We use findMinNode function which returns the inorder successor. Then we replace the value of the node with the value of inorder successor and delete the inorder successor.\nstruct BST* deleteNode(struct BST* root, int value) { if(root == NULL) return root; if(value\u0026lt;root-\u0026gt;data) root-\u0026gt;left = deleteNode(root-\u0026gt;left,value); else if(value\u0026gt;root-\u0026gt;data) root-\u0026gt;right = deleteNode(root-\u0026gt;right,value); else { if(root-\u0026gt;left==NULL) { struct BST *temp = root-\u0026gt;right; free(root); return temp; } else if(root-\u0026gt;right==NULL) { struct BST *temp = root-\u0026gt;left; free(root); return temp; } struct BST *temp = findMinNode(root-\u0026gt;right); root-\u0026gt;data = temp-\u0026gt;data; root-\u0026gt;right = deleteNode(root-\u0026gt;right,temp-\u0026gt;data); } return root; } Driver program to test the above functions: int main() { struct BST *root = NULL; root = insert(root,50); root = insert(root,100); root = insert(root,30); root = insert(root,70); root = insert(root,40); root = insert(root,60); root = insert(root,20); cout\u0026lt;\u0026lt;\u0026#34;Inorder traversal of initial BST\u0026#34;\u0026lt;\u0026lt;endl; inOrder(root); root = deleteNode(root,40); cout\u0026lt;\u0026lt;\u0026#34;\\nAfter deleting node with value 40\u0026#34;\u0026lt;\u0026lt;endl; inOrder(root); root = deleteNode(root,60); cout\u0026lt;\u0026lt;\u0026#34;\\nAfter deleting node with value 60\u0026#34;\u0026lt;\u0026lt;endl; inOrder(root); return 0; } Output:\nInorder traversal of initial BST 20 30 40 45 50 70 100 120 After deleting node with value 40 20 30 45 50 70 100 120 After deleting node with value 100 20 30 45 50 70 120 Illustration  Initial BST  After deleting node with value 40  After deleting node with value 100   "},{"uri":"https://tutswiki.com/r/average-mean-median-mode/","title":"Calculating Average (Mean, Median, Mode) in R","tags":["R"],"description":"In this article we&#39;ll look at various measures of central tendencies like mean, median, mode and deviation of various sample values from the central point in the distribution.","content":" Statistics is a branch of mathematics that deals with numerical data analysis. Statistics is the study of the collection, analysis, organization, interpretation and presentation of data.\nR language has been an excellent tool for statistical computation of data which includes statistical modeling, data oriented strategies and use of probability distribution and randomization in analysis. R provides various tools and functions to perform the statistical analysis of data with ease.\nIn this article we\u0026rsquo;ll look at various measures of central tendencies like mean, median, mode and deviation of various sample values from the central point in the distribution.\nAverage An average is defined as the number in statistics that measures the central tendency of a given a set of numbers. The various types of averages that will be used in statistical computations are\n Mean Mode Median  Let\u0026rsquo;s have a look at each of these measures of central tendency one by one.\nMean Mean is defined as the sum of all the observations divided by total number of sample observations. The basic formula for the mean of all the observations y1, y2, y3,…yn is given by\nX = y1+ y2 + y3 + ... + yn / n\nLet us consider an example of dataset containing 7 datapoints 3, 5, 7, 9, 11, 13, 15\nThe Mean in this case would be X = (3 + 5 + 7 + 9 + 11 + 13 + 15 ) / 7 = 9\nR provides an in-built function mean() to compute the mean of all values in the dataset. The function takes numeric or integer vector as an argument and returns the result.\n x is a variable that takes the integer vectors using c() function The result of mean(x) is displayed using print  Syntax of mean()  mean(x, na.rm)  Here, x is the numeric/integer vector and na.rm is a Boolean value to remove NA (undefined values) from the given dataset.\nMode Mode is defined as a number in a set of numbers that occurs the most (maximum frequency) in the given dataset.\nLet us consider an example of dataset containing 12 datapoints 2, 4, 6, 4, 9, 5, 4, 2, 4, 4, 2, 6\nIn the above example, 4 has the maximum frequency among the set of numbers. Hence, 4 is the mode of this dataset.\nR does not have an in-built function to compute the mode for a given set of numbers. So, a user defined function is created.\n mode(x) is a user defined function here. The body of the function contains call to unique(x) function to filter out all the duplicate elements and in the next step which.max(tabulate(match(x,u))) is contained in the body to determine the mode of the given dataset. mode(x) function is then invoked and return value is stored in the variable result  Median Median is defined as the middle value among the set of numbers when all the numbers are sorted.\n If the total numbers in dataset are odd, the median will lie at (n+1)/2 location. If the total numbers in dataset are even, the medians will lie at (n/2) and (n/2)+1 locations.  Let us consider an example of dataset containing 9 datapoints 3, 12, 4, 8, 15, 1, 23, 11, 7\n Arrange the numbers in ascending order such that the above example looks like 1, 3, 4, 7, 8, 11, 12, 15, 23. Find the middle value, that will be at (9+1)/2 i.e. at 5th position. Hence, 8 is our median.  R provides an in-built function median() to compute the median or middle value of all values in the dataset. The function takes numeric or integer vector as an argument and returns the median value.\n x is a variable that takes the integer vectors using c() function The result of median(x) is displayed using print  In the next section we\u0026rsquo;ll look at Variance\n"},{"uri":"https://tutswiki.com/r/variance/","title":"Calculating Variance in R","tags":["R"],"description":"In this section we&#39;ll look at how to calculate **Variance in R**. Variance is defined as the sum of squares of deviations of the set of numbers from the mean value.","content":"In this section we\u0026rsquo;ll look at how to calculate Variance in R.\nVariance is defined as the sum of squares of deviations of the set of numbers from the mean value. It is a measure of how far a set of data are dispersed out from their mean value . It is always a non -negative number. It is generally denoted by sigma squared σ2 (sigma squared) Where\n x = Data set values µ = Mean value N = Total number of observations  Let\u0026rsquo;s have a look at an example that we considered for calculation of mean 3, 5, 7, 9, 11, 13, 15.\nThe mean value in this case is (3 + 5 + 7 + 9 + 11 + 13 + 15 ) / 7 = 9\n Squares of the deviations from the mean value µ is calculated as (3-9)^2 = 36, (5-9)^2 = 16, (7-9)^2 = 4, (9-9)^2 = 0, (11-9)^2 = 4, (13-9)^2 = 16, (15-9)^2 = 36 Sum all the squares of deviation and divide it by the number of observations (36 + 16 + 4 + 0 + 4 + 16 + 36 ) / 7 = 16. Hence the variance in this example is 16.  R provides an in-built function var() to compute the variance of all data values in the dataset with respect to the mean. The function takes numeric or integer vector as an argument and returns the result.\n x is a variable that takes the integer vectors using c() function The result of var(x) is displayed using print  In the next section we\u0026rsquo;ll look at Standard Deviation\n"},{"uri":"https://tutswiki.com/r/standard-deviation/","title":"Calculating Standard Deviation in R","tags":["R"],"description":"In this section we&#39;ll look at how to calculate **Standard Deviation in R**.","content":"In this section we\u0026rsquo;ll look at how to calculate Standard Deviation in R.\nIt is a measure of spread of statistical data from its mean or average value. It determines how the data is deviated from its central value. In mathematical terms, it is simply defined as the square root of the variance and is denoted by σ.\n The smallest value of the standard deviation is zero since it cannot be negative. When the data values are very close to each other, then standard deviation is considered to be very low or zero. Similarly when the data values are apart, the standard deviation is high or far from zero.  Let\u0026rsquo;s take the same example that we used in last section to calculate variance\n Dataset = 3, 5, 7, 9, 11, 13, 15. Mean = (3 + 5 + 7 + 9 + 11 + 13 + 15 ) / 7 = 9 Squares of deviation = (3-9)^2 = 36, (5-9)^2 = 16, (7-9)^2 = 4, (9-9)^2 = 0, (11-9)^2 = 4, (13-9)^2 = 16, (15-9)^2 = 36 Variance = (36 + 16 + 4 + 0 + 4 + 16 + 36 ) / 7 = 16 Standard Deviation = σ = square root of 16 = 4  R provides an in-built function sd() to compute the standard deviation of all the data in the dataset from the central point. The function takes numeric or integer vector as an argument and returns the standard deviation value.\n x is a variable that takes the integer vectors using c() function The result of sd(x) is displayed using print  "},{"uri":"https://tutswiki.com/java/generics/","title":"Generics in Java","tags":["Java"],"description":"In simple words, generic methods (or classes) are those methods that are written with single method declaration and can be called or accessed with arguments of different type.","content":" Generics in Java is the facility which is provided to the user to make a single method or single class that can be compatible with any data type like a single method can operate on integer type or string type or even object type. If you are familiar with template in C++, then you can consider generics as a template in Java. In simple words, generic methods(or classes) are those methods that are written with single method declaration and can be called or accessed with arguments of different type.\nLet\u0026rsquo;s understand this with the help of an example. Suppose you have to view an image in your computer using a software. Consider a scenario where a single software can view or edit only single image file format, e.g. software A can view only jpg file, software B can view only png file, software C can view only gif file etc. On the other hand there is only a single software X which can view any type of image files.\nNow if you have the option to choose any one of the software, which one will you choose? It\u0026rsquo;s quite obvious you will choose the software X because having many softwares will be very inefficient and it will consume more memory. In the same way, Generics in Java works. Instead of having different methods and classes for doing the same task, we make only one method or class which will be compatible with any data type as Integer, Double, String, Employee (object type) etc.\nSyntax To create object of generic class or method we follow the below syntax:\nabc obj\u0026lt;Type1,Type2,...,Type n\u0026gt; = new abc\u0026lt;Type1,Type2,...,Type n\u0026gt;()\nHere Type can be replaced with any data type but remember that it cannot have primitive data types like int, double, etc. It should be of object type like Integer, Double, String, Float, Employee etc.\nThere is a general convention for this Type parameter:\n T is used for type. E is used for an element. N is used for numbers. K is used for the key. V is used for the value.  Example public class test { public \u0026lt; E \u0026gt; void showArray(E[] s) { for (E x: s) System.out.println(x); } public static void main(String[] args) { test Obj = new test(); String name[] = new String[] { \u0026#34;Sachin\u0026#34;, \u0026#34;Virat\u0026#34;, \u0026#34;Dhoni\u0026#34; }; Integer roll[] = { 10, 23, 44 }; Obj.showArray(name); Obj.showArray(roll); } } Output:\nSachin Virat Dhoni 10 23 44 In this example, type parameter \u0026lt;E\u0026gt; gets replaced by the string when called with string array and by integer when called by integer array. The type parameter is placed before the return type of the method.\nWe can have more than one parameter type in a method or class. Example:\npublic class test { Public \u0026lt; E, N \u0026gt; void showArray(E x, N y) { System.out.println(x); System.out.println(y); } Public static void main(String[] args) { test obj = new test(); obj.showArray(\u0026#34;John Doe\u0026#34;, 43); } } Output:\nJohn Doe 43 Generics in Class Not only methods, but we can also have classes that can be of a generic type. For example-\nPublic class test \u0026lt; T \u0026gt; { T i; Public void add(T i1) { i = i1; } public T get() { return (i); } } public class TestGen { public static void main(String[] args) { test \u0026lt; Integer \u0026gt; m1 = new test \u0026lt; Integer \u0026gt; (); test \u0026lt; String \u0026gt; m2 = new test \u0026lt; String \u0026gt; (); Integer k = new Integer(199); m1.add(k); m2.add(\u0026#34;John Doe\u0026#34;); System.out.println(\u0026#34;m1 = \u0026#34; + m1.get() + \u0026#34; m2 = \u0026#34; + m2.get()); } } OUTPUT:\nm1 = 199 m2 = ohn Doe We used the same class test to print the two different types of data (String and Integer). Here also, we can have multiple parameters.\nWildcards With wildcard, we can further enhance the usage of generics. We use a wildcard when we want to make a method or class that can accept any kind of data or collection or when we want to impose some restrictions or relaxation on a variable. Let’s take an example:\nvoid test(Collection \u0026lt; Object \u0026gt; c) { for (Object i: c) { System.out.println(i); } } The above code will only accept the type Object for functioning and will not accept any other type of collection. That\u0026rsquo;s the point where wildcard comes to play its role. To make the method acceptable for any data collections, we will use the wildcard \u0026lsquo;?\u0026rsquo;.\nvoid test(Collection\u0026lt;?\u0026gt; c) { for (Object i : c) { System.out.println(i); } } Now the above code will run for any type of collections like Integer, Double, Object, etc.\nUpper-bound Wildcards It provides the freedom to the variable by either making it a specific type or subtype of the specific type. In Java, it is declared by using the ? keyword followed by the extend keyword. Extend keyword is used to provide access to the subtypes of the specific type to the methods. Example list\u0026lt;? extends Number\u0026gt; can be used to extend the type Number along with its subtype (Integer, Double etc.) whereas list\u0026lt;Numbers\u0026gt; restrict user with a list of type number only. Observe the below code for better understanding.\nimport java.util.Array; import java.util.List; public class UpperBoundWildcard { private static Double SumOfElements(ArrayList \u0026lt; ? extends Number \u0026gt; num) { double sum = 0.0; for (Number n: num) { sum = sum + n.doubleValue(); } return sum; } public static void main(String[] args) { List \u0026lt; Integer \u0026gt; ListOfIntegres = Arrays.asList(10, 20, 30); System.out.println(\u0026#34;The sum of the Integer list is = \u0026#34; + SumOfElements(ListOfInteger)); List \u0026lt; Double \u0026gt; ListOfDecimals = Arrays.asList(100.0, 200.0, 300.0); System.out.println(\u0026#34;The sum of the Double list is = \u0026#34; + SumOfElements(ListOfDecimals)); } }  Output:\nThe sum of the Integer list is = 60.0 The sum of the Double list is = 600.0 In the above code, a list of integer and list of double is executed without any error.\nUnbounded Wildcards Unbounded wild cards are used when we don\u0026rsquo;t know what type of list will come as input. In that case, we make our method using list\u0026lt;?\u0026gt; which means that list can be of any type. We use it when we want our method independent from parameter type. Example:\nimport java.util.Arrays; import java.util.List; public class UnboundedWildcard { public static void show(List \u0026lt; ? \u0026gt; list) { for (Object o: list) { System.out.println(o); } } public static void main(String[] args) { List \u0026lt; Integer \u0026gt; ListOfIntegers = Arrays.asList(5, 10, 15); System.out.println(\u0026#34;List of Integer values-\u0026#34;); show(ListOfIntegers); List \u0026lt; String \u0026gt; ListOfString = Arrays.asList(\u0026#34;Virat\u0026#34;, \u0026#34;Dhoni\u0026#34;, \u0026#34;Dravid\u0026#34;); System.out.println(\u0026#34;List of String values\u0026#34;); show(ListOfString); } } Output:\nList of Integer values 5 10 15 List of String values Virat Dhoni Dravid The above code worked well for both types of lists i.e. integer and string. This is the advantage of unbounded wildcard.\nLower-bound Wildcards We use lower bound wildcards when we want to work on a specific type or superclass of that type like integers and its superclass numbers. It is used by declaring wildcard symbol ? followed by the super keyword. Consider the following example:\nimport java.util.Arrays; import java.util.List; public class LowerBoundWildcard { public static void show(List \u0026lt; ? super Integer \u0026gt; list) { for (Object n: list) { System.out.println(n); } } public static void main(String[] args) { List \u0026lt; Integer \u0026gt; ListOfIntegres = Arrays.asList(10, 20, 30); System.out.println(\u0026#34;Showing the Integer values\u0026#34;); show(ListOfIntegres); List \u0026lt; Number \u0026gt; ListOfNumbers = Arrays.asList(100.0, 200.0, 300.0); System.out.println(\u0026#34;Showing the Number values\u0026#34;); show(ListOfNumbers); } } Output:\nShowing the Integer values 10 20 30 Showing the Number values 100.0 200.0 300.0  In the above code, we declared the list type be integers but by using the super keyword we made the method acceptable for superclass of integers. That\u0026rsquo;s why we were able to print double values too because superclass of integers i.e. numbers contains double class.\nAdvantage of Generics  Reduced redundancy: It saves the user from typing the same code multiple times. Makes the code more readable and reduces the complex code into simpler code. Type safety: It provides the user the type safety facility i.e. a user can store only a single type of object. For example - a list can be either of integer type or string type {1,2,3} or {\u0026quot;one\u0026quot;,\u0026quot;two\u0026quot;,\u0026quot;three\u0026quot;} but list like {1 ,2,\u0026quot; three\u0026quot;} is not acceptable. Observe the below code for better understanding.\nList list = new Arraylist(); list.add(100); list.add(\u0026#34;Tuts\u0026#34;); List \u0026lt; Integer \u0026gt; list = new Arraylist \u0026lt; Integer \u0026gt; (); list.add(200); list.add(\u0026#34;Wiki\u0026#34;); //compile time error because type safety not followed Compile time error detection: A user mainly prefer to detect the error at compile time rather than run time because error handling at compile time is far easier than that at run time. And this facility is provided by generics to the user.\n Free from typecasting: While accessing the member of the list, one doesn\u0026rsquo;t need to typecast the object like one used to do before without generics.\nList list = new ArrayList(); list.add(“Tuts”); String s = (String) list.get(0); //typecasting //After generics, we don’t need typecasting. List \u0026lt; String \u0026gt; list = new ArrayList \u0026lt; String \u0026gt; (); list.add(\u0026#34;Wiki\u0026#34;); String s = list.get(0);  "},{"uri":"https://tutswiki.com/pandas-cookbook/chapter5/","title":"Chapter 5 - Web scraping with Pandas","tags":[],"description":"Web scraping with Pandas. Download weather data, clean it and plot temperature by hour of day.","content":" %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 3) plt.rcParams[\u0026#39;font.family\u0026#39;] = \u0026#39;sans-serif\u0026#39; Summary By the end of this chapter, we\u0026rsquo;re going to have downloaded all of Canada\u0026rsquo;s weather data for 2012, and saved it to a CSV.\nWe\u0026rsquo;ll do this by downloading it one month at a time, and then combining all the months together.\nHere\u0026rsquo;s the temperature every hour for 2012! Download weather_2012.csv and try yourself.\nweather_2012_final = pd.read_csv(\u0026#39;weather_2012.csv\u0026#39;, index_col=\u0026#39;Date/Time\u0026#39;) weather_2012_final[\u0026#39;Temp (C)\u0026#39;].plot(figsize=(15, 6)) Output:\n  5.1 Downloading one month of weather data When playing with the cycling data, I wanted temperature and precipitation data to find out if people like biking when it\u0026rsquo;s raining. So I went to the site for Canadian historical weather data, and figured out how to get it automatically.\nHere we\u0026rsquo;re going to get the data for March 2012, and clean it up\nHere\u0026rsquo;s an URL template you can use to get data in Montreal.\nurl_template = \u0026#34;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=csv\u0026amp;stationID=5415\u0026amp;Year={year}\u0026amp;Month={month}\u0026amp;timeframe=1\u0026amp;submit=Download+Data\u0026#34; To get the data for March 2013, we need to format it with month=3, year=2012.\nurl = url_template.format(month=3, year=2012) weather_mar2012 = pd.read_csv(url, index_col=\u0026#39;Date/Time\u0026#39;, parse_dates=True) This is super great! We can just use the same read_csv function as before, and just give it a URL as a filename. Awesome.\nThere are 16 rows of metadata at the top of this CSV, but pandas knows CSVs are weird, so there\u0026rsquo;s a skiprows options. We parse the dates again, and set \u0026lsquo;Date/Time\u0026rsquo; to be the index column. Here\u0026rsquo;s the resulting dataframe.\nweather_mar2012 Output:\n  Year Month Day Time Data Quality Temp (Â°C) Temp Flag Dew Point Temp (Â°C) Dew Point Temp Flag Rel Hum (%) ... Wind Spd Flag Visibility (km) Visibility Flag Stn Press (kPa) Stn Press Flag Hmdx Hmdx Flag Wind Chill Wind Chill Flag Weather   Date/Time                          2012-03-01 00:00:00  2012  3  1  00:00   -5.5 NaN -9.7 NaN  72 ...  NaN  4.0 NaN  100.97 NaN NaN NaN -13  NaN  Snow   2012-03-01 01:00:00  2012  3  1  01:00   -5.7 NaN -8.7 NaN  79 ...  NaN  2.4 NaN  100.87 NaN NaN NaN -13  NaN  Snow   2012-03-01 02:00:00  2012  3  1  02:00   -5.4 NaN -8.3 NaN  80 ...  NaN  4.8 NaN  100.80 NaN NaN NaN -13  NaN  Snow   2012-03-01 03:00:00  2012  3  1  03:00   -4.7 NaN -7.7 NaN  79 ...  NaN  4.0 NaN  100.69 NaN NaN NaN -12  NaN  Snow   2012-03-01 04:00:00  2012  3  1  04:00   -5.4 NaN -7.8 NaN  83 ...  NaN  1.6 NaN  100.62 NaN NaN NaN -14  NaN  Snow   2012-03-01 05:00:00  2012  3  1  05:00   -5.3 NaN -7.9 NaN  82 ...  NaN  2.4 NaN  100.58 NaN NaN NaN -14  NaN  Snow   2012-03-01 06:00:00  2012  3  1  06:00   -5.2 NaN -7.8 NaN  82 ...  NaN  4.0 NaN  100.57 NaN NaN NaN -14  NaN  Snow   2012-03-01 07:00:00  2012  3  1  07:00   -4.9 NaN -7.4 NaN  83 ...  NaN  1.6 NaN  100.59 NaN NaN NaN -13  NaN  Snow   2012-03-01 08:00:00  2012  3  1  08:00   -5.0 NaN -7.5 NaN  83 ...  NaN  1.2 NaN  100.59 NaN NaN NaN -13  NaN  Snow   2012-03-01 09:00:00  2012  3  1  09:00   -4.9 NaN -7.5 NaN  82 ...  NaN  1.6 NaN  100.60 NaN NaN NaN -13  NaN  Snow   2012-03-01 10:00:00  2012  3  1  10:00   -4.7 NaN -7.3 NaN  82 ...  NaN  1.2 NaN  100.62 NaN NaN NaN -13  NaN  Snow   2012-03-01 11:00:00  2012  3  1  11:00   -4.4 NaN -6.8 NaN  83 ...  NaN  1.0 NaN  100.66 NaN NaN NaN -12  NaN  Snow   2012-03-01 12:00:00  2012  3  1  12:00   -4.3 NaN -6.8 NaN  83 ...  NaN  1.2 NaN  100.66 NaN NaN NaN -12  NaN  Snow   2012-03-01 13:00:00  2012  3  1  13:00   -4.3 NaN -6.9 NaN  82 ...  NaN  1.2 NaN  100.65 NaN NaN NaN -12  NaN  Snow   2012-03-01 14:00:00  2012  3  1  14:00   -3.9 NaN -6.6 NaN  81 ...  NaN  1.2 NaN  100.67 NaN NaN NaN -11  NaN  Snow   2012-03-01 15:00:00  2012  3  1  15:00   -3.3 NaN -6.2 NaN  80 ...  NaN  1.6 NaN  100.71 NaN NaN NaN -10  NaN  Snow   2012-03-01 16:00:00  2012  3  1  16:00   -2.7 NaN -5.7 NaN  80 ...  NaN  2.4 NaN  100.74 NaN NaN NaN  -8  NaN  Snow   2012-03-01 17:00:00  2012  3  1  17:00   -2.9 NaN -5.9 NaN  80 ...  NaN  4.0 NaN  100.80 NaN NaN NaN  -9  NaN  Snow   2012-03-01 18:00:00  2012  3  1  18:00   -3.0 NaN -6.0 NaN  80 ...  NaN  4.0 NaN  100.87 NaN NaN NaN  -9  NaN  Snow   2012-03-01 19:00:00  2012  3  1  19:00   -3.6 NaN -6.4 NaN  81 ...  NaN  3.2 NaN  100.93 NaN NaN NaN  -9  NaN  Snow   2012-03-01 20:00:00  2012  3  1  20:00   -3.7 NaN -6.4 NaN  81 ...  NaN  4.8 NaN  100.95 NaN NaN NaN -10  NaN  Snow   2012-03-01 21:00:00  2012  3  1  21:00   -3.9 NaN -6.7 NaN  81 ...  NaN  6.4 NaN  100.98 NaN NaN NaN -10  NaN  Snow   2012-03-01 22:00:00  2012  3  1  22:00   -4.3 NaN -6.9 NaN  82 ...  NaN  2.4 NaN  101.00 NaN NaN NaN -11  NaN  Snow   2012-03-01 23:00:00  2012  3  1  23:00   -4.3 NaN -7.1 NaN  81 ...  NaN  4.8 NaN  101.04 NaN NaN NaN -11  NaN  Snow   2012-03-02 00:00:00  2012  3  2  00:00   -4.8 NaN -7.3 NaN  83 ...  NaN  3.2 NaN  101.04 NaN NaN NaN -12  NaN  Snow   2012-03-02 01:00:00  2012  3  2  01:00   -5.3 NaN -7.9 NaN  82 ...  NaN  4.8 NaN  101.09 NaN NaN NaN -12  NaN  Snow   2012-03-02 02:00:00  2012  3  2  02:00   -5.2 NaN -7.8 NaN  82 ...  NaN  6.4 NaN  101.11 NaN NaN NaN -12  NaN  Snow   2012-03-02 03:00:00  2012  3  2  03:00   -5.5 NaN -7.9 NaN  83 ...  NaN  4.8 NaN  101.15 NaN NaN NaN -12  NaN  Snow   2012-03-02 04:00:00  2012  3  2  04:00   -5.6 NaN -8.2 NaN  82 ...  NaN  6.4 NaN  101.15 NaN NaN NaN -13  NaN  Snow   2012-03-02 05:00:00  2012  3  2  05:00   -5.5 NaN -8.3 NaN  81 ...  NaN  12.9 NaN  101.15 NaN NaN NaN -12  NaN  Snow   ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...   2012-03-30 18:00:00  2012  3  30  18:00    3.9 NaN -7.9 NaN  42 ...  NaN  24.1 NaN  101.26 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 19:00:00  2012  3  30  19:00    3.1 NaN -6.7 NaN  49 ...  NaN  25.0 NaN  101.29 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 20:00:00  2012  3  30  20:00    3.0 NaN -8.4 NaN  43 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 21:00:00  2012  3  30  21:00    1.7 NaN -9.0 NaN  45 ...  NaN  25.0 NaN  101.32 NaN NaN NaN NaN  NaN  Cloudy   2012-03-30 22:00:00  2012  3  30  22:00    0.4 NaN -8.1 NaN  53 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 23:00:00  2012  3  30  23:00    1.4 NaN -7.7 NaN  51 ...  NaN  25.0 NaN  101.34 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 00:00:00  2012  3  31  00:00    1.5 NaN -8.6 NaN  47 ...  NaN  25.0 NaN  101.33 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 01:00:00  2012  3  31  01:00    1.3 NaN -9.6 NaN  44 ...  NaN  25.0 NaN  101.31 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 02:00:00  2012  3  31  02:00    1.3 NaN -9.7 NaN  44 ...  NaN  25.0 NaN  101.29 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 03:00:00  2012  3  31  03:00    0.7 NaN -8.8 NaN  49 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 04:00:00  2012  3  31  04:00   -0.9 NaN -8.5 NaN  56 ...  NaN  25.0 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 05:00:00  2012  3  31  05:00   -0.6 NaN -9.2 NaN  52 ...  NaN  25.0 NaN  101.30 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 06:00:00  2012  3  31  06:00   -0.5 NaN -9.2 NaN  52 ...  NaN  48.3 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 07:00:00  2012  3  31  07:00   -0.3 NaN -9.2 NaN  51 ...  NaN  48.3 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 08:00:00  2012  3  31  08:00    0.7 NaN -8.5 NaN  50 ...  NaN  48.3 NaN  101.33 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 09:00:00  2012  3  31  09:00    1.5 NaN -7.8 NaN  50 ...  NaN  48.3 NaN  101.34 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 10:00:00  2012  3  31  10:00    2.9 NaN -8.1 NaN  44 ...  NaN  48.3 NaN  101.30 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 11:00:00  2012  3  31  11:00    4.6 NaN -9.7 NaN  35 ...  NaN  48.3 NaN  101.24 NaN NaN NaN NaN  NaN  Clear   2012-03-31 12:00:00  2012  3  31  12:00    6.4 NaN -7.1 NaN  37 ...  NaN  48.3 NaN  101.16 NaN NaN NaN NaN  NaN  Clear   2012-03-31 13:00:00  2012  3  31  13:00    6.5 NaN -9.7 NaN  30 ...  NaN  48.3 NaN  101.08 NaN NaN NaN NaN  NaN  Clear   2012-03-31 14:00:00  2012  3  31  14:00    7.7 NaN -8.5 NaN  31 ...  NaN  48.3 NaN  101.01 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 15:00:00  2012  3  31  15:00    7.7 NaN -8.6 NaN  30 ...  NaN  48.3 NaN  100.94 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 16:00:00  2012  3  31  16:00    8.4 NaN -7.7 NaN  31 ...  NaN  48.3 NaN  100.89 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 17:00:00  2012  3  31  17:00    7.9 NaN -8.1 NaN  31 ...  NaN  48.3 NaN  100.88 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 18:00:00  2012  3  31  18:00    7.0 NaN -8.2 NaN  33 ...  NaN  48.3 NaN  100.87 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 19:00:00  2012  3  31  19:00    5.9 NaN -8.0 NaN  36 ...  NaN  25.0 NaN  100.88 NaN NaN NaN NaN  NaN  Clear   2012-03-31 20:00:00  2012  3  31  20:00    4.4 NaN -7.2 NaN  43 ...  NaN  25.0 NaN  100.85 NaN NaN NaN NaN  NaN  Clear   2012-03-31 21:00:00  2012  3  31  21:00    2.6 NaN -6.3 NaN  52 ...  NaN  25.0 NaN  100.86 NaN NaN NaN NaN  NaN  Clear   2012-03-31 22:00:00  2012  3  31  22:00    2.7 NaN -6.7 NaN  50 ...  NaN  25.0 NaN  100.82 NaN NaN NaN NaN  NaN  Clear   2012-03-31 23:00:00  2012  3  31  23:00    1.5 NaN -6.9 NaN  54 ...  NaN  25.0 NaN  100.79 NaN NaN NaN NaN  NaN  Clear    744 rows × 24 columns\n  Let\u0026rsquo;s plot it!\nweather_mar2012[u\u0026#34;Temp (\\xc2\\xb0C)\u0026#34;].plot(figsize=(15, 5)) Output:\n  Notice how it goes up to 25° C in the middle there? That was a big deal. It was March, and people were wearing shorts outside.\nAnd I was out of town and I missed it. Still sad, humans.\nI had to write \u0026lsquo;\\xb0\u0026rsquo; for that degree character °. Let\u0026rsquo;s fix up the columns. We\u0026rsquo;re going to just print them out, copy, and fix them up by hand.\nweather_mar2012.columns = [ u\u0026#39;Year\u0026#39;, u\u0026#39;Month\u0026#39;, u\u0026#39;Day\u0026#39;, u\u0026#39;Time\u0026#39;, u\u0026#39;Data Quality\u0026#39;, u\u0026#39;Temp (C)\u0026#39;, u\u0026#39;Temp Flag\u0026#39;, u\u0026#39;Dew Point Temp (C)\u0026#39;, u\u0026#39;Dew Point Temp Flag\u0026#39;, u\u0026#39;Rel Hum (%)\u0026#39;, u\u0026#39;Rel Hum Flag\u0026#39;, u\u0026#39;Wind Dir (10s deg)\u0026#39;, u\u0026#39;Wind Dir Flag\u0026#39;, u\u0026#39;Wind Spd (km/h)\u0026#39;, u\u0026#39;Wind Spd Flag\u0026#39;, u\u0026#39;Visibility (km)\u0026#39;, u\u0026#39;Visibility Flag\u0026#39;, u\u0026#39;Stn Press (kPa)\u0026#39;, u\u0026#39;Stn Press Flag\u0026#39;, u\u0026#39;Hmdx\u0026#39;, u\u0026#39;Hmdx Flag\u0026#39;, u\u0026#39;Wind Chill\u0026#39;, u\u0026#39;Wind Chill Flag\u0026#39;, u\u0026#39;Weather\u0026#39;] You\u0026rsquo;ll notice in the summary above that there are a few columns which are are either entirely empty or only have a few values in them. Let\u0026rsquo;s get rid of all of those with dropna.\nThe argument axis=1 to dropna means \u0026ldquo;drop columns\u0026rdquo;, not rows\u0026rdquo;, and how='any' means \u0026ldquo;drop the column if any value is null\u0026rdquo;.\nThis is much better now \u0026ndash; we only have columns with real data.\nweather_mar2012 = weather_mar2012.dropna(axis=1, how=\u0026#39;any\u0026#39;) weather_mar2012[:5] Output:\n  Year Month Day Time Data Quality Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time                 2012-03-01 00:00:00  2012  3  1  00:00   -5.5 -9.7  72  24  4.0  100.97  Snow   2012-03-01 01:00:00  2012  3  1  01:00   -5.7 -8.7  79  26  2.4  100.87  Snow   2012-03-01 02:00:00  2012  3  1  02:00   -5.4 -8.3  80  28  4.8  100.80  Snow   2012-03-01 03:00:00  2012  3  1  03:00   -4.7 -7.7  79  28  4.0  100.69  Snow   2012-03-01 04:00:00  2012  3  1  04:00   -5.4 -7.8  83  35  1.6  100.62  Snow      The Year/Month/Day/Time columns are redundant, though, and the Data Quality column doesn\u0026rsquo;t look too useful. Let\u0026rsquo;s get rid of those.\nThe axis=1 argument means \u0026ldquo;Drop columns\u0026rdquo;, like before. The default for operations like dropna and drop is always to operate on rows.\nweather_mar2012 = weather_mar2012.drop([\u0026#39;Year\u0026#39;, \u0026#39;Month\u0026#39;, \u0026#39;Day\u0026#39;, \u0026#39;Time\u0026#39;, \u0026#39;Data Quality\u0026#39;], axis=1) weather_mar2012[:5] Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2012-03-01 00:00:00 -5.5 -9.7  72  24  4.0  100.97  Snow   2012-03-01 01:00:00 -5.7 -8.7  79  26  2.4  100.87  Snow   2012-03-01 02:00:00 -5.4 -8.3  80  28  4.8  100.80  Snow   2012-03-01 03:00:00 -4.7 -7.7  79  28  4.0  100.69  Snow   2012-03-01 04:00:00 -5.4 -7.8  83  35  1.6  100.62  Snow      Awesome! We now only have the relevant columns, and it\u0026rsquo;s much more manageable.\n5.2 Plotting the temperature by hour of day This one\u0026rsquo;s just for fun \u0026ndash; we\u0026rsquo;ve already done this before, using groupby and aggregate! We will learn whether or not it gets colder at night. Well, obviously. But let\u0026rsquo;s do it anyway.\ntemperatures = weather_mar2012[[u\u0026#39;Temp (C)\u0026#39;]].copy() print(temperatures.head) temperatures.loc[:,\u0026#39;Hour\u0026#39;] = weather_mar2012.index.hour temperatures.groupby(\u0026#39;Hour\u0026#39;).aggregate(np.median).plot() Output:\nDate/Time 2012-03-01 00:00:00 -5.5 2012-03-01 01:00:00 -5.7 2012-03-01 02:00:00 -5.4 2012-03-01 03:00:00 -4.7 2012-03-01 04:00:00 -5.4 2012-03-01 05:00:00 -5.3 2012-03-01 06:00:00 -5.2 2012-03-01 07:00:00 -4.9 2012-03-01 08:00:00 -5.0 2012-03-01 09:00:00 -4.9 2012-03-01 10:00:00 -4.7 2012-03-01 11:00:00 -4.4 2012-03-01 12:00:00 -4.3 2012-03-01 13:00:00 -4.3 2012-03-01 14:00:00 -3.9 2012-03-01 15:00:00 -3.3 2012-03-01 16:00:00 -2.7 2012-03-01 17:00:00 -2.9 2012-03-01 18:00:00 -3.0 2012-03-01 19:00:00 -3.6 2012-03-01 20:00:00 -3.7 2012-03-01 21:00:00 -3.9 2012-03-01 22:00:00 -4.3 2012-03-01 23:00:00 -4.3 2012-03-02 00:00:00 -4.8 2012-03-02 01:00:00 -5.3 2012-03-02 02:00:00 -5.2 2012-03-02 03:00:00 -5.5 2012-03-02 04:00:00 -5.6 2012-03-02 05:00:00 -5.5 ... ... 2012-03-30 18:00:00 3.9 2012-03-30 19:00:00 3.1 2012-03-30 20:00:00 3.0 2012-03-30 21:00:00 1.7 2012-03-30 22:00:00 0.4 2012-03-30 23:00:00 1.4 2012-03-31 00:00:00 1.5 2012-03-31 01:00:00 1.3 2012-03-31 02:00:00 1.3 2012-03-31 03:00:00 0.7 2012-03-31 04:00:00 -0.9 2012-03-31 05:00:00 -0.6 2012-03-31 06:00:00 -0.5 2012-03-31 07:00:00 -0.3 2012-03-31 08:00:00 0.7 2012-03-31 09:00:00 1.5 2012-03-31 10:00:00 2.9 2012-03-31 11:00:00 4.6 2012-03-31 12:00:00 6.4 2012-03-31 13:00:00 6.5 2012-03-31 14:00:00 7.7 2012-03-31 15:00:00 7.7 2012-03-31 16:00:00 8.4 2012-03-31 17:00:00 7.9 2012-03-31 18:00:00 7.0 2012-03-31 19:00:00 5.9 2012-03-31 20:00:00 4.4 2012-03-31 21:00:00 2.6 2012-03-31 22:00:00 2.7 2012-03-31 23:00:00 1.5 [744 rows x 1 columns]\u0026gt;   So it looks like the time with the highest median temperature is 2pm. Neat.\n5.3 Getting the whole year of data Okay, so what if we want the data for the whole year? Ideally the API would just let us download that, but I couldn\u0026rsquo;t figure out a way to do that.\nFirst, let\u0026rsquo;s put our work from above into a function that gets the weather for a given month.\nI noticed that there\u0026rsquo;s an irritating bug where when I ask for January, it gives me data for the previous year, so we\u0026rsquo;ll fix that too. [no, really. You can check =)]\ndef download_weather_month(year, month): if month == 1: year += 1 url = url_template.format(year=year, month=month) weather_data = pd.read_csv(url, skiprows=15, index_col=\u0026#39;Date/Time\u0026#39;, parse_dates=True, header=True) weather_data = weather_data.dropna(axis=1) weather_data.columns = [col.replace(\u0026#39;\\xb0\u0026#39;, \u0026#39;\u0026#39;) for col in weather_data.columns] weather_data = weather_data.drop([\u0026#39;Year\u0026#39;, \u0026#39;Day\u0026#39;, \u0026#39;Month\u0026#39;, \u0026#39;Time\u0026#39;, \u0026#39;Data Quality\u0026#39;], axis=1) return weather_data We can test that this function does the right thing:\ndownload_weather_month(2012, 1)[:5] Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2013-01-01 00:00:00 -1.0  -1.7  95  35  6.4  99.89  Snow   2013-01-01 01:00:00 -2.0  -5.1  79  35  16.1  99.93  Mainly Clear   2013-01-01 02:00:00 -2.7  -6.0  78  28  19.3  100.08  Snow   2013-01-01 03:00:00 -5.6 -11.7  62  30  25.0  100.21  Clear   2013-01-01 04:00:00 -7.7 -12.6  68  35  19.3  100.32  Mainly Clear      Now we can get all the months at once. This will take a little while to run.\ndata_by_month = [download_weather_month(2012, i) for i in range(1, 13)] Once we have this, it\u0026rsquo;s easy to concatenate all the dataframes together into one big dataframe using pd.concat. And now we have the whole year\u0026rsquo;s data!\nweather_2012 = pd.concat(data_by_month) weather_2012 Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2013-01-01 00:00:00  -1.0  -1.7  95  35  6.4  99.89  Snow   2013-01-01 01:00:00  -2.0  -5.1  79  35  16.1  99.93  Mainly Clear   2013-01-01 02:00:00  -2.7  -6.0  78  28  19.3  100.08  Snow   2013-01-01 03:00:00  -5.6 -11.7  62  30  25.0  100.21  Clear   2013-01-01 04:00:00  -7.7 -12.6  68  35  19.3  100.32  Mainly Clear   2013-01-01 05:00:00  -9.7 -14.8  66  33  25.0  100.47  Clear   2013-01-01 06:00:00 -11.1 -17.0  62  30  25.0  100.65  Clear   2013-01-01 07:00:00 -12.2 -17.2  66  20  25.0  100.78  Clear   2013-01-01 08:00:00 -13.0 -17.7  68  13  24.1  100.87  Clear   2013-01-01 09:00:00 -13.0 -17.3  70  20  24.1  100.86  Clear   2013-01-01 10:00:00 -12.6 -17.8  65  19  24.1  100.90  Clear   2013-01-01 11:00:00 -12.2 -17.6  64  22  24.1  100.88  Mainly Clear   2013-01-01 12:00:00 -11.8 -17.2  64  26  24.1  100.87  Mainly Clear   2013-01-01 13:00:00 -11.3 -17.4  61  26  24.1  100.83  Mainly Clear   2013-01-01 14:00:00 -11.3 -17.4  61  28  24.1  100.82  Mainly Clear   2013-01-01 15:00:00 -11.4 -17.6  60  30  24.1  100.85  Mainly Clear   2013-01-01 16:00:00 -12.0 -18.0  61  22  24.1  100.81  Mainly Clear   2013-01-01 17:00:00 -13.0 -18.4  64  19  25.0  100.90  Clear   2013-01-01 18:00:00 -13.4 -18.4  66  24  25.0  100.96  Clear   2013-01-01 19:00:00 -14.1 -18.7  68  20  25.0  101.02  Clear   2013-01-01 20:00:00 -14.3 -19.0  67  15  25.0  101.04  Clear   2013-01-01 21:00:00 -14.8 -19.5  67  15  25.0  100.98  Mainly Clear   2013-01-01 22:00:00 -16.3 -20.2  72  7  25.0  100.98  Mostly Cloudy   2013-01-01 23:00:00 -15.4 -19.8  69  11  25.0  100.99  Cloudy   2013-01-02 00:00:00 -14.0 -18.4  69  11  19.3  100.96  Snow   2013-01-02 01:00:00 -14.1 -18.3  70  11  25.0  100.91  Mostly Cloudy   2013-01-02 02:00:00 -14.3 -18.3  72  13  25.0  100.94  Snow Showers   2013-01-02 03:00:00 -14.7 -18.0  76  9  19.3  100.91  Snow   2013-01-02 04:00:00 -14.2 -17.1  79  6  9.7  100.83  Snow   2013-01-02 05:00:00 -14.3 -17.0  80  0  6.4  100.81  Snow   ... ... ... ... ... ... ... ...   2012-12-30 18:00:00 -12.6 -16.0  76  24  25.0  101.36  Mainly Clear   2012-12-30 19:00:00 -13.4 -16.5  77  26  25.0  101.47  Mainly Clear   2012-12-30 20:00:00 -13.8 -16.5  80  24  25.0  101.52  Clear   2012-12-30 21:00:00 -13.8 -16.5  80  20  25.0  101.50  Mainly Clear   2012-12-30 22:00:00 -13.7 -16.3  81  19  25.0  101.54  Mainly Clear   2012-12-30 23:00:00 -12.1 -15.1  78  28  25.0  101.52  Mostly Cloudy   2012-12-31 00:00:00 -11.1 -14.4  77  26  25.0  101.51  Cloudy   2012-12-31 01:00:00 -10.7 -14.0  77  15  25.0  101.50  Cloudy   2012-12-31 02:00:00 -10.1 -13.4  77  9  25.0  101.45  Cloudy   2012-12-31 03:00:00 -11.8 -14.4  81  6  25.0  101.42  Mostly Cloudy   2012-12-31 04:00:00 -10.5 -12.8  83  11  25.0  101.34  Cloudy   2012-12-31 05:00:00 -10.2 -12.4  84  6  25.0  101.28  Cloudy   2012-12-31 06:00:00  -9.7 -11.7  85  4  25.0  101.23  Cloudy   2012-12-31 07:00:00  -9.3 -11.3  85  0  19.3  101.19  Snow Showers   2012-12-31 08:00:00  -8.6 -10.3  87  4  3.2  101.14  Snow Showers   2012-12-31 09:00:00  -8.1  -9.6  89  4  2.4  101.09  Snow   2012-12-31 10:00:00  -7.4  -8.9  89  4  6.4  101.05  Snow,Fog   2012-12-31 11:00:00  -6.7  -7.9  91  9  9.7  100.93  Snow   2012-12-31 12:00:00  -5.8  -7.5  88  4  12.9  100.78  Snow   2012-12-31 13:00:00  -4.6  -6.6  86  4  12.9  100.63  Snow   2012-12-31 14:00:00  -3.4  -5.7  84  6  11.3  100.57  Snow   2012-12-31 15:00:00  -2.3  -4.6  84  9  9.7  100.47  Snow   2012-12-31 16:00:00  -1.4  -4.0  82  13  12.9  100.40  Snow   2012-12-31 17:00:00  -1.1  -3.3  85  19  9.7  100.30  Snow   2012-12-31 18:00:00  -1.3  -3.1  88  17  9.7  100.19  Snow   2012-12-31 19:00:00  0.1  -2.7  81  30  9.7  100.13  Snow   2012-12-31 20:00:00  0.2  -2.4  83  24  9.7  100.03  Snow   2012-12-31 21:00:00  -0.5  -1.5  93  28  4.8  99.95  Snow   2012-12-31 22:00:00  -0.2  -1.8  89  28  9.7  99.91  Snow   2012-12-31 23:00:00  0.0  -2.1  86  30  11.3  99.89  Snow    8784 rows × 7 columns\n  5.4 Saving to a CSV It\u0026rsquo;s slow and unnecessary to download the data every time, so let\u0026rsquo;s save our dataframe for later use!\nweather_2012.to_csv(\u0026#39;weather_2012.csv\u0026#39;) And we\u0026rsquo;re done!\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/binary-search/","title":"Binary Search","tags":["DSA"],"description":"Select a middle element from the array and divide the array in two parts. Left side contains elements which are smaller than the middle element (in case of ascending) and right side contains elements greater than middle element.","content":" Generally if we are asked to perform searching, what we do is take every element one by one and compare with the input value. This in computing terms is called Linear Search.\nBut do we really need to compare to every element in, specially in cases where number of elements are huge?\nLet\u0026rsquo;s take an example of dictionary. Now we know that a dictionary contains thousands of words, and if we are required to search a particular word, we don\u0026rsquo;t go scanning every word in dictionary, but follow a planned approach and get towards the required word.\nBut one thing to note here is that, words in dictionary are organized in alphabetical order, therefore it becomes easy to search a particular word.\nToday we will discuss one such searching technique called Binary Search, it is generally used if the elements provided are pre-sorted either in ascending or descending order.\nUnderstanding the Algorithm What we basically do in this searching technique is select a middle element from the array and divide the array in two parts. Left side contains elements which are smaller than the middle element (in case of ascending) and right side contains elements greater than middle element.\nIf the element to search is smaller than middle element, then we discard the right side and vice versa. And if the middle element is the element that we are finding, then we stop our searching.\nThis process of partitioning the array into two parts and comparing the middle element is continued until we find our element.\nLet\u0026rsquo;s have a deeper look at the algorithm:\n Find middle element in the array. Compare it with the given value. If it matches, return success If the given element is smaller, select the left sub-array and perform the steps from 1. If the given element is greater, select the right sub-array and perform the steps from 1. Repeat the steps until the element is found or only one element is left in the sub-array.  Please note that the above algorithm is applicable for elements stored in ascending order, in case of descending order, if element is smaller than middle element then right sub-array will be selected and vice versa.\nExample Consider the array: 1 3 4 6 7 13 14 Element to search: 13 First we find the middle element from the array, and we get 6.\nNow, 13 is greater than 6, therefore we will select the right sub-array, i.e, 7 13 14\nAgain we perform the search operation on this sub-array, and this time we get 13 as middle element, which is the desired element in our case.\nSo, we saw it only took 2 passes to find the element which would have otherwise taken 6 passes in case of linear search.\nCode public class Searching { boolean binarySearch(int arr[], int n) { int lengthOfArray = arr.length; int mid; // to store middle element  int low = 0; int high = lengthOfArray - 1; while (low \u0026lt;= high) { mid = (low + high) / 2; // we can also do mid = low+(high-low)/2 to avoid overflow in some cases  if (arr[mid] == n) { return true; } else if (arr[mid] \u0026lt; n) { low = mid + 1; } else { high = mid - 1; } } return false; } // Driver Code  public static void main(String args[]) { Searching search = new Searching(); int arr[] = { 1, 3, 4, 6, 8, 13, 15, 24 }; if (search.binarySearch(arr, 45)) { System.out.println(\u0026#34;Element found !\u0026#34;); } else { System.out.println(\u0026#34;Element not found :( \u0026#34;); } } } The above code was iterative, now let\u0026rsquo;s have a look at recursive code for the same.\nRecursive code for Binary Search public class Searching { boolean binarySearch(int arr[], int low, int high, int n) { int mid = (low + high) / 2; if (low \u0026gt; high) { return false; // base condition  } if (arr[mid] == n) { return true; } else if (arr[mid] \u0026lt; n) { return binarySearch(arr, mid + 1, high, n); // recursive call to right sub-array  } else { return binarySearch(arr, low, mid - 1, n); // recursive call to left sub-array  } } // Driver Code  public static void main(String args[]) { Searching search = new Searching(); int arr[] = { 1, 3, 4, 6, 8, 13, 15, 24 }; int lengthOfArray = arr.length; if (search.binarySearch(arr, 0, lengthOfArray - 1, 125)) { System.out.println(\u0026#34;Element found !\u0026#34;); } else { System.out.println(\u0026#34;Element not found :( \u0026#34;); } } } Performance  Worst Case Time Complexity: O(log n) Average Case Time Complexity: O(log n) Best Case Time Complexity: O(1) Space Complexity: O(1)  Important points to note  Binary search can only be applied to sorted elements. If the elements are unsorted, we need to sort them first to apply binary search. Binary search is a type of divide and conquer algorithm. Binary search is better for large amounts of data. There might be cases where linear search would perform better than binary search.  "},{"uri":"https://tutswiki.com/pandas-cookbook/chapter6/","title":"Chapter 6 - String Operations","tags":[],"description":"String Operations in pandas. Using resampling and plotting temperature.","content":" %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) plt.rcParams[\u0026#39;figure.figsize\u0026#39;] = (15, 3) plt.rcParams[\u0026#39;font.family\u0026#39;] = \u0026#39;sans-serif\u0026#39; We saw earlier that pandas is really good at dealing with dates. It is also amazing with strings! We\u0026rsquo;re going to go back to our weather data from Chapter 5, here.\nweather_2012 = pd.read_csv(\u0026#39;weather_2012.csv\u0026#39;, parse_dates=True, index_col=\u0026#39;Date/Time\u0026#39;) weather_2012[:5] Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2012-01-01 00:00:00 -1.8 -3.9  86  4  8.0  101.24  Fog   2012-01-01 01:00:00 -1.8 -3.7  87  4  8.0  101.24  Fog   2012-01-01 02:00:00 -1.8 -3.4  89  7  4.0  101.26  Freezing Drizzle,Fog   2012-01-01 03:00:00 -1.5 -3.2  88  6  4.0  101.27  Freezing Drizzle,Fog   2012-01-01 04:00:00 -1.5 -3.3  88  7  4.8  101.23  Fog    5 rows × 7 columns\n  6.1 String operations You\u0026rsquo;ll see that the \u0026lsquo;Weather\u0026rsquo; column has a text description of the weather that was going on each hour. We\u0026rsquo;ll assume it\u0026rsquo;s snowing if the text description contains \u0026ldquo;Snow\u0026rdquo;.\npandas provides vectorized string functions, to make it easy to operate on columns containing text. There are some great examples in the documentation.\nweather_description = weather_2012[\u0026#39;Weather\u0026#39;] is_snowing = weather_description.str.contains(\u0026#39;Snow\u0026#39;) This gives us a binary vector, which is a bit hard to look at, so we\u0026rsquo;ll plot it.\n# Not super useful is_snowing[:5] Output:\nDate/Time 2012-01-01 00:00:00 False 2012-01-01 01:00:00 False 2012-01-01 02:00:00 False 2012-01-01 03:00:00 False 2012-01-01 04:00:00 False Name: Weather, dtype: bool# More useful! is_snowing.plot() Output:\n  6.2 Use resampling to find the snowiest month If we wanted the median temperature each month, we could use the resample() method like this:\nweather_2012[\u0026#39;Temp (C)\u0026#39;].resample(\u0026#39;M\u0026#39;).apply(np.median).plot(kind=\u0026#39;bar\u0026#39;) Output:\n  Unsurprisingly, July and August are the warmest.\nSo we can think of snowiness as being a bunch of 1s and 0s instead of Trues and Falses:\nis_snowing.astype(float)[:10] Output:\nDate/Time 2012-01-01 00:00:00 0 2012-01-01 01:00:00 0 2012-01-01 02:00:00 0 2012-01-01 03:00:00 0 2012-01-01 04:00:00 0 2012-01-01 05:00:00 0 2012-01-01 06:00:00 0 2012-01-01 07:00:00 0 2012-01-01 08:00:00 0 2012-01-01 09:00:00 0 Name: Weather, dtype: float64 and then use resample to find the percentage of time it was snowing each month\nis_snowing.astype(float).resample(\u0026#39;M\u0026#39;).apply(np.mean) Output:\nDate/Time 2012-01-31 0.240591 2012-02-29 0.162356 2012-03-31 0.087366 2012-04-30 0.015278 2012-05-31 0.000000 2012-06-30 0.000000 2012-07-31 0.000000 2012-08-31 0.000000 2012-09-30 0.000000 2012-10-31 0.000000 2012-11-30 0.038889 2012-12-31 0.251344 Freq: M, Name: Weather, dtype: float64is_snowing.astype(float).resample(\u0026#39;M\u0026#39;).apply(np.mean).plot(kind=\u0026#39;bar\u0026#39;) Output:\n  So now we know! In 2012, December was the snowiest month. Also, this graph suggests something that I feel \u0026ndash; it starts snowing pretty abruptly in November, and then tapers off slowly and takes a long time to stop, with the last snow usually being in April or May.\n6.3 Plotting temperature and snowiness stats together We can also combine these two statistics (temperature, and snowiness) into one dataframe and plot them together:\ntemperature = weather_2012[\u0026#39;Temp (C)\u0026#39;].resample(\u0026#39;M\u0026#39;).apply(np.median) is_snowing = weather_2012[\u0026#39;Weather\u0026#39;].str.contains(\u0026#39;Snow\u0026#39;) snowiness = is_snowing.astype(float).resample(\u0026#39;M\u0026#39;).apply(np.mean) # Name the columns temperature.name = \u0026#34;Temperature\u0026#34; snowiness.name = \u0026#34;Snowiness\u0026#34; We\u0026rsquo;ll use concat again to combine the two statistics into a single dataframe.\nstats = pd.concat([temperature, snowiness], axis=1) stats Output:\n  Temperature Snowiness     2012-01-31  -7.05  0.240591   2012-02-29  -4.10  0.162356   2012-03-31  2.60  0.087366   2012-04-30  6.30  0.015278   2012-05-31  16.05  0.000000   2012-06-30  19.60  0.000000   2012-07-31  22.90  0.000000   2012-08-31  22.20  0.000000   2012-09-30  16.10  0.000000   2012-10-31  11.30  0.000000   2012-11-30  1.05  0.038889   2012-12-31  -2.85  0.251344    12 rows × 2 columns\n  stats.plot(kind=\u0026#39;bar\u0026#39;) Output:\n  Uh, that didn\u0026rsquo;t work so well because the scale was wrong. We can do better by plotting them on two separate graphs:\nstats.plot(kind=\u0026#39;bar\u0026#39;, subplots=True, figsize=(15, 10)) Output:\n  "},{"uri":"https://tutswiki.com/data-structures-algorithms/interpolation-search/","title":"Interpolation Search","tags":["DSA"],"description":"Interpolation search is an optimized version of vanilla Binary Search, which is best suited for uniformly distributed values.","content":" No doubt Binary Search is one the best searching algorithms providing average runtime of O(log n), but still there are cases where more efficient searching could be performed.\nLet\u0026rsquo;s discuss one such scenario.\nConsider two arrays:\nArray 1: 1 3 8 9 12 14 27 29 34 37\nArray 2: 10 20 30 40 50 60 70 80 90 100 110 120\nBoth of the above arrays are sorted in ascending order, but if you observe closely Array 1 is not uniformly distributed, but Array 2 is uniformly distributed, that is, the elements in Array 2 are placed in regular intervals of equal size, in our case 10.\nNow if we want to search element 110 in Array 2, and we go by the normal binary search it will first select the middle element and then reach 110 dividing array into half each time.\nBut we know the array is uniformly distributed, therefore it will be beneficial if we initiate search towards the right side. This is what the Interpolation Search does, it does not always select the middle element but rather selects the element based on the data being searched.\nWhat is Interpolation? Interpolation is a mathematical term, which is basically a process of estimating an intermediate value given some set of discrete values.\nUnderstanding Interpolation Search Interpolation search is an optimized version of vanilla Binary Search, which is best suited for uniformly distributed values.\nAlmost the whole algorithm is similar to that of binary search, except selecting the pivot point or probe which is selected based on the value being searched.\nInterpolation Search Algorithm  Find the probe using the formula Compare it with the data If the value is matched, return success If the value is smaller, select the left sub-array and repeat steps from starting If the value is greater, select the right sub-array and repeat steps from starting Repeat the above steps, if the element is found return success otherwise return failure  The above algorithm works for elements sorted in ascending order, for descending order if the value is greater select the left sub-array and vice versa.\nExample Consider the Array: 7 10 13 17 20 23 26 29 32\nElement to search: 29\nNow we will find the probe using the formula.\nInitially low=0, high=8 mid = 0 + (((8-0)/(32-7))*(29-7)) mid = 6 In this case, we can see that the probe is right-biased as the required value is on the right side of the array, similarly, if the value would have been on the left side of the array, the probe value would have been left-biased.\nlow=7, high=8 mid = 7 + (((8-7)/(32-29))*(29-29)) mid = 7 Here arr[mid] = 29 which is the required element, hence we converge to the result in just two passes.\nNow let\u0026rsquo;s have a look at the Java code for Interpolation Search.\nCode public class Searching { boolean interpolationSearch(int arr[], int n) { int lengthOfArray = arr.length; int mid; // to store middle element  int low = 0; int high = lengthOfArray - 1; while (low \u0026lt;= high) { mid = low + (((high - low) / (arr[high] - arr[low])) * (n - arr[low])); // Formula for finding the pivot point or probe  if (arr[mid] == n) { return true; } else if (arr[mid] \u0026lt; n) { low = mid + 1; } else { high = mid - 1; } } return false; } // Driver Code  public static void main(String args[]) { Searching search = new Searching(); int arr[] = { 12, 16, 25, 37, 46, 55, 76, 86 }; if (search.interpolationSearch(arr, 76)) { System.out.println(\u0026#34;Element found !\u0026#34;); } else { System.out.println(\u0026#34;Element not found :( \u0026#34;); } } } Performance    Case Runtime     Best O(1)   Average O(log(log n))   Worst O(n)   Auxiliary Space O(1)    Interpolation search works best when the values are uniformly distributed and can converge to the result in an average runtime of O(log (log n)).\n"},{"uri":"https://tutswiki.com/data-structures-algorithms/exponential-search/","title":"Exponential Search","tags":["DSA"],"description":"In this algorithm, ultimately we rely on Binary Search for searching, but before that, we finalize a range in which the element we want to search might be present.","content":" The term Exponential generally denotes rapid growth, and mathematically it means increasing in powers.\nFor example:\n Exponential growth of 2: 2^0, 2^1, 2^2, 2^3, 2^4 and so on =\u0026gt; (1, 2, 4, 8, 16,\u0026hellip;..)\n Exponential growth of 3: 3^0, 3^1, 3^2, 3^3, 3^4 and so on =\u0026gt; (1, 3, 9, 27, 81,\u0026hellip;.)\n  We use the same generated numbers ( powers of 2 ) to jump indexes in array and get closer to the index of key.\nIn this algorithm, ultimately we rely on Binary Search for searching, but before that, we finalize a range in which the element we want to search might be present.\nTo finalize this range we follow a certain algorithm, let\u0026rsquo;s have a quick look at the overview of working of this algorithm with the help of an example.\nUnderstanding Exponential Search Consider a sorted Array: 7 12 34 57 65 74 81 88 89 93 100\nElement to search: 93\nWe will start by comparing the first element of the array with the key.\nBut Array[0]=7, which is not equal to 93.\nNow we will take a variable whose value will increase exponentially, hence the name, exponential search.\nint i= 1 ( because 2^0=1)\nNow we will see if Array[i] is less than or equal to the key.\nIf it is, then we will keep on increasing the value exponentially.\ni=i*2\nThis will generate values in powers of 2. ( 2, 4, 8, 16, 32...)\nWe will keep on increasing the value of i, until the condition Array[i]\u0026lt;=key is satisfied.\nSo in the above example, the value of i will reach 8 (in the actual code it will reach 16, then we will divide it by 2) and the sub-array after this index will be selected (including the index of i), and then the binary search will be applied to this range.\nExponential Search Algorithm There are majorly two steps included in implementing exponential search:-\n Finding the range in which the key might lie Applying binary search in this range  Steps  Start with value i=1 Check for condition i \u0026lt; n and Array[i]\u0026lt;=key, where n is the number of elements in the array and key is the element being searched Increment value of i in powers of 2, that is, i=i*2 Keep on incrementing the value of i until the condition is satisfied Apply binary on the range i/2 till the end of Array - binarySearch(Array, i/2, min(i,n-1))  Example Consider the array:- 1 3 5 7 9 11 13 15 17 19\nElement to search: 19\n We will start by comparing Array[0] element to key, which in our case would return false. i will be initialized to 1  Now we will keep on incrementing the value of i until it is less than or equal to the key\nAfter 1st pass i will be 2 - condition satisfied After 2nd pass i will be 4 - condition satisfied After 3rd pass i will be 8 - condition satisfied After 4th pass i will be 16 - CONDITION FAILED Note that the value of i is now 16, and the index 16 is out of range in this case, so to get the previous value of i we will divide it by 2, and call binary search using index of low as i/2.\nNow we call the binary search method.\nbinarySearch(Array, i/2, min(i, n-1), key)\nlow = 8, high = 10 mid = (low + high)/2 = 18/2 = 9 Array[9]=19, which is the required element.\nNow let\u0026rsquo;s have a look at the Java code for the same.\nCode public class Searching { boolean exponentialSearch(int arr[], int key) { int lengthOfArray = arr.length; if (arr[0] == key) { // Checking whether first element is the key  return true; } // Finding the range in which the element might be present  int i = 1; while (i \u0026lt; lengthOfArray \u0026amp;\u0026amp; arr[i] \u0026lt;= key) { i = i * 2; // Exponentially increasing value of i.  } return binarySearch(arr, i / 2, Math.min(i, lengthOfArray - 1), key); // calling binary search method on the sub-array  } boolean binarySearch(int arr[], int low, int high, int key) { int mid; // to store middle element  while (low \u0026lt;= high) { mid = (low + high) / 2; // we can also do mid = low+(high-low)/2 to avoid overflow in some cases  if (arr[mid] == key) { return true; } else if (arr[mid] \u0026lt; key) { low = mid + 1; } else { high = mid - 1; } } return false; } // Driver Code  public static void main(String args[]) { Searching search = new Searching(); int arr[] = { 1, 3, 4, 6, 8, 13, 15, 24 }; if (search.exponentialSearch(arr, 15)) { System.out.println(\u0026#34;Element found !\u0026#34;); } else { System.out.println(\u0026#34;Element not found :( \u0026#34;); } } } Performance    Case Runtime     Best O(1)   Average O(log i)   Worst O(log i)   Auxiliary Space O(1)    Here i is the index of the key.\nExponential search is useful in cases where the arrays are unbounded or of infinite size and can converge to the solution much faster than binary search in these cases.\n"},{"uri":"https://tutswiki.com/pandas-cookbook/chapter7/","title":"Chapter 7 - Cleanup messy data","tags":[],"description":"Cleanup messy data using Pandas. Fix NaN and empty values, convert data types and put it all together.","content":" # The usual preamble import pandas as pd # Make the graphs a bit prettier, and bigger pd.set_option(\u0026#39;display.mpl_style\u0026#39;, \u0026#39;default\u0026#39;) figsize(15, 5) # Always display all the columns pd.set_option(\u0026#39;display.line_width\u0026#39;, 5000) pd.set_option(\u0026#39;display.max_columns\u0026#39;, 60)  One of the main problems with messy data is: how do you know if it\u0026rsquo;s messy or not?\nWe\u0026rsquo;re going to use the NYC 311 service request dataset again here, since it\u0026rsquo;s big and a bit unwieldy.\nrequests = pd.read_csv(\u0026#39;311-service-requests.csv\u0026#39;) 7.1 How do we know if it\u0026rsquo;s messy? We\u0026rsquo;re going to look at a few columns here. I know already that there are some problems with the zip code, so let\u0026rsquo;s look at that first.\nTo get a sense for whether a column has problems, I usually use .unique() to look at all its values. If it\u0026rsquo;s a numeric column, I\u0026rsquo;ll instead plot a histogram to get a sense of the distribution.\nWhen we look at the unique values in \u0026ldquo;Incident Zip\u0026rdquo;, it quickly becomes clear that this is a mess.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Some of the problems:\n Some have been parsed as strings, and some as floats There are nans Some of the zip codes are 29616-0759 or 83 There are some N/A values that pandas didn\u0026rsquo;t recognize, like \u0026lsquo;N/A\u0026rsquo; and \u0026lsquo;NO CLUE\u0026rsquo;  What we can do:\n Normalize \u0026lsquo;N/A\u0026rsquo; and \u0026lsquo;NO CLUE\u0026rsquo; into regular nan values Look at what\u0026rsquo;s up with the 83, and decide what to do Make everything strings\nrequests[\u0026#39;Incident Zip\u0026#39;].unique()  Output:\narray([\u0026#39;11432\u0026#39;, \u0026#39;11378\u0026#39;, \u0026#39;10032\u0026#39;, \u0026#39;10023\u0026#39;, \u0026#39;10027\u0026#39;, \u0026#39;11372\u0026#39;, \u0026#39;11419\u0026#39;, \u0026#39;11417\u0026#39;, \u0026#39;10011\u0026#39;, \u0026#39;11225\u0026#39;, \u0026#39;11218\u0026#39;, \u0026#39;10003\u0026#39;, \u0026#39;10029\u0026#39;, \u0026#39;10466\u0026#39;, \u0026#39;11219\u0026#39;, \u0026#39;10025\u0026#39;, \u0026#39;10310\u0026#39;, \u0026#39;11236\u0026#39;, nan, \u0026#39;10033\u0026#39;, \u0026#39;11216\u0026#39;, \u0026#39;10016\u0026#39;, \u0026#39;10305\u0026#39;, \u0026#39;10312\u0026#39;, \u0026#39;10026\u0026#39;, \u0026#39;10309\u0026#39;, \u0026#39;10036\u0026#39;, \u0026#39;11433\u0026#39;, \u0026#39;11235\u0026#39;, \u0026#39;11213\u0026#39;, \u0026#39;11379\u0026#39;, \u0026#39;11101\u0026#39;, \u0026#39;10014\u0026#39;, \u0026#39;11231\u0026#39;, \u0026#39;11234\u0026#39;, \u0026#39;10457\u0026#39;, \u0026#39;10459\u0026#39;, \u0026#39;10465\u0026#39;, \u0026#39;11207\u0026#39;, \u0026#39;10002\u0026#39;, \u0026#39;10034\u0026#39;, \u0026#39;11233\u0026#39;, \u0026#39;10453\u0026#39;, \u0026#39;10456\u0026#39;, \u0026#39;10469\u0026#39;, \u0026#39;11374\u0026#39;, \u0026#39;11221\u0026#39;, \u0026#39;11421\u0026#39;, \u0026#39;11215\u0026#39;, \u0026#39;10007\u0026#39;, \u0026#39;10019\u0026#39;, \u0026#39;11205\u0026#39;, \u0026#39;11418\u0026#39;, \u0026#39;11369\u0026#39;, \u0026#39;11249\u0026#39;, \u0026#39;10005\u0026#39;, \u0026#39;10009\u0026#39;, \u0026#39;11211\u0026#39;, \u0026#39;11412\u0026#39;, \u0026#39;10458\u0026#39;, \u0026#39;11229\u0026#39;, \u0026#39;10065\u0026#39;, \u0026#39;10030\u0026#39;, \u0026#39;11222\u0026#39;, \u0026#39;10024\u0026#39;, \u0026#39;10013\u0026#39;, \u0026#39;11420\u0026#39;, \u0026#39;11365\u0026#39;, \u0026#39;10012\u0026#39;, \u0026#39;11214\u0026#39;, \u0026#39;11212\u0026#39;, \u0026#39;10022\u0026#39;, \u0026#39;11232\u0026#39;, \u0026#39;11040\u0026#39;, \u0026#39;11226\u0026#39;, \u0026#39;10281\u0026#39;, \u0026#39;11102\u0026#39;, \u0026#39;11208\u0026#39;, \u0026#39;10001\u0026#39;, \u0026#39;10472\u0026#39;, \u0026#39;11414\u0026#39;, \u0026#39;11223\u0026#39;, \u0026#39;10040\u0026#39;, \u0026#39;11220\u0026#39;, \u0026#39;11373\u0026#39;, \u0026#39;11203\u0026#39;, \u0026#39;11691\u0026#39;, \u0026#39;11356\u0026#39;, \u0026#39;10017\u0026#39;, \u0026#39;10452\u0026#39;, \u0026#39;10280\u0026#39;, \u0026#39;11217\u0026#39;, \u0026#39;10031\u0026#39;, \u0026#39;11201\u0026#39;, \u0026#39;11358\u0026#39;, \u0026#39;10128\u0026#39;, \u0026#39;11423\u0026#39;, \u0026#39;10039\u0026#39;, \u0026#39;10010\u0026#39;, \u0026#39;11209\u0026#39;, \u0026#39;10021\u0026#39;, \u0026#39;10037\u0026#39;, \u0026#39;11413\u0026#39;, \u0026#39;11375\u0026#39;, \u0026#39;11238\u0026#39;, \u0026#39;10473\u0026#39;, \u0026#39;11103\u0026#39;, \u0026#39;11354\u0026#39;, \u0026#39;11361\u0026#39;, \u0026#39;11106\u0026#39;, \u0026#39;11385\u0026#39;, \u0026#39;10463\u0026#39;, \u0026#39;10467\u0026#39;, \u0026#39;11204\u0026#39;, \u0026#39;11237\u0026#39;, \u0026#39;11377\u0026#39;, \u0026#39;11364\u0026#39;, \u0026#39;11434\u0026#39;, \u0026#39;11435\u0026#39;, \u0026#39;11210\u0026#39;, \u0026#39;11228\u0026#39;, \u0026#39;11368\u0026#39;, \u0026#39;11694\u0026#39;, \u0026#39;10464\u0026#39;, \u0026#39;11415\u0026#39;, \u0026#39;10314\u0026#39;, \u0026#39;10301\u0026#39;, \u0026#39;10018\u0026#39;, \u0026#39;10038\u0026#39;, \u0026#39;11105\u0026#39;, \u0026#39;11230\u0026#39;, \u0026#39;10468\u0026#39;, \u0026#39;11104\u0026#39;, \u0026#39;10471\u0026#39;, \u0026#39;11416\u0026#39;, \u0026#39;10075\u0026#39;, \u0026#39;11422\u0026#39;, \u0026#39;11355\u0026#39;, \u0026#39;10028\u0026#39;, \u0026#39;10462\u0026#39;, \u0026#39;10306\u0026#39;, \u0026#39;10461\u0026#39;, \u0026#39;11224\u0026#39;, \u0026#39;11429\u0026#39;, \u0026#39;10035\u0026#39;, \u0026#39;11366\u0026#39;, \u0026#39;11362\u0026#39;, \u0026#39;11206\u0026#39;, \u0026#39;10460\u0026#39;, \u0026#39;10304\u0026#39;, \u0026#39;11360\u0026#39;, \u0026#39;11411\u0026#39;, \u0026#39;10455\u0026#39;, \u0026#39;10475\u0026#39;, \u0026#39;10069\u0026#39;, \u0026#39;10303\u0026#39;, \u0026#39;10308\u0026#39;, \u0026#39;10302\u0026#39;, \u0026#39;11357\u0026#39;, \u0026#39;10470\u0026#39;, \u0026#39;11367\u0026#39;, \u0026#39;11370\u0026#39;, \u0026#39;10454\u0026#39;, \u0026#39;10451\u0026#39;, \u0026#39;11436\u0026#39;, \u0026#39;11426\u0026#39;, \u0026#39;10153\u0026#39;, \u0026#39;11004\u0026#39;, \u0026#39;11428\u0026#39;, \u0026#39;11427\u0026#39;, \u0026#39;11001\u0026#39;, \u0026#39;11363\u0026#39;, \u0026#39;10004\u0026#39;, \u0026#39;10474\u0026#39;, \u0026#39;11430\u0026#39;, \u0026#39;10000\u0026#39;, \u0026#39;10307\u0026#39;, \u0026#39;11239\u0026#39;, \u0026#39;10119\u0026#39;, \u0026#39;10006\u0026#39;, \u0026#39;10048\u0026#39;, \u0026#39;11697\u0026#39;, \u0026#39;11692\u0026#39;, \u0026#39;11693\u0026#39;, \u0026#39;10573\u0026#39;, \u0026#39;00083\u0026#39;, \u0026#39;N/A\u0026#39;, \u0026#39;11559\u0026#39;, \u0026#39;10020\u0026#39;, \u0026#39;77056\u0026#39;, \u0026#39;11776\u0026#39;, \u0026#39;70711\u0026#39;, \u0026#39;10282\u0026#39;, \u0026#39;11109\u0026#39;, \u0026#39;10044\u0026#39;, \u0026#39;02061\u0026#39;, \u0026#39;77092-2016\u0026#39;, \u0026#39;14225\u0026#39;, \u0026#39;55164-0737\u0026#39;, \u0026#39;19711\u0026#39;, \u0026#39;07306\u0026#39;, \u0026#39;000000\u0026#39;, \u0026#39;NO CLUE\u0026#39;, \u0026#39;90010\u0026#39;, \u0026#39;11747\u0026#39;, \u0026#39;23541\u0026#39;, \u0026#39;11788\u0026#39;, \u0026#39;07604\u0026#39;, 11203.0, 11217.0, 11418.0, 11385.0, 10461.0, 11236.0, 11223.0, 11205.0, 11218.0, 11207.0, 11234.0, 11215.0, 11420.0, 10463.0, 11213.0, 10014.0, 10011.0, 11421.0, 10029.0, 11433.0, 11691.0, 11358.0, 11368.0, 11435.0, 11105.0, 11101.0, 11419.0, 11355.0, 11377.0, 11210.0, 10040.0, 11208.0, 11228.0, 10022.0, 11412.0, 11209.0, 11211.0, 10018.0, 11106.0, 11411.0, 11369.0, 11237.0, 11230.0, 11364.0, 10472.0, 10304.0, 10075.0, 11249.0, 10032.0, 10016.0, 10308.0, 10306.0, 11225.0, 10006.0, 10009.0, 10033.0, 11104.0, 11204.0, 11415.0, 11103.0, 10025.0, 10473.0, 10469.0, 10466.0, 11231.0, 11226.0, 10455.0, 10019.0, 11220.0, 10459.0, 10002.0, 10039.0, 10026.0, 10456.0, 10468.0, 11222.0, 11214.0, 10470.0, 11373.0, 11367.0, 10302.0, 11235.0, 10128.0, 10467.0, 10458.0, 10475.0, 10474.0, 10453.0, 10462.0, 10301.0, 10065.0, 11221.0, 10031.0, 10460.0, 11233.0, 10457.0, 10027.0, 10003.0, 10038.0, 11212.0, 11206.0, 11434.0, 11361.0, 10036.0, 10005.0, 10024.0, 10035.0, 10030.0, 11694.0, 10454.0, 11238.0, 10464.0, 10452.0, 10037.0, 11219.0, 11216.0, 10028.0, 10451.0, 11229.0, 11422.0, 10010.0, 10023.0, 11692.0, 11374.0, 11416.0, 11429.0, 10314.0, 11375.0, 11354.0, 11378.0, 10303.0, 10034.0, 11423.0, 11372.0, 11379.0, 10007.0, 11201.0, 10001.0, 10310.0, 10012.0, 10309.0, 11232.0, 11224.0, 10305.0, 11693.0, 10021.0, 11432.0, 11356.0, 11436.0, 10312.0, 11413.0, 11102.0, 10013.0, 10471.0, 11417.0, 11365.0, 11004.0, 11366.0, 11362.0, 11370.0, 11357.0, 10112.0, 10017.0, 10307.0, 10465.0, 11426.0, 10280.0, 11430.0, 11109.0, 11414.0, 11788.0, 11563.0, 11580.0, 11427.0, 11428.0, 10000.0, 7087.0, 10282.0, 11360.0, 10020.0, 83.0, 10004.0, 11363.0, 11042.0, 11040.0, 7093.0, 10119.0, 11501.0, 92123.0, 11697.0, 0.0, 11575.0, 11239.0, 7109.0, 11797.0, 10069.0, \u0026#39;10803\u0026#39;, \u0026#39;11716\u0026#39;, \u0026#39;11722\u0026#39;, \u0026#39;11549-3650\u0026#39;, \u0026#39;10162\u0026#39;, \u0026#39;92123\u0026#39;, \u0026#39;23502\u0026#39;, \u0026#39;11518\u0026#39;, \u0026#39;07020\u0026#39;, \u0026#39;08807\u0026#39;, \u0026#39;11577\u0026#39;, \u0026#39;07114\u0026#39;, \u0026#39;11003\u0026#39;, \u0026#39;07201\u0026#39;, \u0026#39;11563\u0026#39;, \u0026#39;61702\u0026#39;, \u0026#39;10103\u0026#39;, \u0026#39;29616-0759\u0026#39;, \u0026#39;35209-3114\u0026#39;, \u0026#39;11520\u0026#39;, \u0026#39;11735\u0026#39;, \u0026#39;10129\u0026#39;, \u0026#39;11005\u0026#39;, \u0026#39;41042\u0026#39;, \u0026#39;11590\u0026#39;, 6901.0, 7208.0, 10048.0, 11530.0, 13221.0, 10954.0, 11001.0, 11735.0, 10103.0, 10044.0, 7114.0, 11111.0, 10107.0], dtype=object) 7.2 Fixing the nan values and string/float confusion We can pass a na_values option to pd.read_csv to clean this up a little bit. We can also specify that the type of Incident Zip is a string, not a float.\nna_values = [\u0026#39;NO CLUE\u0026#39;, \u0026#39;N/A\u0026#39;, \u0026#39;0\u0026#39;] requests = pd.read_csv(\u0026#39;../data/311-service-requests.csv\u0026#39;, na_values=na_values, dtype={\u0026#39;Incident Zip\u0026#39;: str}) requests[\u0026#39;Incident Zip\u0026#39;].unique() Output:\narray([\u0026#39;11432\u0026#39;, \u0026#39;11378\u0026#39;, \u0026#39;10032\u0026#39;, \u0026#39;10023\u0026#39;, \u0026#39;10027\u0026#39;, \u0026#39;11372\u0026#39;, \u0026#39;11419\u0026#39;, \u0026#39;11417\u0026#39;, \u0026#39;10011\u0026#39;, \u0026#39;11225\u0026#39;, \u0026#39;11218\u0026#39;, \u0026#39;10003\u0026#39;, \u0026#39;10029\u0026#39;, \u0026#39;10466\u0026#39;, \u0026#39;11219\u0026#39;, \u0026#39;10025\u0026#39;, \u0026#39;10310\u0026#39;, \u0026#39;11236\u0026#39;, nan, \u0026#39;10033\u0026#39;, \u0026#39;11216\u0026#39;, \u0026#39;10016\u0026#39;, \u0026#39;10305\u0026#39;, \u0026#39;10312\u0026#39;, \u0026#39;10026\u0026#39;, \u0026#39;10309\u0026#39;, \u0026#39;10036\u0026#39;, \u0026#39;11433\u0026#39;, \u0026#39;11235\u0026#39;, \u0026#39;11213\u0026#39;, \u0026#39;11379\u0026#39;, \u0026#39;11101\u0026#39;, \u0026#39;10014\u0026#39;, \u0026#39;11231\u0026#39;, \u0026#39;11234\u0026#39;, \u0026#39;10457\u0026#39;, \u0026#39;10459\u0026#39;, \u0026#39;10465\u0026#39;, \u0026#39;11207\u0026#39;, \u0026#39;10002\u0026#39;, \u0026#39;10034\u0026#39;, \u0026#39;11233\u0026#39;, \u0026#39;10453\u0026#39;, \u0026#39;10456\u0026#39;, \u0026#39;10469\u0026#39;, \u0026#39;11374\u0026#39;, \u0026#39;11221\u0026#39;, \u0026#39;11421\u0026#39;, \u0026#39;11215\u0026#39;, \u0026#39;10007\u0026#39;, \u0026#39;10019\u0026#39;, \u0026#39;11205\u0026#39;, \u0026#39;11418\u0026#39;, \u0026#39;11369\u0026#39;, \u0026#39;11249\u0026#39;, \u0026#39;10005\u0026#39;, \u0026#39;10009\u0026#39;, \u0026#39;11211\u0026#39;, \u0026#39;11412\u0026#39;, \u0026#39;10458\u0026#39;, \u0026#39;11229\u0026#39;, \u0026#39;10065\u0026#39;, \u0026#39;10030\u0026#39;, \u0026#39;11222\u0026#39;, \u0026#39;10024\u0026#39;, \u0026#39;10013\u0026#39;, \u0026#39;11420\u0026#39;, \u0026#39;11365\u0026#39;, \u0026#39;10012\u0026#39;, \u0026#39;11214\u0026#39;, \u0026#39;11212\u0026#39;, \u0026#39;10022\u0026#39;, \u0026#39;11232\u0026#39;, \u0026#39;11040\u0026#39;, \u0026#39;11226\u0026#39;, \u0026#39;10281\u0026#39;, \u0026#39;11102\u0026#39;, \u0026#39;11208\u0026#39;, \u0026#39;10001\u0026#39;, \u0026#39;10472\u0026#39;, \u0026#39;11414\u0026#39;, \u0026#39;11223\u0026#39;, \u0026#39;10040\u0026#39;, \u0026#39;11220\u0026#39;, \u0026#39;11373\u0026#39;, \u0026#39;11203\u0026#39;, \u0026#39;11691\u0026#39;, \u0026#39;11356\u0026#39;, \u0026#39;10017\u0026#39;, \u0026#39;10452\u0026#39;, \u0026#39;10280\u0026#39;, \u0026#39;11217\u0026#39;, \u0026#39;10031\u0026#39;, \u0026#39;11201\u0026#39;, \u0026#39;11358\u0026#39;, \u0026#39;10128\u0026#39;, \u0026#39;11423\u0026#39;, \u0026#39;10039\u0026#39;, \u0026#39;10010\u0026#39;, \u0026#39;11209\u0026#39;, \u0026#39;10021\u0026#39;, \u0026#39;10037\u0026#39;, \u0026#39;11413\u0026#39;, \u0026#39;11375\u0026#39;, \u0026#39;11238\u0026#39;, \u0026#39;10473\u0026#39;, \u0026#39;11103\u0026#39;, \u0026#39;11354\u0026#39;, \u0026#39;11361\u0026#39;, \u0026#39;11106\u0026#39;, \u0026#39;11385\u0026#39;, \u0026#39;10463\u0026#39;, \u0026#39;10467\u0026#39;, \u0026#39;11204\u0026#39;, \u0026#39;11237\u0026#39;, \u0026#39;11377\u0026#39;, \u0026#39;11364\u0026#39;, \u0026#39;11434\u0026#39;, \u0026#39;11435\u0026#39;, \u0026#39;11210\u0026#39;, \u0026#39;11228\u0026#39;, \u0026#39;11368\u0026#39;, \u0026#39;11694\u0026#39;, \u0026#39;10464\u0026#39;, \u0026#39;11415\u0026#39;, \u0026#39;10314\u0026#39;, \u0026#39;10301\u0026#39;, \u0026#39;10018\u0026#39;, \u0026#39;10038\u0026#39;, \u0026#39;11105\u0026#39;, \u0026#39;11230\u0026#39;, \u0026#39;10468\u0026#39;, \u0026#39;11104\u0026#39;, \u0026#39;10471\u0026#39;, \u0026#39;11416\u0026#39;, \u0026#39;10075\u0026#39;, \u0026#39;11422\u0026#39;, \u0026#39;11355\u0026#39;, \u0026#39;10028\u0026#39;, \u0026#39;10462\u0026#39;, \u0026#39;10306\u0026#39;, \u0026#39;10461\u0026#39;, \u0026#39;11224\u0026#39;, \u0026#39;11429\u0026#39;, \u0026#39;10035\u0026#39;, \u0026#39;11366\u0026#39;, \u0026#39;11362\u0026#39;, \u0026#39;11206\u0026#39;, \u0026#39;10460\u0026#39;, \u0026#39;10304\u0026#39;, \u0026#39;11360\u0026#39;, \u0026#39;11411\u0026#39;, \u0026#39;10455\u0026#39;, \u0026#39;10475\u0026#39;, \u0026#39;10069\u0026#39;, \u0026#39;10303\u0026#39;, \u0026#39;10308\u0026#39;, \u0026#39;10302\u0026#39;, \u0026#39;11357\u0026#39;, \u0026#39;10470\u0026#39;, \u0026#39;11367\u0026#39;, \u0026#39;11370\u0026#39;, \u0026#39;10454\u0026#39;, \u0026#39;10451\u0026#39;, \u0026#39;11436\u0026#39;, \u0026#39;11426\u0026#39;, \u0026#39;10153\u0026#39;, \u0026#39;11004\u0026#39;, \u0026#39;11428\u0026#39;, \u0026#39;11427\u0026#39;, \u0026#39;11001\u0026#39;, \u0026#39;11363\u0026#39;, \u0026#39;10004\u0026#39;, \u0026#39;10474\u0026#39;, \u0026#39;11430\u0026#39;, \u0026#39;10000\u0026#39;, \u0026#39;10307\u0026#39;, \u0026#39;11239\u0026#39;, \u0026#39;10119\u0026#39;, \u0026#39;10006\u0026#39;, \u0026#39;10048\u0026#39;, \u0026#39;11697\u0026#39;, \u0026#39;11692\u0026#39;, \u0026#39;11693\u0026#39;, \u0026#39;10573\u0026#39;, \u0026#39;00083\u0026#39;, \u0026#39;11559\u0026#39;, \u0026#39;10020\u0026#39;, \u0026#39;77056\u0026#39;, \u0026#39;11776\u0026#39;, \u0026#39;70711\u0026#39;, \u0026#39;10282\u0026#39;, \u0026#39;11109\u0026#39;, \u0026#39;10044\u0026#39;, \u0026#39;02061\u0026#39;, \u0026#39;77092-2016\u0026#39;, \u0026#39;14225\u0026#39;, \u0026#39;55164-0737\u0026#39;, \u0026#39;19711\u0026#39;, \u0026#39;07306\u0026#39;, \u0026#39;000000\u0026#39;, \u0026#39;90010\u0026#39;, \u0026#39;11747\u0026#39;, \u0026#39;23541\u0026#39;, \u0026#39;11788\u0026#39;, \u0026#39;07604\u0026#39;, \u0026#39;10112\u0026#39;, \u0026#39;11563\u0026#39;, \u0026#39;11580\u0026#39;, \u0026#39;07087\u0026#39;, \u0026#39;11042\u0026#39;, \u0026#39;07093\u0026#39;, \u0026#39;11501\u0026#39;, \u0026#39;92123\u0026#39;, \u0026#39;00000\u0026#39;, \u0026#39;11575\u0026#39;, \u0026#39;07109\u0026#39;, \u0026#39;11797\u0026#39;, \u0026#39;10803\u0026#39;, \u0026#39;11716\u0026#39;, \u0026#39;11722\u0026#39;, \u0026#39;11549-3650\u0026#39;, \u0026#39;10162\u0026#39;, \u0026#39;23502\u0026#39;, \u0026#39;11518\u0026#39;, \u0026#39;07020\u0026#39;, \u0026#39;08807\u0026#39;, \u0026#39;11577\u0026#39;, \u0026#39;07114\u0026#39;, \u0026#39;11003\u0026#39;, \u0026#39;07201\u0026#39;, \u0026#39;61702\u0026#39;, \u0026#39;10103\u0026#39;, \u0026#39;29616-0759\u0026#39;, \u0026#39;35209-3114\u0026#39;, \u0026#39;11520\u0026#39;, \u0026#39;11735\u0026#39;, \u0026#39;10129\u0026#39;, \u0026#39;11005\u0026#39;, \u0026#39;41042\u0026#39;, \u0026#39;11590\u0026#39;, \u0026#39;06901\u0026#39;, \u0026#39;07208\u0026#39;, \u0026#39;11530\u0026#39;, \u0026#39;13221\u0026#39;, \u0026#39;10954\u0026#39;, \u0026#39;11111\u0026#39;, \u0026#39;10107\u0026#39;], dtype=object) 7.3 What\u0026rsquo;s up with the dashes? rows_with_dashes = requests[\u0026#39;Incident Zip\u0026#39;].str.contains(\u0026#39;-\u0026#39;).fillna(False) len(requests[rows_with_dashes]) Output:\n5requests[rows_with_dashes] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     29136  26550551  10/24/2013 06:16:34 PM  NaN  DCA  Department of Consumer Affairs  Consumer Complaint  False Advertising  NaN  77092-2016  2700 EAST SELTICE WAY  EAST SELTICE WAY  NaN  NaN  NaN  NaN  NaN  HOUSTON  NaN  NaN  Assigned  11/13/2013 11:15:20 AM  10/29/2013 11:16:16 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   30939  26548831  10/24/2013 09:35:10 AM  NaN  DCA  Department of Consumer Affairs  Consumer Complaint  Harassment  NaN  55164-0737  P.O. BOX 64437  64437  NaN  NaN  NaN  NaN  NaN  ST. PAUL  NaN  NaN  Assigned  11/13/2013 02:30:21 PM  10/29/2013 02:31:06 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   70539  26488417  10/15/2013 03:40:33 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  Street  11549-3650  365 HOFSTRA UNIVERSITY  HOFSTRA UNIVERSITY  NaN  NaN  NaN  NaN  NaN  HEMSTEAD  NaN  NaN  Assigned  11/30/2013 01:20:33 PM  10/16/2013 01:21:39 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  La Guardia Airport  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   85821  26468296  10/10/2013 12:36:43 PM  10/26/2013 01:07:07 AM  DCA  Department of Consumer Affairs  Consumer Complaint  Debt Not Owed  NaN  29616-0759  PO BOX 25759  BOX 25759  NaN  NaN  NaN  NaN  NaN  GREENVILLE  NaN  NaN  Closed  10/26/2013 09:20:28 AM  10/26/2013 01:07:07 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   89304  26461137  10/09/2013 05:23:46 PM  10/25/2013 01:06:41 AM  DCA  Department of Consumer Affairs  Consumer Complaint  Harassment  NaN  35209-3114  600 BEACON PKWY  BEACON PKWY  NaN  NaN  NaN  NaN  NaN  BIRMINGHAM  NaN  NaN  Closed  10/25/2013 02:43:42 PM  10/25/2013 01:06:41 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN      I thought these were missing data and originally deleted them like this:\nrequests[\u0026#39;Incident Zip\u0026#39;][rows_with_dashes] = np.nan But then my friend pointed out that 9-digit zip codes are normal. Let\u0026rsquo;s look at all the zip codes with more than 5 digits, make sure they\u0026rsquo;re okay, and then truncate them.\nlong_zip_codes = requests[\u0026#39;Incident Zip\u0026#39;].str.len() \u0026gt; 5 requests[\u0026#39;Incident Zip\u0026#39;][long_zip_codes].unique() Output:\narray([\u0026#39;77092-2016\u0026#39;, \u0026#39;55164-0737\u0026#39;, \u0026#39;000000\u0026#39;, \u0026#39;11549-3650\u0026#39;, \u0026#39;29616-0759\u0026#39;, \u0026#39;35209-3114\u0026#39;], dtype=object) Those all look okay to truncate to me.\nrequests[\u0026#39;Incident Zip\u0026#39;] = requests[\u0026#39;Incident Zip\u0026#39;].str.slice(0, 5) Done.\nEarlier I thought 00083 was a broken zip code, but turns out Central Park\u0026rsquo;s zip code 00083! Shows what I know. I\u0026rsquo;m still concerned about the 00000 zip codes, though: let\u0026rsquo;s look at that.\nrequests[requests[\u0026#39;Incident Zip\u0026#39;] == \u0026#39;00000\u0026#39;] Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     42600  26529313  10/22/2013 02:51:06 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  00000  EWR EWR  EWR  NaN  NaN  NaN  NaN  NaN  NEWARK  NaN  NaN  Assigned  12/07/2013 09:53:51 AM  10/23/2013 09:54:43 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   60843  26507389  10/17/2013 05:48:44 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  Street  00000  1 NEWARK AIRPORT  NEWARK AIRPORT  NaN  NaN  NaN  NaN  NaN  NEWARK  NaN  NaN  Assigned  12/02/2013 11:59:46 AM  10/18/2013 12:01:08 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN      This looks bad to me. Let\u0026rsquo;s set these to nan.\nzero_zips = requests[\u0026#39;Incident Zip\u0026#39;] == \u0026#39;00000\u0026#39; requests[\u0026#39;Incident Zip\u0026#39;][zero_zips] = np.nan Great. Let\u0026rsquo;s see where we are now:\nunique_zips = requests[\u0026#39;Incident Zip\u0026#39;].unique() unique_zips.sort() unique_zips Output:\narray([nan, \u0026#39;00083\u0026#39;, \u0026#39;02061\u0026#39;, \u0026#39;06901\u0026#39;, \u0026#39;07020\u0026#39;, \u0026#39;07087\u0026#39;, \u0026#39;07093\u0026#39;, \u0026#39;07109\u0026#39;, \u0026#39;07114\u0026#39;, \u0026#39;07201\u0026#39;, \u0026#39;07208\u0026#39;, \u0026#39;07306\u0026#39;, \u0026#39;07604\u0026#39;, \u0026#39;08807\u0026#39;, \u0026#39;10000\u0026#39;, \u0026#39;10001\u0026#39;, \u0026#39;10002\u0026#39;, \u0026#39;10003\u0026#39;, \u0026#39;10004\u0026#39;, \u0026#39;10005\u0026#39;, \u0026#39;10006\u0026#39;, \u0026#39;10007\u0026#39;, \u0026#39;10009\u0026#39;, \u0026#39;10010\u0026#39;, \u0026#39;10011\u0026#39;, \u0026#39;10012\u0026#39;, \u0026#39;10013\u0026#39;, \u0026#39;10014\u0026#39;, \u0026#39;10016\u0026#39;, \u0026#39;10017\u0026#39;, \u0026#39;10018\u0026#39;, \u0026#39;10019\u0026#39;, \u0026#39;10020\u0026#39;, \u0026#39;10021\u0026#39;, \u0026#39;10022\u0026#39;, \u0026#39;10023\u0026#39;, \u0026#39;10024\u0026#39;, \u0026#39;10025\u0026#39;, \u0026#39;10026\u0026#39;, \u0026#39;10027\u0026#39;, \u0026#39;10028\u0026#39;, \u0026#39;10029\u0026#39;, \u0026#39;10030\u0026#39;, \u0026#39;10031\u0026#39;, \u0026#39;10032\u0026#39;, \u0026#39;10033\u0026#39;, \u0026#39;10034\u0026#39;, \u0026#39;10035\u0026#39;, \u0026#39;10036\u0026#39;, \u0026#39;10037\u0026#39;, \u0026#39;10038\u0026#39;, \u0026#39;10039\u0026#39;, \u0026#39;10040\u0026#39;, \u0026#39;10044\u0026#39;, \u0026#39;10048\u0026#39;, \u0026#39;10065\u0026#39;, \u0026#39;10069\u0026#39;, \u0026#39;10075\u0026#39;, \u0026#39;10103\u0026#39;, \u0026#39;10107\u0026#39;, \u0026#39;10112\u0026#39;, \u0026#39;10119\u0026#39;, \u0026#39;10128\u0026#39;, \u0026#39;10129\u0026#39;, \u0026#39;10153\u0026#39;, \u0026#39;10162\u0026#39;, \u0026#39;10280\u0026#39;, \u0026#39;10281\u0026#39;, \u0026#39;10282\u0026#39;, \u0026#39;10301\u0026#39;, \u0026#39;10302\u0026#39;, \u0026#39;10303\u0026#39;, \u0026#39;10304\u0026#39;, \u0026#39;10305\u0026#39;, \u0026#39;10306\u0026#39;, \u0026#39;10307\u0026#39;, \u0026#39;10308\u0026#39;, \u0026#39;10309\u0026#39;, \u0026#39;10310\u0026#39;, \u0026#39;10312\u0026#39;, \u0026#39;10314\u0026#39;, \u0026#39;10451\u0026#39;, \u0026#39;10452\u0026#39;, \u0026#39;10453\u0026#39;, \u0026#39;10454\u0026#39;, \u0026#39;10455\u0026#39;, \u0026#39;10456\u0026#39;, \u0026#39;10457\u0026#39;, \u0026#39;10458\u0026#39;, \u0026#39;10459\u0026#39;, \u0026#39;10460\u0026#39;, \u0026#39;10461\u0026#39;, \u0026#39;10462\u0026#39;, \u0026#39;10463\u0026#39;, \u0026#39;10464\u0026#39;, \u0026#39;10465\u0026#39;, \u0026#39;10466\u0026#39;, \u0026#39;10467\u0026#39;, \u0026#39;10468\u0026#39;, \u0026#39;10469\u0026#39;, \u0026#39;10470\u0026#39;, \u0026#39;10471\u0026#39;, \u0026#39;10472\u0026#39;, \u0026#39;10473\u0026#39;, \u0026#39;10474\u0026#39;, \u0026#39;10475\u0026#39;, \u0026#39;10573\u0026#39;, \u0026#39;10803\u0026#39;, \u0026#39;10954\u0026#39;, \u0026#39;11001\u0026#39;, \u0026#39;11003\u0026#39;, \u0026#39;11004\u0026#39;, \u0026#39;11005\u0026#39;, \u0026#39;11040\u0026#39;, \u0026#39;11042\u0026#39;, \u0026#39;11101\u0026#39;, \u0026#39;11102\u0026#39;, \u0026#39;11103\u0026#39;, \u0026#39;11104\u0026#39;, \u0026#39;11105\u0026#39;, \u0026#39;11106\u0026#39;, \u0026#39;11109\u0026#39;, \u0026#39;11111\u0026#39;, \u0026#39;11201\u0026#39;, \u0026#39;11203\u0026#39;, \u0026#39;11204\u0026#39;, \u0026#39;11205\u0026#39;, \u0026#39;11206\u0026#39;, \u0026#39;11207\u0026#39;, \u0026#39;11208\u0026#39;, \u0026#39;11209\u0026#39;, \u0026#39;11210\u0026#39;, \u0026#39;11211\u0026#39;, \u0026#39;11212\u0026#39;, \u0026#39;11213\u0026#39;, \u0026#39;11214\u0026#39;, \u0026#39;11215\u0026#39;, \u0026#39;11216\u0026#39;, \u0026#39;11217\u0026#39;, \u0026#39;11218\u0026#39;, \u0026#39;11219\u0026#39;, \u0026#39;11220\u0026#39;, \u0026#39;11221\u0026#39;, \u0026#39;11222\u0026#39;, \u0026#39;11223\u0026#39;, \u0026#39;11224\u0026#39;, \u0026#39;11225\u0026#39;, \u0026#39;11226\u0026#39;, \u0026#39;11228\u0026#39;, \u0026#39;11229\u0026#39;, \u0026#39;11230\u0026#39;, \u0026#39;11231\u0026#39;, \u0026#39;11232\u0026#39;, \u0026#39;11233\u0026#39;, \u0026#39;11234\u0026#39;, \u0026#39;11235\u0026#39;, \u0026#39;11236\u0026#39;, \u0026#39;11237\u0026#39;, \u0026#39;11238\u0026#39;, \u0026#39;11239\u0026#39;, \u0026#39;11249\u0026#39;, \u0026#39;11354\u0026#39;, \u0026#39;11355\u0026#39;, \u0026#39;11356\u0026#39;, \u0026#39;11357\u0026#39;, \u0026#39;11358\u0026#39;, \u0026#39;11360\u0026#39;, \u0026#39;11361\u0026#39;, \u0026#39;11362\u0026#39;, \u0026#39;11363\u0026#39;, \u0026#39;11364\u0026#39;, \u0026#39;11365\u0026#39;, \u0026#39;11366\u0026#39;, \u0026#39;11367\u0026#39;, \u0026#39;11368\u0026#39;, \u0026#39;11369\u0026#39;, \u0026#39;11370\u0026#39;, \u0026#39;11372\u0026#39;, \u0026#39;11373\u0026#39;, \u0026#39;11374\u0026#39;, \u0026#39;11375\u0026#39;, \u0026#39;11377\u0026#39;, \u0026#39;11378\u0026#39;, \u0026#39;11379\u0026#39;, \u0026#39;11385\u0026#39;, \u0026#39;11411\u0026#39;, \u0026#39;11412\u0026#39;, \u0026#39;11413\u0026#39;, \u0026#39;11414\u0026#39;, \u0026#39;11415\u0026#39;, \u0026#39;11416\u0026#39;, \u0026#39;11417\u0026#39;, \u0026#39;11418\u0026#39;, \u0026#39;11419\u0026#39;, \u0026#39;11420\u0026#39;, \u0026#39;11421\u0026#39;, \u0026#39;11422\u0026#39;, \u0026#39;11423\u0026#39;, \u0026#39;11426\u0026#39;, \u0026#39;11427\u0026#39;, \u0026#39;11428\u0026#39;, \u0026#39;11429\u0026#39;, \u0026#39;11430\u0026#39;, \u0026#39;11432\u0026#39;, \u0026#39;11433\u0026#39;, \u0026#39;11434\u0026#39;, \u0026#39;11435\u0026#39;, \u0026#39;11436\u0026#39;, \u0026#39;11501\u0026#39;, \u0026#39;11518\u0026#39;, \u0026#39;11520\u0026#39;, \u0026#39;11530\u0026#39;, \u0026#39;11549\u0026#39;, \u0026#39;11559\u0026#39;, \u0026#39;11563\u0026#39;, \u0026#39;11575\u0026#39;, \u0026#39;11577\u0026#39;, \u0026#39;11580\u0026#39;, \u0026#39;11590\u0026#39;, \u0026#39;11691\u0026#39;, \u0026#39;11692\u0026#39;, \u0026#39;11693\u0026#39;, \u0026#39;11694\u0026#39;, \u0026#39;11697\u0026#39;, \u0026#39;11716\u0026#39;, \u0026#39;11722\u0026#39;, \u0026#39;11735\u0026#39;, \u0026#39;11747\u0026#39;, \u0026#39;11776\u0026#39;, \u0026#39;11788\u0026#39;, \u0026#39;11797\u0026#39;, \u0026#39;13221\u0026#39;, \u0026#39;14225\u0026#39;, \u0026#39;19711\u0026#39;, \u0026#39;23502\u0026#39;, \u0026#39;23541\u0026#39;, \u0026#39;29616\u0026#39;, \u0026#39;35209\u0026#39;, \u0026#39;41042\u0026#39;, \u0026#39;55164\u0026#39;, \u0026#39;61702\u0026#39;, \u0026#39;70711\u0026#39;, \u0026#39;77056\u0026#39;, \u0026#39;77092\u0026#39;, \u0026#39;90010\u0026#39;, \u0026#39;92123\u0026#39;], dtype=object) Amazing! This is much cleaner. There\u0026rsquo;s something a bit weird here, though \u0026ndash; I looked up 77056 on Google maps, and that\u0026rsquo;s in Texas.\nLet\u0026rsquo;s take a closer look:\nzips = requests[\u0026#39;Incident Zip\u0026#39;] # Let\u0026#39;s say the zips starting with \u0026#39;0\u0026#39; and \u0026#39;1\u0026#39; are okay, for now. (this isn\u0026#39;t actually true -- 13221 is in Syracuse, and why?) is_close = zips.str.startswith(\u0026#39;0\u0026#39;) | zips.str.startswith(\u0026#39;1\u0026#39;) # There are a bunch of NaNs, but we\u0026#39;re not interested in them right now, so we\u0026#39;ll say they\u0026#39;re True is_far = ~(is_close.fillna(True).astype(bool)) zips[is_far] Output:\n12102 77056 13450 70711 29136 77092 30939 55164 44008 90010 47048 23541 57636 92123 71001 92123 71834 23502 80573 61702 85821 29616 89304 35209 94201 41042 Name: Incident Zip, dtype: objectrequests[is_far][[\u0026#39;Incident Zip\u0026#39;, \u0026#39;Descriptor\u0026#39;, \u0026#39;City\u0026#39;]].sort(\u0026#39;Incident Zip\u0026#39;) Output:\n  Incident Zip Descriptor City     71834  23502  Harassment  NORFOLK   47048  23541  Harassment  NORFOLK   85821  29616  Debt Not Owed  GREENVILLE   89304  35209  Harassment  BIRMINGHAM   94201  41042  Harassment  FLORENCE   30939  55164  Harassment  ST. PAUL   80573  61702  Billing Dispute  BLOOMIGTON   13450  70711  Contract Dispute  CLIFTON   12102  77056  Debt Not Owed  HOUSTON   29136  77092  False Advertising  HOUSTON   44008  90010  Billing Dispute  LOS ANGELES   57636  92123  Harassment  SAN DIEGO   71001  92123  Billing Dispute  SAN DIEGO      Okay, there really are requests coming from LA and Houston! Good to know. Filtering by zip code is probably a bad way to handle this \u0026ndash; we should really be looking at the city instead.\nrequests[\u0026#39;City\u0026#39;].str.upper().value_counts() Output:\nBROOKLYN 31662 NEW YORK 22664 BRONX 18438 STATEN ISLAND 4766 JAMAICA 2246 FLUSHING 1803 ASTORIA 1568 RIDGEWOOD 1073 CORONA 707 OZONE PARK 693 LONG ISLAND CITY 678 FAR ROCKAWAY 652 ELMHURST 647 WOODSIDE 609 EAST ELMHURST 562 ... MELVILLE 1 PORT JEFFERSON STATION 1 NORWELL 1 EAST ROCKAWAY 1 BIRMINGHAM 1 ROSLYN 1 LOS ANGELES 1 MINEOLA 1 JERSEY CITY 1 ST. PAUL 1 CLIFTON 1 COL.ANVURES 1 EDGEWATER 1 ROSELYN 1 CENTRAL ISLIP 1 Length: 100, dtype: int64 It looks like these are legitimate complaints, so we\u0026rsquo;ll just leave them alone.\n7.4 Putting it together Here\u0026rsquo;s what we ended up doing to clean up our zip codes, all together:\nna_values = [\u0026#39;NO CLUE\u0026#39;, \u0026#39;N/A\u0026#39;, \u0026#39;0\u0026#39;] requests = pd.read_csv(\u0026#39;311-service-requests.csv\u0026#39;, na_values=na_values, dtype={\u0026#39;Incident Zip\u0026#39;: str}) def fix_zip_codes(zips): # Truncate everything to length 5  zips = zips.str.slice(0, 5) # Set 00000 zip codes to nan zero_zips = zips == \u0026#39;00000\u0026#39; zips[zero_zips] = np.nan return zips requests[\u0026#39;Incident Zip\u0026#39;] = fix_zip_codes(requests[\u0026#39;Incident Zip\u0026#39;]) requests[\u0026#39;Incident Zip\u0026#39;].unique() Output:\narray([\u0026#39;11432\u0026#39;, \u0026#39;11378\u0026#39;, \u0026#39;10032\u0026#39;, \u0026#39;10023\u0026#39;, \u0026#39;10027\u0026#39;, \u0026#39;11372\u0026#39;, \u0026#39;11419\u0026#39;, \u0026#39;11417\u0026#39;, \u0026#39;10011\u0026#39;, \u0026#39;11225\u0026#39;, \u0026#39;11218\u0026#39;, \u0026#39;10003\u0026#39;, \u0026#39;10029\u0026#39;, \u0026#39;10466\u0026#39;, \u0026#39;11219\u0026#39;, \u0026#39;10025\u0026#39;, \u0026#39;10310\u0026#39;, \u0026#39;11236\u0026#39;, nan, \u0026#39;10033\u0026#39;, \u0026#39;11216\u0026#39;, \u0026#39;10016\u0026#39;, \u0026#39;10305\u0026#39;, \u0026#39;10312\u0026#39;, \u0026#39;10026\u0026#39;, \u0026#39;10309\u0026#39;, \u0026#39;10036\u0026#39;, \u0026#39;11433\u0026#39;, \u0026#39;11235\u0026#39;, \u0026#39;11213\u0026#39;, \u0026#39;11379\u0026#39;, \u0026#39;11101\u0026#39;, \u0026#39;10014\u0026#39;, \u0026#39;11231\u0026#39;, \u0026#39;11234\u0026#39;, \u0026#39;10457\u0026#39;, \u0026#39;10459\u0026#39;, \u0026#39;10465\u0026#39;, \u0026#39;11207\u0026#39;, \u0026#39;10002\u0026#39;, \u0026#39;10034\u0026#39;, \u0026#39;11233\u0026#39;, \u0026#39;10453\u0026#39;, \u0026#39;10456\u0026#39;, \u0026#39;10469\u0026#39;, \u0026#39;11374\u0026#39;, \u0026#39;11221\u0026#39;, \u0026#39;11421\u0026#39;, \u0026#39;11215\u0026#39;, \u0026#39;10007\u0026#39;, \u0026#39;10019\u0026#39;, \u0026#39;11205\u0026#39;, \u0026#39;11418\u0026#39;, \u0026#39;11369\u0026#39;, \u0026#39;11249\u0026#39;, \u0026#39;10005\u0026#39;, \u0026#39;10009\u0026#39;, \u0026#39;11211\u0026#39;, \u0026#39;11412\u0026#39;, \u0026#39;10458\u0026#39;, \u0026#39;11229\u0026#39;, \u0026#39;10065\u0026#39;, \u0026#39;10030\u0026#39;, \u0026#39;11222\u0026#39;, \u0026#39;10024\u0026#39;, \u0026#39;10013\u0026#39;, \u0026#39;11420\u0026#39;, \u0026#39;11365\u0026#39;, \u0026#39;10012\u0026#39;, \u0026#39;11214\u0026#39;, \u0026#39;11212\u0026#39;, \u0026#39;10022\u0026#39;, \u0026#39;11232\u0026#39;, \u0026#39;11040\u0026#39;, \u0026#39;11226\u0026#39;, \u0026#39;10281\u0026#39;, \u0026#39;11102\u0026#39;, \u0026#39;11208\u0026#39;, \u0026#39;10001\u0026#39;, \u0026#39;10472\u0026#39;, \u0026#39;11414\u0026#39;, \u0026#39;11223\u0026#39;, \u0026#39;10040\u0026#39;, \u0026#39;11220\u0026#39;, \u0026#39;11373\u0026#39;, \u0026#39;11203\u0026#39;, \u0026#39;11691\u0026#39;, \u0026#39;11356\u0026#39;, \u0026#39;10017\u0026#39;, \u0026#39;10452\u0026#39;, \u0026#39;10280\u0026#39;, \u0026#39;11217\u0026#39;, \u0026#39;10031\u0026#39;, \u0026#39;11201\u0026#39;, \u0026#39;11358\u0026#39;, \u0026#39;10128\u0026#39;, \u0026#39;11423\u0026#39;, \u0026#39;10039\u0026#39;, \u0026#39;10010\u0026#39;, \u0026#39;11209\u0026#39;, \u0026#39;10021\u0026#39;, \u0026#39;10037\u0026#39;, \u0026#39;11413\u0026#39;, \u0026#39;11375\u0026#39;, \u0026#39;11238\u0026#39;, \u0026#39;10473\u0026#39;, \u0026#39;11103\u0026#39;, \u0026#39;11354\u0026#39;, \u0026#39;11361\u0026#39;, \u0026#39;11106\u0026#39;, \u0026#39;11385\u0026#39;, \u0026#39;10463\u0026#39;, \u0026#39;10467\u0026#39;, \u0026#39;11204\u0026#39;, \u0026#39;11237\u0026#39;, \u0026#39;11377\u0026#39;, \u0026#39;11364\u0026#39;, \u0026#39;11434\u0026#39;, \u0026#39;11435\u0026#39;, \u0026#39;11210\u0026#39;, \u0026#39;11228\u0026#39;, \u0026#39;11368\u0026#39;, \u0026#39;11694\u0026#39;, \u0026#39;10464\u0026#39;, \u0026#39;11415\u0026#39;, \u0026#39;10314\u0026#39;, \u0026#39;10301\u0026#39;, \u0026#39;10018\u0026#39;, \u0026#39;10038\u0026#39;, \u0026#39;11105\u0026#39;, \u0026#39;11230\u0026#39;, \u0026#39;10468\u0026#39;, \u0026#39;11104\u0026#39;, \u0026#39;10471\u0026#39;, \u0026#39;11416\u0026#39;, \u0026#39;10075\u0026#39;, \u0026#39;11422\u0026#39;, \u0026#39;11355\u0026#39;, \u0026#39;10028\u0026#39;, \u0026#39;10462\u0026#39;, \u0026#39;10306\u0026#39;, \u0026#39;10461\u0026#39;, \u0026#39;11224\u0026#39;, \u0026#39;11429\u0026#39;, \u0026#39;10035\u0026#39;, \u0026#39;11366\u0026#39;, \u0026#39;11362\u0026#39;, \u0026#39;11206\u0026#39;, \u0026#39;10460\u0026#39;, \u0026#39;10304\u0026#39;, \u0026#39;11360\u0026#39;, \u0026#39;11411\u0026#39;, \u0026#39;10455\u0026#39;, \u0026#39;10475\u0026#39;, \u0026#39;10069\u0026#39;, \u0026#39;10303\u0026#39;, \u0026#39;10308\u0026#39;, \u0026#39;10302\u0026#39;, \u0026#39;11357\u0026#39;, \u0026#39;10470\u0026#39;, \u0026#39;11367\u0026#39;, \u0026#39;11370\u0026#39;, \u0026#39;10454\u0026#39;, \u0026#39;10451\u0026#39;, \u0026#39;11436\u0026#39;, \u0026#39;11426\u0026#39;, \u0026#39;10153\u0026#39;, \u0026#39;11004\u0026#39;, \u0026#39;11428\u0026#39;, \u0026#39;11427\u0026#39;, \u0026#39;11001\u0026#39;, \u0026#39;11363\u0026#39;, \u0026#39;10004\u0026#39;, \u0026#39;10474\u0026#39;, \u0026#39;11430\u0026#39;, \u0026#39;10000\u0026#39;, \u0026#39;10307\u0026#39;, \u0026#39;11239\u0026#39;, \u0026#39;10119\u0026#39;, \u0026#39;10006\u0026#39;, \u0026#39;10048\u0026#39;, \u0026#39;11697\u0026#39;, \u0026#39;11692\u0026#39;, \u0026#39;11693\u0026#39;, \u0026#39;10573\u0026#39;, \u0026#39;00083\u0026#39;, \u0026#39;11559\u0026#39;, \u0026#39;10020\u0026#39;, \u0026#39;77056\u0026#39;, \u0026#39;11776\u0026#39;, \u0026#39;70711\u0026#39;, \u0026#39;10282\u0026#39;, \u0026#39;11109\u0026#39;, \u0026#39;10044\u0026#39;, \u0026#39;02061\u0026#39;, \u0026#39;77092\u0026#39;, \u0026#39;14225\u0026#39;, \u0026#39;55164\u0026#39;, \u0026#39;19711\u0026#39;, \u0026#39;07306\u0026#39;, \u0026#39;90010\u0026#39;, \u0026#39;11747\u0026#39;, \u0026#39;23541\u0026#39;, \u0026#39;11788\u0026#39;, \u0026#39;07604\u0026#39;, \u0026#39;10112\u0026#39;, \u0026#39;11563\u0026#39;, \u0026#39;11580\u0026#39;, \u0026#39;07087\u0026#39;, \u0026#39;11042\u0026#39;, \u0026#39;07093\u0026#39;, \u0026#39;11501\u0026#39;, \u0026#39;92123\u0026#39;, \u0026#39;11575\u0026#39;, \u0026#39;07109\u0026#39;, \u0026#39;11797\u0026#39;, \u0026#39;10803\u0026#39;, \u0026#39;11716\u0026#39;, \u0026#39;11722\u0026#39;, \u0026#39;11549\u0026#39;, \u0026#39;10162\u0026#39;, \u0026#39;23502\u0026#39;, \u0026#39;11518\u0026#39;, \u0026#39;07020\u0026#39;, \u0026#39;08807\u0026#39;, \u0026#39;11577\u0026#39;, \u0026#39;07114\u0026#39;, \u0026#39;11003\u0026#39;, \u0026#39;07201\u0026#39;, \u0026#39;61702\u0026#39;, \u0026#39;10103\u0026#39;, \u0026#39;29616\u0026#39;, \u0026#39;35209\u0026#39;, \u0026#39;11520\u0026#39;, \u0026#39;11735\u0026#39;, \u0026#39;10129\u0026#39;, \u0026#39;11005\u0026#39;, \u0026#39;41042\u0026#39;, \u0026#39;11590\u0026#39;, \u0026#39;06901\u0026#39;, \u0026#39;07208\u0026#39;, \u0026#39;11530\u0026#39;, \u0026#39;13221\u0026#39;, \u0026#39;10954\u0026#39;, \u0026#39;11111\u0026#39;, \u0026#39;10107\u0026#39;], dtype=object)"},{"uri":"https://tutswiki.com/pandas-cookbook/chapter8/","title":"Chapter 8 - Parsing Unix timestamps","tags":[],"description":"How to parse Unix timestamps in pandas using pandas to_datetime method.","content":" 8.1 Parsing Unix timestamps It\u0026rsquo;s not obvious how to deal with Unix timestamps in pandas \u0026ndash; it took me quite a while to figure this out. The file we\u0026rsquo;re using here is a popularity-contest file I found on my system at /var/log/popularity-contest.\nHere\u0026rsquo;s an explanation of how this file works.\nI\u0026rsquo;m going to hope that nothing in it is sensitive :)\nimport pandas as pd # Read it, and remove the last row popcon = pd.read_csv(\u0026#39;popularity-contest\u0026#39;, sep=\u0026#39; \u0026#39;, )[:-1] popcon.columns = [\u0026#39;atime\u0026#39;, \u0026#39;ctime\u0026#39;, \u0026#39;package-name\u0026#39;, \u0026#39;mru-program\u0026#39;, \u0026#39;tag\u0026#39;] popcon[:5] The colums are the access time, created time, package name, recently used program, and a tag\nOutput:\n  atime ctime package-name mru-program tag     0  1387295797  1367633260  perl-base  /usr/bin/perl  NaN   1  1387295796  1354370480  login  /bin/su  NaN   2  1387295743  1354341275  libtalloc2  /usr/lib/x86_64-linux-gnu/libtalloc.so.2.0.7  NaN   3  1387295743  1387224204  libwbclient0  /usr/lib/x86_64-linux-gnu/libwbclient.so.0  \u0026lt;RECENT-CTIME\u0026gt;   4  1387295742  1354341253  libselinux1  /lib/x86_64-linux-gnu/libselinux.so.1  NaN      The magical part about parsing timestamps in pandas is that numpy datetimes are already stored as Unix timestamps. So all we need to do is tell pandas that these integers are actually datetimes \u0026ndash; it doesn\u0026rsquo;t need to do any conversion at all.\nWe need to convert these to ints to start:\npopcon[\u0026#39;atime\u0026#39;] = popcon[\u0026#39;atime\u0026#39;].astype(int) popcon[\u0026#39;ctime\u0026#39;] = popcon[\u0026#39;ctime\u0026#39;].astype(int) Every numpy array and pandas series has a dtype \u0026ndash; this is usually int64, float64, or object. Some of the time types available are datetime64[s], datetime64[ms], and datetime64[us]. There are also timedelta types, similarly.\nWe can use the pd.to_datetime function to convert our integer timestamps into datetimes. This is a constant-time operation \u0026ndash; we\u0026rsquo;re not actually changing any of the data, just how pandas thinks about it.\npopcon[\u0026#39;atime\u0026#39;] = pd.to_datetime(popcon[\u0026#39;atime\u0026#39;], unit=\u0026#39;s\u0026#39;) popcon[\u0026#39;ctime\u0026#39;] = pd.to_datetime(popcon[\u0026#39;ctime\u0026#39;], unit=\u0026#39;s\u0026#39;) popcon[\u0026#39;atime\u0026#39;].dtype Output:\ndtype(\u0026#39;\u0026lt;M8[ns]\u0026#39;) If we look at the dtype now, it\u0026rsquo;s \u0026lt;M8[ns]. As far as I can tell M8 is secret code for datetime64.\nSo now we can look at our atime and ctime as dates!\npopcon[:5] Output:\n  atime ctime package-name mru-program tag     0 2013-12-17 15:56:37 2013-05-04 02:07:40  perl-base  /usr/bin/perl  NaN   1 2013-12-17 15:56:36 2012-12-01 14:01:20  login  /bin/su  NaN   2 2013-12-17 15:55:43 2012-12-01 05:54:35  libtalloc2  /usr/lib/x86_64-linux-gnu/libtalloc.so.2.0.7  NaN   3 2013-12-17 15:55:43 2013-12-16 20:03:24  libwbclient0  /usr/lib/x86_64-linux-gnu/libwbclient.so.0  \u0026lt;RECENT-CTIME\u0026gt;   4 2013-12-17 15:55:42 2012-12-01 05:54:13  libselinux1  /lib/x86_64-linux-gnu/libselinux.so.1  NaN      Now suppose we want to look at all packages that aren\u0026rsquo;t libraries.\nFirst, I want to get rid of everything with timestamp 0. Notice how we can just use a string in this comparison, even though it\u0026rsquo;s actually a timestamp on the inside? That is because pandas is amazing.\npopcon = popcon[popcon[\u0026#39;atime\u0026#39;] \u0026gt; \u0026#39;1970-01-01\u0026#39;] Now we can use pandas\u0026rsquo; magical string abilities to just look at rows where the package name doesn\u0026rsquo;t contain \u0026lsquo;lib\u0026rsquo;.\nnonlibraries = popcon[~popcon[\u0026#39;package-name\u0026#39;].str.contains(\u0026#39;lib\u0026#39;)] nonlibraries.sort(\u0026#39;ctime\u0026#39;, ascending=False)[:10] Output:\n  atime ctime package-name mru-program tag     57  2013-12-17 04:55:39 2013-12-17 04:55:42  ddd  /usr/bin/ddd  \u0026lt;RECENT-CTIME\u0026gt;   450 2013-12-16 20:03:20 2013-12-16 20:05:13  nodejs  /usr/bin/npm  \u0026lt;RECENT-CTIME\u0026gt;   454 2013-12-16 20:03:20 2013-12-16 20:05:04  switchboard-plug-keyboard  /usr/lib/plugs/pantheon/keyboard/options.txt  \u0026lt;RECENT-CTIME\u0026gt;   445 2013-12-16 20:03:20 2013-12-16 20:05:04  thunderbird-locale-en  /usr/lib/thunderbird-addons/extensions/langpac...  \u0026lt;RECENT-CTIME\u0026gt;   396 2013-12-16 20:08:27 2013-12-16 20:05:03  software-center  /usr/sbin/update-software-center  \u0026lt;RECENT-CTIME\u0026gt;   449 2013-12-16 20:03:20 2013-12-16 20:05:00  samba-common-bin  /usr/bin/net.samba3  \u0026lt;RECENT-CTIME\u0026gt;   397 2013-12-16 20:08:25 2013-12-16 20:04:59  postgresql-client-9.1  /usr/lib/postgresql/9.1/bin/psql  \u0026lt;RECENT-CTIME\u0026gt;   398 2013-12-16 20:08:23 2013-12-16 20:04:58  postgresql-9.1  /usr/lib/postgresql/9.1/bin/postmaster  \u0026lt;RECENT-CTIME\u0026gt;   452 2013-12-16 20:03:20 2013-12-16 20:04:55  php5-dev  /usr/include/php5/main/snprintf.h  \u0026lt;RECENT-CTIME\u0026gt;   440 2013-12-16 20:03:20 2013-12-16 20:04:54  php-pear  /usr/share/php/XML/Util.php  \u0026lt;RECENT-CTIME\u0026gt;      Okay, cool, it says that I I installed ddd recently. And postgresql! I remember installing those things. Neat.\nThe whole message here is that if you have a timestamp in seconds or milliseconds or nanoseconds, then you can just \u0026ldquo;cast\u0026rdquo; it to a datetime64[the-right-thing] and pandas/numpy will take care of the rest.\nWhere from here? This was an attempt to provide concise cookbook with real life examples. We suggest you to have a look at the official cookbook also.\n"},{"uri":"https://tutswiki.com/tags/dsa/","title":"DSA","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/","title":"TutsWiki Beta","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/c++/","title":"C++","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/java/","title":"Java","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/python/","title":"Python","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/r/","title":"R","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/android/","title":"Android","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/linux/","title":"Linux","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/tags/angular/","title":"angular","tags":[],"description":"","content":""},{"uri":"https://tutswiki.com/categories/","title":"Categories","tags":[],"description":"","content":""}]