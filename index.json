[
{
	"uri": "http://tutswiki.com/blog/",
	"title": "Blog",
	"tags": [],
	"description": "Programming articles on Tuts Wiki",
	"content": ""
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/",
	"title": "Pandas Cookbook",
	"tags": [],
	"description": "",
	"content": " Pandas Cookbook Introduction A newbie friendly introduction to Pandas with real life examples.\n"
},
{
	"uri": "http://tutswiki.com/abstract-classes-and-interfaces-in-python/",
	"title": "Abstract classes and interfaces in Python",
	"tags": [],
	"description": "New software based on deep learning algorithms automatically and accurately calculates LVEF",
	"content": " Abstract base classes and interfaces are entities that are similar in purpose and meaning. Both the first and second are a peculiar way of documenting the code and help to limit (decouple) the interaction of individual abstractions in the program (classes).\nPython is a very flexible language. One facet of this flexibility is the possibilities provided by metaprogramming. And although abstract classes and interfaces are not represented in the core of the language, the former were implemented in the standard abc module, and the latter in the Zope project (the zope.interfaces module).\nIt makes no sense to use both at the same time, and therefore each programmer must determine for himself which tool to use when designing applications.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Abstract base classes (abc) Starting from version 2.6 of the language, the abc module is included in the standard library, which adds abstract base classes (hereinafter ABC) to the language.\nABC allows you to define a class, indicating which methods or properties must be overridden in inherited classes:\nfrom abc import ABCMeta, abstractmethod, abstractproperty class Movable(): __metaclass __ = ABCMeta @abstractmethod def move(): \u0026quot;\u0026quot;\u0026quot;Move object\u0026quot;\u0026quot;\u0026quot; @abstractproperty def speed(): \u0026quot;\u0026quot;\u0026quot;Object speed\u0026quot;\u0026quot;\u0026quot;  Thus, if we want to use an object with the ability to move and a certain speed in the code, then we should use the Movable class as one of the base classes.\nThe presence of the necessary methods and attributes of the object is now guaranteed by the presence of abstractmethod and abstractproperty.\nclass Car(Movable): def __init__: self.speed = 10 self.x = 0 def move(self): self.c += self.speed def speed(self): return self.speed assert issubclass (Car, Movable) assert ininstance (Car(), Movable)  It can be seen that the concept of ABC fits well into the class inheritance hierarchy, it is easy to use them, and the implementation, if you look into the source code of the abc module, is very simple. Abstract classes are used in the standard collections and number modules, defining the methods of custom inherited classes necessary for definition.\nDetails and considerations for using ABC can be found in PEP-3119.\nInterfaces (zope.interfaces) The implementation of the Zope project in work on Zope3 decided to focus on component architecture; the framework has evolved into a set of almost independent components. The glue that holds the components together is the interfaces and the adapters based on them.\nThe zope.interfaces module is the result of this work.\nIn the simplest case, using interfaces is like trying on ABK:\nimport zope.interface class IVehicle(zope.interface.Interface): \u0026quot;\u0026quot;\u0026quot;Any moving thing\u0026quot;\u0026quot;\u0026quot; speed = zope.interface.Attribute(\u0026quot;\u0026quot;\u0026quot;Movement speed\u0026quot;\u0026quot;\u0026quot;) def move(): \u0026quot;\u0026quot;\u0026quot;Make a single step\u0026quot;\u0026quot;\u0026quot; class Car(object): zope.interface.implements (IVehicle) def __init__: self.speed = 1 self.location = 1 def move (self): self.location = self.speed * 1 print(\u0026quot;moved!\u0026quot;) assert IVehicle.implementedBy (Car) assert IVehicle.providedBy (Car ())  The interface declaratively shows what attributes and methods the object should have. Moreover, the class implements (implements) the interface, and the object of the class provides (provides). You should pay attention to the difference between these concepts!\n“Implementing” an interface means that only the “produced” entity will have the required properties; and “providing” an interface speaks of the specific capabilities of the entity being evaluated. Accordingly, in Python, classes, by the way, can both implement and provide an interface.\nIn fact, the implementation declaration (IVehicle) is a convention; just a promise that a given class and its objects behave that way. No real checks will be made\nclass IVehicle (zope.interface.Interface): \u0026quot;\u0026quot;\u0026quot;Any moving thing\u0026quot;\u0026quot;\u0026quot; speed = zope.interface.Attribute (\u0026quot;\u0026quot;\u0026quot;Movement speed\u0026quot;\u0026quot;\u0026quot;) def move(): \u0026quot;\u0026quot;\u0026quot;Make a single step\u0026quot;\u0026quot;\u0026quot; class Car(object): zope.interface.implements (IVehicle) assert IVehicle.implementedBy (Car) assert IVehicle.providedBy (Car ())  It can be seen that in the simplest cases, the interfaces only complicate the code, as, however, the ABK.\nThe component architecture of Zope includes another important concept - adapters. Generally speaking, this is a simple design pattern that corrects one class for use somewhere where a different set of methods and attributes is required. So,\nAdapters Consider, greatly simplifying, an example from the Comprehensive Guide to Zope Component Architecture.\nSuppose there are a couple of classes, Guest and Desk. Let\u0026rsquo;s define interfaces to them, plus a class that implements the Guest interface:\nimport zope.interface from zope.interface import implements from zope.component import adapts, getGlobalSiteManager class IDesk (zope.interface.Interface): def register (): \u0026quot;Register a person\u0026quot; class IGuest (zope.interface.Interface): name = zope.interface.Attribute (\u0026quot;\u0026quot; \u0026quot;Person`s name\u0026quot; \u0026quot;\u0026quot;) class Guest (object): implements (IGuest) def __init __ (self, name): self.name = name  The adapter must account for the anonymous guest by registering in the list of names:\nclass GuestToDeskAdapter (object): adapts (IGuest) implements (IDesk) def __init __ (self, guest): self.guest = guest def register (self): guest_name_db.append (self.guest.name)  There is a registry that keeps track of adapters by interface. Thanks to it, you can get an adapter by passing an adaptable object to the call of the interface class. If the adapter is not registered, the second argument to the interface will be returned:\nguest = Guest (\u0026quot;Ivan\u0026quot;) adapter = IDesk (guest, alternate = None) print adapter \u0026gt;\u0026gt;\u0026gt;\u0026gt; None found gsm = getGlobalSiteManager () gsm.registerAdapter (GuestToDeskAdapter) adapter = IDesk (guest, alternate = \u0026quot;None found\u0026quot;) print adapter \u0026gt;\u0026gt;\u0026gt;\u0026gt; __ main __. GuestToDeskAdapter object at 0xb7beb64c\u0026gt;  This infrastructure is useful for splitting code into components and linking them together.\nOne of the most striking examples of using this approach besides Zope itself is the Twisted network framework, where a fair amount of the architecture relies on zope.interfaces interfaces.\nConclusion Upon closer inspection, it turns out that interfaces and abstract base classes are two different things.\nAbstract classes basically hardcode the required front-end part. Checking an object against the interface of an abstract class is checked using the built-in isinstance function; class - issubclass. An abstract base class should be included in the hierarchy as a base class or mixin.\nThe downside is the semantics of checks issubclass, isinstance, which intersect with ordinary classes (their inheritance hierarchy). No additional abstractions are built on the ABK.\nInterfaces are a declarative entity, they do not set any boundaries; simply asserts that the class implements and its object provides the interface. Semantically, the statements implementedBy, providedBy are more correct. On such a simple basis, it is convenient to build a component architecture using adapters and other derived entities, which is what the large Zope and Twisted frameworks do.\nIt should be understood that the use of both tools makes sense only when building and using relatively large OOP systems - frameworks and libraries, in small programs they can only confuse and complicate the code with unnecessary abstractions.\n"
},
{
	"uri": "http://tutswiki.com/deep-learning-cardiovascular-imaging/",
	"title": "How Deep Learning Helped Reducing Variability in Cardiovascular Imaging",
	"tags": [],
	"description": "New software based on deep learning algorithms automatically and accurately calculates LVEF",
	"content": " Bay Labs, a San Francisco-based medical technology company which focuses on using artificial intelligence to improve cardiovascular imaging, has released a new software EchoMD AutoEF. It is being claimed that this software will help to reduce the variability in cardiovascular imaging.\nThe software uses deep learning techniques to accurately calculate the left ventricular ejection fraction.\nWhat is Ejection Fraction? During each pumping cycle of our heart, it contracts and relaxes. When it contracts it passes the blood to ventricles. Ventricles are basically the pumping chambers. Ejection Fraction is the amount of blood withdrawn from the heart when it contracts. Medical professionals use EF to identify the health of a heart. They generally measure the EF from left ventricle because it is the main pumping chamber of the heart which passes the oxygenated blood through the ascending (upward) aorta to the rest of the body.\nMeasuring EF There are various methods available to measure LVEF, out of which Simpson’s biplane method is used widely. This method has about 9.2% average variability. The EchoMD AutoEF software by Bay Labs has an average variability of 8.2%. Moreover, EchoMD AutoEF doesn\u0026rsquo;t require any user intervention, it\u0026rsquo;s fully automatic. It calculates LVEF from complete echocardiographic patient studies, automatically.\nHow Deep Learning Helped? At present Human intervention is required to calculate LVEF. Medical professionals have to go through the recorded clips. They watch them carefully and pick the best ones then they manipulate them for quantification. This is a very time consuming and prone-to-error process (as it is done by humans). The deep learning algorithms helped in this case by totally eliminating the need to do all of the above manually. The training set included 4,000,000 images from about 9,000 patients.\nQuoting Richard Bae, who is the Director of the Echocardiography Laboratory at the Minneapolis Heart Institute:\n \u0026ldquo;Historically there have been challenges with variability and reproducibility in reporting of the ejection fraction, especially when the EF is not normal; our study showed that the EchoMD AutoEF algorithms can aid interpretation enormously and have less variability than cardiologists reported in the literature.”\n\u0026ldquo;By supporting fast, efficient and accurate AI-assisted echocardiogram analysis, the algorithms can allow physicians to focus on putting results into the context for the patient - guiding prognosis and course of management.”\n This is a great innovation in the medical field. It will help cardiologists in better decision making.\nU.S. Food and Drug Administration (FDA) has given 510(k) clearance to this product. Which means that the device is safe and effective in automatically selecting clips and calculating LVEF.\n "
},
{
	"uri": "http://tutswiki.com/google-engineers-boycott-security-tool-military/",
	"title": "Google Engineers Boycott Against Security Tool for Military",
	"tags": [],
	"description": "A group of 9 cloud engineers at Google has refused to work on air-gap due to which Google may lose a deal worth $10 billion.",
	"content": " A group of 9 cloud engineers at Google has refused to work on a project called air-gap due to which Google may lose a deal worth $10 billion. Google needs air-gap if it has to do some sensitive work with government agencies involving sensitive data (obviously military implications there). So this group of 9 basically just said they weren\u0026rsquo;t gonna do it. About 10-12 employees have resigned so far as part of this work strike. Google spends a lot of time making sure their top talent is happy so that they stick around and don\u0026rsquo;t go to other companies, so Google just stood down on this one. Urs Hölzle, the senior VP of technical infrastructure at Google said that the feature would be postponed.\nOn the one hand this is good as it shows that employees get ample space to air grievances, but on the other hand, the shareholders will get angry as it hampers Google\u0026rsquo;s ability to compete. In order to get government contracts especially those which involves sensitive data and military require some certifications, which Google\u0026rsquo;s competitors like Microsoft and Amazon have but Google doesn\u0026rsquo;t. This air-gap feature was supposed to help Google with that but it seems it\u0026rsquo;ll be abandoned.\nWhat is air-gap? Microsoft and Amazon have set-up a service called Government Cloud (Azure Government and AWS GovCloud) where the sensitive government information can be stored. An important feature of this service is air-gap. It is a security measure which ensures that a secured computer network is physically isolated from unsecured networks. Therefore, instead of storing data from multiple sources in a single server/system you store it in a separate isolated hardware. This is helpful for the government if they want to know where their data reside (physically) so that they can wipe it immediately.\nAlthough the feature is not that difficult to implement, Google can form a new team to work on it but looking at the fate of Project Maven which got similar boycott, it\u0026rsquo;d be difficult for Google.\nBesides, U.S. Congress is accusing Google over the partnership with Huawei, a Chinese manufacturer which makes Android phones. They said  You were not with the Pentagon on an AI project but you\u0026rsquo;ll work with the Chinese handset manufacturer.\n That is a very difficult situation for Google and I think they are right now working on how to handle this.\nSource: Bloomberg\n"
},
{
	"uri": "http://tutswiki.com/nodejs-google-app-engine/",
	"title": "How to deploy Node.js app on Google App Engine",
	"tags": [],
	"description": "Learn how to deploy your Node.js app on the Google App Engine.",
	"content": " Google App Engine is a part of the Google Cloud Suite which provides a cloud platform for developers where they can develop and host their apps. It provides easily configurable, fast and secure programming environments/tools with the help of which developers can setup a development environment in just a few minutes. Therefore developers don\u0026rsquo;t need to worry about configuring the environment, they can just focus on writing code. It supports all the popular programming languages Java, PHP, Node.js, Python, C#, .Net, Ruby and Go.\n  Till now there was no support for Node.js, but Google has just announced that developers will now be able to deploy their Node.js apps to the App Engine. Steps to deploy Node.js web service on App Engine Prerequisites  You must have a project on the Google Cloud Platform. If you don\u0026rsquo;t, create one using the GCP Console.\n The development environment should be configured. You have 2 options here.\n Configure it on the cloud using Cloud Shell Setup your local machine  Download and install Node.js and Node Package Manager Get Node.js and npm   Only Node.js version 8 or greater is supported on App Engine.\n  Download and install Google Cloud SDK Get Google Cloud SDK   Google Cloud SDK also installs gcloud command line tool.\n        (adsbygoogle = window.adsbygoogle || []).push({});  Hello world!  There\u0026rsquo;s a sample Node.js repository on GitHub. Either clone it using git or download the zip.\ngit clone https://github.com/GoogleCloudPlatform/nodejs-docs-samples  Navigate to the below directory\ncd nodejs-docs-samples/appengine/hello-world/standard  Install the required dependencies using npm utility\nnpm install  Start the web server\nnpm start  Check output\n If you are using Cloud Shell then click on Web preview If you are on Local Machine then navigate to http://localhost:8080/    Deploy on App Engine Since we have verified that our Hello World program is working fine, it\u0026rsquo;s time to deploy it.\n If you had installed Google Cloud SDK properly (as mentioned in Prerequisites), you\u0026rsquo;ll have access to the gcloud command. Run it as below\ngcloud app deploy  Your app should now be live at https://\u0026lt;PROJECT_ID\u0026gt;.appspot.com/\ngcloud app browse   That\u0026rsquo;s it. You have successfully deployed your sample Node.js app on the Google App Engine.\nRefer Google\u0026rsquo;s official guide on Building a Node.js App on App Engine\n You can try out Google App Engine\u0026rsquo;s free tier to deploy your Node.js app and see if you like it.\n  div.notices { margin: 0.3rem 0;  "
},
{
	"uri": "http://tutswiki.com/angular6-features/",
	"title": "What&#39;s new in Angular 6 (Features List)",
	"tags": [],
	"description": "List of major changes in Angular 6. ng-add, ng-update, material, cdk and starter components.",
	"content": " Angular 6 is out with all new features. It is a major release in which Angular team has synchronized many of the important framework packages to make most out of cross compatibility. All the major framework packages like @angular/core, @angular/compiler, @angular/common etc., are reworked and released as version 6.0.0. Below is the list of major changes in Angular 6, let\u0026rsquo;s explore them one by one.\nAngular 6 Features:  New CLI commands  ng update ng add  Referencing providers Angular Elements Angular Material + CDK Components  Tree Badge Bottom-Sheet Overlay  Starter Components  Dashboard Side-Nav Datatable  Library Support CLI Workspaces RxJS v6 Long Term Support  ng update A new command is introduced in Angular CLI which analyzes package.json and recommends any updates (if needed) on the installed packages.\nThis is going to make your life easy as now you don\u0026rsquo;t have to manually synchronize your dependencies. This will work using Schematics, a workflow tool which is based on Tree data structure. For example a tree has base, scripts following schematics will also have a base and that base will be the root structure. Any modification has first have to pass from staging area to make its way to the root. If any of the dependency provide a schematic then it can automatically update your code whenever there are major changes.\nSo now if you run ng update @angular/common it will update the package and run any schematic available for this package.\nTo get more details on ng update usage, refer the official specification.\nng add This is another CLI command added in Angular 6. This will be helpful in adding new packages to your project. It downloads the packages (with their dependencies) using the package manager and installs them with the help of Schematics.\nng add @angular/material // Install and configure Angular Material ng add @ng-bootstrap/schematics // Add ng-bootstrap in your application  This area will flourish with increase in packages supporting ng add. Refer Material\u0026rsquo;s ng-add schematic to get an idea on how to write one for your application.\nReferencing Providers Before this update we used to reference services from module but with Angular 6 we will reference module from service.\nAngular Elements @angular/elements creates a custom element which acts as a bridge between Angular component interface and change detection functionality to the built-in DOM API. You can bootstrap Angular components with your application and they will be registered as Angular Elements. One of the benefits that you get from this is that it\u0026rsquo;ll dynamically insert HTML code holding Angular components after your application is compiled.\nAngular Material + CDK Components Below are some new components that have been added in Angular 6.\n Tree: It is based on datatable component and is best suited for representing hierarchical data. CDK contains the core tree directive (cdk-tree) whereas mat-tree comes with Material design style. See this presentation from ng conf 2018 to get more details on Material Trees.   Badge: This component can be used to display a small piece of information such as notification count on notification drawer, unread emails count over the email icon etc.   Bottom-Sheet: This component is mobile-centric which can be used to present a list of options for a particular action. It appears from the bottom of the viewport (with slide-up animation).   Overlay: @angular/cdk/overlay has been updated with a new positioning logic which helps in creating intelligent pop-ups that remain on the screen in all situations.   Starter Components With Angular 6 you get 3 new starter components after running ng add @angular/material. With this update in place, it\u0026rsquo;s very easy to create simple UI.\n Create a dashboard  ng generate @angular/material:material-dashboard --name=test-dashboard   Create side navigation  ng generate @angular/material:material-nav --name=test-nav   Create a datatable  ng generate @angular/material:material-table --name=test-table  Library Support Library support has been added in 6.0.0. You can easily create a library using below command. See details.\nng generate library \u0026lt;name\u0026gt;  CLI Workspaces CLI can now support workspaces with multiple projects. angular-cli.json has been renamed to angular.json. Each workspace can have multiple projects, each project can have targets and each target can have a configuration.\nRxJS v6 Angular 6 supports RxJS v6. RxJS v6 ensures that only those modules are bundled in production that are being used by your application. If you are moving from the previous version to Angular 6 then you have to change import statements and operator usage to make your application work. But if you don\u0026rsquo;t want to change then you can use this new package rxjs-compat which provides backward compatibility.\nLong Term Support Angular team announced to provide long-term support for all major releases starting from version 4. LTS will include 6 months of active development + 12 months of security patches and critical bug fixes.\nOther Changes:  \u0026lt;template\u0026gt; tag has been removed so now you have to use \u0026lt;ng-template\u0026gt; instead. @angular/http is deprecated, @angular/common/http is the recommended alternative.  If above-listed features look promising to you and you want to use Angular 6 for your existing project, then follow https://update.angular.io/.\n "
},
{
	"uri": "http://tutswiki.com/github-alternatives/",
	"title": "GitHub Alternatives (Free, Paid, Self-Hosted)",
	"tags": [],
	"description": "Popular Alternatives to GitHub for Web, Linux, Windows, Self-Hosted and more.",
	"content": " The trending news of yesterday was the acquisition of GitHub (the world\u0026rsquo;s leading software development platform) by Microsoft. This is a great deal for Microsoft which might put it in the position it was about 10 years ago in the software market. But a lot of open-source fans are unhappy with this.\nA couple of years ago Microsoft was anti-open-source.\n \u0026ldquo;Open source is an intellectual-property destroyer. I can\u0026rsquo;t imagine something that could be worse than this for the software business and the intellectual-property business.\u0026rdquo; - Jim Allchin (Former Windows chief), 2001\n  \u0026ldquo;Linux is a cancer that attaches itself in an intellectual property sense to everything it touches.\u0026rdquo; - Steve Ballmer (Former CEO)\n However, in recent years Microsoft has tried hard to catch up with the open-source world. They are promoting themselves as a supporter of open-source. They have open-sourced some of their projects and also joined The Linux Foundation as a platinum member.\nNobody knows whether they are doing this because they accepted that open-source is good or they are just trying to stay in the business by getting the attention of open-source users. Surely there are trust issues. Some GitHub users have already started looking for alternatives.\nBelow is a list of some popular services similar to GitHub:\n   (adsbygoogle = window.adsbygoogle || []).push({});  1. GitLab Most of the users on Social Media seem to be choosing GitLab as a replacement for GitHub.\nFeatures:  Issue board, Issue tracker (with due dates) Built-in CI/CD Unlimited private repositories Faster file search Cherry pick changes File locking Web IDE Wiki for project Ad free Code review and comments are supported in pull requests Static/Dynamic Application Security Testing, Docker container scanning Smart Mirroring for faster clone, fetch, pull (Premium) Host static websites  GitLab statistics shows that a lot of repos have been imported from GitHub in past few hours.\n 2. BitBucket An Atlassian product which is the most popular alternative to GitHub.\nFeatures:  Unlimited private repositories JIRA integration 2 factor authentication LFS support Source code search Wiki for project Issue tracker Ad free Code review and comments are supported in pull requests BitBucket cloud for hosting static websites (similar to GitHub pages) Smart Mirroring for faster clone, fetch, pull (Premium)  Pricing: Bitbucket Data Center vs GitHub Enterprise 3. Gitea A lightweight GitHub clone (forked from GoGs) written in Go lang.\nFeatures:  GitHub clone Runs on Windows, Mac and Linux Lightweight (Even supports Raspberry Pi) Install from binary Ship with docker, vagrant or as a package Repo viewer Issue tracker Wiki API support Help (Support Forum and Chat)  4. SourceForge One of the oldest (since 1999) to offer free services to open source projects.\nFeatures:  Issue tracking Code hosting Mirroing Wiki Mailing lists Support forums User reviews on projects Micro-blog for project Unlimited bandwidth Download statistics Tool to import GitHub projects  5. Launchpad A Canonical product, which is quite famous for hosting Ubuntu projects.\nFeatures:  Issue tracking Code hosting (supports both Git and Bazaar) Code reviews Build and host Ubuntu projects Mailing lists Translations FAQs Specification tracking  6. Cloud Source Repositories (Paid) A Google product which is a part of Google Cloud.\nFeatures:  Connect your repo from BitBucket or GitHub Source code browser Debug and error reporting tools Stable and easily scalable infrastructure CI through Container Builder Preinstalled tools (Programming languages, Cloud shell, and Shell Editor) Faster deployment through App Engine Deployment through custom triggers (HTTP, Pub/Sub etc.)  Pricing: 7. AWS CodeCommit (Paid) An Amazon product which is similar to Cloud Source Repo, if you already have an AWS account you get it for free (Maximum 5 users allowed per month).\nFeatures:  Hosted on AWS Encrypted repositories Code review and comments are supported in pull requests Scalable No limit on size or type of data Easy migration from other services  Pricing: 8. Phabricator (Self-hosted) Features:  Source code hosting Git, Mercurial, SVN support Code review and auditing Wiki Issue tracker Workboard Chat channel Command line tools (lint, unit-tests) API support  Pricing: 9. GitBucket (Self-hosted) A git platform on JVM.\nFeatures:  Powered with Scala Highly scalable GitHub API compatible Repo viewer Issue tracker Wiki Plugin support  10. GoGs (Self-hosted) An easy to install and lightweight GitHub clone written in Go.\nFeatures:  GitHub clone Install from binary Ship with docker, vagrant or as a package Cross platform support Lightweight (runs on Raspberry Pi) Repo viewer Issue tracker Wiki  11. GitPrep (Self-hosted) A GitHub clone written in Perl.\nFeatures:  GitHub clone Portable Issue tracker CGI support Built-in web server SSL Support Public key auth support  12. Allura (Self-hosted) A product from Apache. Sourceforge runs on Allura.\nFeatures:  Code repo Supports Git, Mercurial, SVN Issue tracker Discussion forums Wiki Mailing lists  Do let us know which alternative do you like the most?\n "
},
{
	"uri": "http://tutswiki.com/what-is-the-use-of-yield-in-python/",
	"title": "What is the use of yield in Python?",
	"tags": ["python"],
	"description": "What does yield do? How is it different from return?",
	"content": " References  What does the “yield” keyword do in Python? Yield expressions  "
},
{
	"uri": "http://tutswiki.com/append-vs-extend-python/",
	"title": "Difference between append and extend in Python",
	"tags": ["python"],
	"description": "What is the difference between list methods append and extend in Python?",
	"content": " append and extend are list methods in Python which can be used to combine multiple lists. But what is the difference between them? When should you use one over another, let\u0026rsquo;s find out.\nThe official documentation describes them as:\n list.append(x): Add an item to the end of the list; equivalent to a[len(a):] = [x].\n list.extend(L): Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.\n  Notice the bold words in the definition. append adds an item and extend appends all the items of the given list.\nLet\u0026rsquo;s take an example:\nappend a list to another list in Python some_list = ['string', 1, 'another string', 6.5] another_list = ['new data', 12] some_list.append(another_list) print some_list  Output:\n['string', 1, 'another string', 6.5, ['new data', 12]]  As you can see, the append method took an item i.e. the object of another list and added it to some_list as it is.\nextend a list with another list in Python some_list = ['string', 1, 'another string', 6.5] another_list = ['new data', 12] some_list.extend(another_list) print some_list  Output:\n['string', 1, 'another string', 6.5, 'new data', 12]  In case of extend you can see that all the items from another_list were appended to some_list one by one. So you can say extend method concatenates one list with another list.\nQuiz Q: What will be the output of below code:\nsome_list = ['string', 1, 'another string', 6.5] data = 'hello' some_list.extend(data) print some_list  A: Output is\n['string', 1, 'another string', 6.5, 'h', 'e', 'l', 'l', 'o']  Explanation: If you notice carefully, data is a string and strings in Python are iterable. Therefore the extend method iterated over all characters in the string one by one and appended them to the list.\nSo based on above we can say that below 2 code snippets are equivalent:\nfor data in iterator: some_list.append(data)  some_list.extend(iterator)  "
},
{
	"uri": "http://tutswiki.com/print-same-line-python/",
	"title": "How to print on same line with print in Python",
	"tags": ["python"],
	"description": "Use a comma at the end of print function to write the data on same line",
	"content": " In Python, when you use the print function, it prints a new line at the end.\nFor example:\nprint \u0026quot;This is some line.\u0026quot; print \u0026quot;This is another line.\u0026quot;  Output:\nThis is some line. This is another line.  What if you want to avoid the newline and want to print both statements on same line? Well, there are 2 possible solutions.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Add comma at the end of print print \u0026quot;This is some line.\u0026quot;, print \u0026quot;This is another line.\u0026quot;  Output:\nThis is some line. This is another line.  If you are using Python 3 then use the below:\nprint (\u0026quot;This is some line.\u0026quot;, end=\u0026quot;\u0026quot;) print (\u0026quot;This is another line.\u0026quot;)  Use sys module import sys sys.stdout.write(\u0026quot;This is some line.\u0026quot;) sys.stdout.write(\u0026quot;This is another line.\u0026quot;)  "
},
{
	"uri": "http://tutswiki.com/read-write-config-files-in-python/",
	"title": "Writing and Reading config files in Python",
	"tags": ["python"],
	"description": "Learn how to write and read config files in Python using configparser module.",
	"content": " I\u0026rsquo;m sure you must be aware about the importance of configuration files. Config files help creating the initial settings for any project, they help avoiding the hardcoded data.\nImagine if you migrate your server to a new host and suddenly your application stops working, now you have to go through your code and search/replace IP address of host at all the places. Config file comes to the rescue in such situation. You define the IP address key in config file and use it throughout your code. Later when you want to change any attribute, just change it in the config file. So helpful, isn\u0026rsquo;t it?\nLet\u0026rsquo;s see how can we create and read config files in Python.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Creating config file in Python In Python we have configparser module which can help us with creation of config files (.ini format).\nfrom configparser import ConfigParser #Get the configparser object config_object = ConfigParser() #Assume we need 2 sections in the config file, let's call them USERINFO and SERVERCONFIG config_object[\u0026quot;USERINFO\u0026quot;] = { \u0026quot;admin\u0026quot;: \u0026quot;Chankey Pathak\u0026quot;, \u0026quot;loginid\u0026quot;: \u0026quot;chankeypathak\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;tutswiki\u0026quot; } config_object[\u0026quot;SERVERCONFIG\u0026quot;] = { \u0026quot;host\u0026quot;: \u0026quot;tutswiki.com\u0026quot;, \u0026quot;port\u0026quot;: \u0026quot;8080\u0026quot;, \u0026quot;ipaddr\u0026quot;: \u0026quot;8.8.8.8\u0026quot; } #Write the above sections to config.ini file with open('config.ini', 'w') as conf: config_object.write(conf)  Now if you check the working directory, you will notice config.ini file has been created, below is its content.\n[USERINFO] admin = Chankey Pathak password = tutswiki loginid = chankeypathak [SERVERCONFIG] host = tutswiki.com ipaddr = 8.8.8.8 port = 8080  Reading a key from config file So we have created a config file, now in your code you have to read the configuration data so that you can use it by \u0026ldquo;keyname\u0026rdquo; to avoid hardcoded data, let\u0026rsquo;s see how to do that.\nfrom configparser import ConfigParser #Read config.ini file config_object = ConfigParser() config_object.read(\u0026quot;config.ini\u0026quot;) #Get the password userinfo = config_object[\u0026quot;USERINFO\u0026quot;] print \u0026quot;Password is {}\u0026quot;.format(userinfo[\u0026quot;password\u0026quot;])  Output:\nPassword is tutswiki  Updating a key in config file Suppose you have updated the password for chankeypathak user. You can update the same in config file using below:\nfrom configparser import ConfigParser #Read config.ini file config_object = ConfigParser() config_object.read(\u0026quot;config.ini\u0026quot;) #Get the USERINFO section userinfo = config_object[\u0026quot;USERINFO\u0026quot;] #Update the password userinfo[\u0026quot;password\u0026quot;] = \u0026quot;newpassword\u0026quot; #Write changes back to file with open('config.ini', 'w') as conf: config_object.write(conf)  Now if you open the config.ini file, you will notice that the password has been updated.\n"
},
{
	"uri": "http://tutswiki.com/run-module-as-script-python/",
	"title": "How to run a Python module as script?",
	"tags": ["python"],
	"description": "If you want to run the module itself as a script then you should use the __name__ variable.",
	"content": " Suppose you have a module named mymath.py, which has a couple of functions. You can import this module in your script and call these functions.\ndef int_sum(a, b): print a+b def some_other_function(): pass  But, what if you want to run the module itself as a script?\nWell, if you want to use a Python module as script then you just have to use the conditional for __name__.\ndef int_sum(a, b): print a+b if __name__ == \u0026quot;__main__\u0026quot;: import sys int_sum(int(sys.argv[1]),int(sys.argv[2]))  Now you can run the above as:\n$ python mymath.py 1 2 3  This works because the value of built-in __name__ variable is set to __main__ if the Python code is executed directly through the interpreter. If you use the above module in a script using import then in that case the value of __name__ is the filename of module.\nAlso see  PEP 338 \u0026ndash; Executing modules as scripts What is if name == \u0026ldquo;main\u0026rdquo; in Python? What is the difference between a module and a script in Python?  "
},
{
	"uri": "http://tutswiki.com/if-name-main-in-python/",
	"title": "What is if __name__ == &#34;__main__&#34; in Python?",
	"tags": ["python"],
	"description": "If you are new to Python then you may have noticed if __name__ == &#34;__main__&#34; line in some python codes.",
	"content": " If you are new to Python then you may have noticed if __name__ == \u0026quot;__main__\u0026quot; line in some python codes.\nYou may be wondering:\n What does that mean? What purpose does it serve? I don\u0026rsquo;t see it in all Python codes, so when should I use it exactly? Can you give me some examples?  Let me try to explain the above to you.\nIn Python all modules have some built-in attributes. __name__ is one of them. Now the question is what does __name__ contain?\nWell, that depends actually. It depends on how you use the module.\n   (adsbygoogle = window.adsbygoogle || []).push({});  Case 1: Running the module directly If you run the module directly in a standalone program then in that case the value of __name__ attribute is set to __main__.\nFor example, create a file main.py and enter below code.\nif __name__ == \u0026quot;__main__\u0026quot;: print \u0026quot;Directly called from python interpreter\u0026quot; print \u0026quot;Value of __name__ attribute is \u0026quot;+__name__ else: print \u0026quot;Not directly called\u0026quot; print \u0026quot;Value of __name__ attribute is \u0026quot;+__name__  Now run the above code as below:\n$ python main.py  Output:\nDirectly called from Python interpreter Value of __name__ attribute is __main__  Notice that when we ran the program directly from python interpreter the conditional __name__ == __main__ returned True and the print statement inside the if block got executed.\nCase 2: Using the module with import If you use the module in another program (using the import function), then in that case the value of __name__ attribute is set to the filename of the module.\nLet\u0026rsquo;s try to import the above created main.py.\n$ python \u0026gt;\u0026gt;\u0026gt; import main.py  Output:\nNot directly called Value of __name__ attribute is main  References  __main__ — Top-level script environment What does if __name__ == “__main__”: do?  "
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter1/",
	"title": "Chapter 1 - Reading from a CSV",
	"tags": [],
	"description": "Read data from a CSV using pandas dataframe",
	"content": " # Render our plots inline %matplotlib inline import pandas as pd import matplotlib.pyplot as plt pd.set_option('display.mpl_style', 'default') # Make the graphs a bit prettier plt.rcParams['figure.figsize'] = (15, 5)  1.1 Reading data from a CSV file You can read data from a CSV file using the read_csv function. By default, it assumes that the fields are comma-separated.\nWe\u0026rsquo;re going to be looking some cyclist data from Montréal. Here\u0026rsquo;s the original page (in French). We\u0026rsquo;re using the data from 2012. Download the bikes.csv file to try out the below examples.\nThis dataset is a list of how many people were on 7 different bike paths in Montreal, each day.\nimport pandas as pd broken_df = pd.read_csv('bikes.csv') # Look at the first 3 rows broken_df[:3]  Output:\n  Date;Berri 1;Br�beuf (donn�es non disponibles);C�te-Sainte-Catherine;Maisonneuve 1;Maisonneuve 2;du Parc;Pierre-Dupuy;Rachel1;St-Urbain (donn�es non disponibles)     0  01/01/2012;35;;0;38;51;26;10;16;   1  02/01/2012;83;;1;68;153;53;6;43;   2  03/01/2012;135;;2;104;248;89;3;58;    3 rows × 1 columns\n  You\u0026rsquo;ll notice that this is totally broken! read_csv has a bunch of options that will let us fix that, though. Here we\u0026rsquo;ll\n Change the column separator to a ; Set the encoding to '_latin1_' (the default is '_utf8_') Parse the dates in the 'Date' column Tell it that our dates have the date first instead of the month first Set the index to be the 'Date' column  fixed_df = pd.read_csv('bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date') fixed_df[:3]  Output:\n  Berri 1 Brébeuf (données non disponibles) Côte-Sainte-Catherine Maisonneuve 1 Maisonneuve 2 du Parc Pierre-Dupuy Rachel1 St-Urbain (données non disponibles)   Date              2012-01-01  35 NaN  0  38  51  26  10  16 NaN   2012-01-02  83 NaN  1  68  153  53  6  43 NaN   2012-01-03  135 NaN  2  104  248  89  3  58 NaN    3 rows × 9 columns\n 1.2 Selecting a column When you read a CSV, you get a kind of object called a DataFrame, which is made up of rows and columns. You get columns out of a DataFrame the same way you get elements out of a dictionary.\nHere\u0026rsquo;s an example:\nfixed_df['Berri 1']  Output:\nDate 2012-01-01 35 2012-01-02 83 2012-01-03 135 2012-01-04 144 2012-01-05 197 2012-01-06 146 2012-01-07 98 2012-01-08 95 2012-01-09 244 2012-01-10 397 2012-01-11 273 2012-01-12 157 2012-01-13 75 2012-01-14 32 2012-01-15 54 ... 2012-10-22 3650 2012-10-23 4177 2012-10-24 3744 2012-10-25 3735 2012-10-26 4290 2012-10-27 1857 2012-10-28 1310 2012-10-29 2919 2012-10-30 2887 2012-10-31 2634 2012-11-01 2405 2012-11-02 1582 2012-11-03 844 2012-11-04 966 2012-11-05 2247 Name: Berri 1, Length: 310, dtype: int64  1.3 Plotting a column Just add .plot() to the end! How could it be easier? =)\nWe can see that, unsurprisingly, not many people are biking in January, February, and March.\nimport pandas as pd import matplotlib.pyplot as plt fixed_df = pd.read_csv('bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date') fixed_df['Berri 1'].plot()  Output:   We can also plot all the columns just as easily. We\u0026rsquo;ll make it a little bigger, too. You can see that it\u0026rsquo;s more squished together, but all the bike paths behave basically the same \u0026ndash; if it\u0026rsquo;s a bad day for cyclists, it\u0026rsquo;s a bad day everywhere.\nfixed_df.plot(figsize=(15, 10)) plt.show()  Output:\n  1.4 Putting all that together Here\u0026rsquo;s the code we needed to write do draw that graph, all together:\ndf = pd.read_csv('bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date') df['Berri 1'].plot()  Output:  \n"
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter2/",
	"title": "Chapter 2 - Selecting and finding desired data",
	"tags": [],
	"description": "Select data from a pandas dataframe, take slices and get columns",
	"content": " # The usual preamble %matplotlib inline import pandas as pd import matplotlib.pyplot as plt # Make the graphs a bit prettier, and bigger pd.set_option('display.mpl_style', 'default') # This is necessary to show lots of columns in pandas 0.12. # Not necessary in pandas 0.13. pd.set_option('display.width', 5000) pd.set_option('display.max_columns', 60) plt.rcParams['figure.figsize'] = (15, 5)  We\u0026rsquo;re going to use a new dataset here, to demonstrate how to deal with larger datasets. This is a subset of the of 311 service requests from NYC Open Data. Download the file 311-service-requests.csv.\ncomplaints = pd.read_csv('311-service-requests.csv')  Depending on your pandas version, you might see an error like \u0026quot;DtypeWarning: Columns (8) have mixed types\u0026quot;. This means that it\u0026rsquo;s encountered a problem reading in our data. In this case it almost certainly means that it has columns where some of the entries are strings and some are integers.\nFor now we\u0026rsquo;re going to ignore it and hope we don\u0026rsquo;t run into a problem, but in the long run we\u0026rsquo;d need to investigate this warning.\n2.1 What\u0026rsquo;s even in it? (the summary) When you print a large dataframe, it will only show you the first few rows. If you don\u0026rsquo;t see this, don\u0026rsquo;t panic! The default behavior for large dataframes changed between pandas 0.12 and 0.13. Previous to 0.13 it would show you a summary of the dataframe. This includes all the columns, and how many non-null values there are in each column.\ncomplaints  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0   26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1   26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2   26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3   26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4   26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)   5   26592370  10/31/2013 01:46:52 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Banging/Pounding  Club/Bar/Restaurant  11372  37 AVENUE  37 AVENUE  84 STREET  85 STREET  NaN  NaN  BLOCKFACE  JACKSON HEIGHTS  NaN  Precinct  Open  10/31/2013 09:46:52 AM  NaN  03 QUEENS  QUEENS  1016948  212540  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.749989 -73.881988  (40.7499893014072, -73.88198770727831)   6   26595682  10/31/2013 01:46:40 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11419  107-50 109 STREET  109 STREET  107 AVENUE  109 AVENUE  NaN  NaN  ADDRESS  SOUTH RICHMOND HILL  NaN  Precinct  Assigned  10/31/2013 09:46:40 AM  10/31/2013 01:59:51 AM  10 QUEENS  QUEENS  1030919  187622  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681533 -73.831737  (40.68153278675525, -73.83173699701601)   7   26595195  10/31/2013 01:44:19 AM  10/31/2013 01:58:49 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11417  137-09 CROSSBAY BOULEVARD  CROSSBAY BOULEVARD  PITKIN AVENUE  VAN WICKLEN ROAD  NaN  NaN  ADDRESS  OZONE PARK  NaN  Precinct  Closed  10/31/2013 09:44:19 AM  10/31/2013 01:58:49 AM  10 QUEENS  QUEENS  1027776  184076  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.671816 -73.843092  (40.67181584567338, -73.84309181950769)   8   26590540  10/31/2013 01:44:14 AM  10/31/2013 02:28:04 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Talking  Club/Bar/Restaurant  10011  258 WEST 15 STREET  WEST 15 STREET  7 AVENUE  8 AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:44:14 AM  10/31/2013 02:00:56 AM  04 MANHATTAN  MANHATTAN  984031  208847  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.739913 -74.000790  (40.73991339303542, -74.00079028612932)   9   26594392  10/31/2013 01:34:41 AM  10/31/2013 02:23:51 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11225  835 NOSTRAND AVENUE  NOSTRAND AVENUE  UNION STREET  PRESIDENT STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 09:34:41 AM  10/31/2013 01:48:26 AM  09 BROOKLYN  BROOKLYN  997941  182725  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.668204 -73.950648  (40.66820406598287, -73.95064760056546)   10  26595176  10/31/2013 01:25:12 AM  NaN  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  11218  3775 18 AVENUE  18 AVENUE  EAST 9 STREET  EAST 8 STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Open  10/31/2013 09:25:12 AM  NaN  14 BROOKLYN  BROOKLYN  992726  170399  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634378 -73.969462  (40.63437840816299, -73.96946177104543)   11  26591982  10/31/2013 01:24:14 AM  10/31/2013 01:54:39 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10003  187 2 AVENUE  2 AVENUE  EAST 11 STREET  EAST 12 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:24:14 AM  10/31/2013 01:54:39 AM  03 MANHATTAN  MANHATTAN  988110  205533  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.730816 -73.986073  (40.73081644089586, -73.98607265739876)   12  26594169  10/31/2013 01:20:57 AM  10/31/2013 02:12:31 AM  NYPD  New York City Police Department  Illegal Parking  Double Parked Blocking Vehicle  Street/Sidewalk  10029  65 EAST 99 STREET  EAST 99 STREET  MADISON AVENUE  PARK AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:20:57 AM  10/31/2013 01:42:05 AM  11 MANHATTAN  MANHATTAN  997470  226725  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.788974 -73.952259  (40.78897400211689, -73.95225898702977)   13  26594391  10/31/2013 01:20:13 AM  NaN  NYPD  New York City Police Department  Noise - Vehicle  Engine Idling  Street/Sidewalk  10466  NaN  NaN  NaN  NaN  STRANG AVENUE  AMUNDSON AVENUE  INTERSECTION  BRONX  NaN  Precinct  Open  10/31/2013 09:20:13 AM  NaN  12 BRONX  BRONX  1029467  264124  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.891517 -73.836457  (40.89151738488846, -73.83645714593568)   14  26590917  10/31/2013 01:19:54 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Rat Sighting  1-2 Family Mixed Use Building  11219  63 STREET  63 STREET  13 AVENUE  14 AVENUE  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  NaN  Pending  11/30/2013 01:19:54 AM  10/31/2013 01:29:26 AM  10 BROOKLYN  BROOKLYN  984467  167519  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.626477 -73.999218  (40.6264774690411, -73.99921826202639)   15  26591458  10/31/2013 01:14:02 AM  10/31/2013 01:30:34 AM  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  10025  NaN  NaN  NaN  NaN  WEST 99 STREET  BROADWAY  INTERSECTION  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:14:02 AM  10/31/2013 01:30:34 AM  07 MANHATTAN  MANHATTAN  992454  229500  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.796597 -73.970370  (40.7965967075252, -73.97036973473399)   16  26594086  10/31/2013 12:54:03 AM  10/31/2013 02:16:39 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10310  173 CAMPBELL AVENUE  CAMPBELL AVENUE  HENDERSON AVENUE  WINEGAR LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:54:03 AM  10/31/2013 02:07:14 AM  01 STATEN ISLAND  STATEN ISLAND  952013  171076  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636182 -74.116150  (40.63618202176914, -74.1161500428337)   17  26595117  10/31/2013 12:52:46 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Posted Parking Sign Violation  Street/Sidewalk  11236  NaN  NaN  NaN  NaN  ROCKAWAY PARKWAY  SKIDMORE AVENUE  INTERSECTION  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:52:46 AM  NaN  18 BROOKLYN  BROOKLYN  1015289  169710  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.632437 -73.888173  (40.63243692394328, -73.88817263437012)   18  26590389  10/31/2013 12:51:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  NaN  226 42 ST E  42 ST E  CHURCH AVE  SNYDER AVE  NaN  NaN  ADDRESS  NaN  NaN  NaN  Open  NaN  NaN  Unspecified BROOKLYN  BROOKLYN  NaN  NaN  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   19  26594210  10/31/2013 12:46:27 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10033  NaN  NaN  NaN  NaN  WEST 184 STREET  BROADWAY  INTERSECTION  NEW YORK  NaN  Precinct  Assigned  10/31/2013 08:46:27 AM  10/31/2013 01:32:41 AM  12 MANHATTAN  MANHATTAN  1002294  249712  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.852058 -73.934776  (40.85205827756883, -73.93477640780834)   20  26592932  10/31/2013 12:43:47 AM  10/31/2013 12:56:20 AM  NYPD  New York City Police Department  Noise - House of Worship  Loud Music/Party  House of Worship  11216  778 PARK PLACE  PARK PLACE  ROGERS AVENUE  NOSTRAND AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:43:47 AM  10/31/2013 12:56:20 AM  08 BROOKLYN  BROOKLYN  997608  184656  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.673505 -73.951844  (40.67350473678714, -73.95184414979961)   21  26594152  10/31/2013 12:41:17 AM  10/31/2013 01:04:37 AM  NYPD  New York City Police Department  Noise - Commercial  Banging/Pounding  Store/Commercial  10016  155 E 34TH ST  E 34TH ST  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:41:17 AM  10/31/2013 01:04:38 AM  06 MANHATTAN  MANHATTAN  990133  211136  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.746194 -73.978769  (40.74619417253121, -73.97876853124392)   22  26589678  10/31/2013 12:39:55 AM  NaN  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Music  Street/Sidewalk  11419  NaN  NaN  NaN  NaN  112 STREET  ATLANTIC AVENUE  INTERSECTION  SOUTH RICHMOND HILL  NaN  Precinct  Open  10/31/2013 08:39:55 AM  NaN  09 QUEENS  QUEENS  1030314  191578  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.692394 -73.833891  (40.69239424979043, -73.8338912453996)   23  26592304  10/31/2013 12:38:00 AM  NaN  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11216  371 TOMPKINS AVENUE  TOMPKINS AVENUE  MADISON STREET  PUTNAM AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Assigned  10/31/2013 08:38:00 AM  10/31/2013 01:16:53 AM  03 BROOKLYN  BROOKLYN  999720  188825  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.684944 -73.944221  (40.6849442562592, -73.94422078036632)   24  26591892  10/31/2013 12:37:16 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  Partial Access  Street/Sidewalk  10305  1496 BAY STREET  BAY STREET  LYMAN AVENUE  SCHOOL ROAD  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Assigned  10/31/2013 08:37:16 AM  10/31/2013 12:52:10 AM  01 STATEN ISLAND  STATEN ISLAND  967283  160518  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.607245 -74.061106  (40.60724493456944, -74.06110566015863)   25  26591573  10/31/2013 12:35:18 AM  10/31/2013 02:41:35 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:35:18 AM  10/31/2013 01:45:17 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)   26  26590509  10/31/2013 12:33:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  NaN  38 ST E  38 ST E  CHURCH AVE  LINDEN BLVD  NaN  NaN  BLOCKFACE  NaN  NaN  NaN  Open  NaN  NaN  Unspecified BROOKLYN  BROOKLYN  NaN  NaN  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   27  26591379  10/31/2013 12:32:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Harboring Bees/Wasps  Bees/Wasps - Not a beekeper  3+ Family Mixed Use Building  10025  501 WEST 110 STREET  WEST 110 STREET  AMSTERDAM AVENUE  BROADWAY  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  11/30/2013 12:32:44 AM  NaN  09 MANHATTAN  MANHATTAN  994143  231888  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.803149 -73.964266  (40.80314938553783, -73.96426608076082)   28  26594085  10/31/2013 12:32:08 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10026  121 WEST 116 STREET  WEST 116 STREET  LENOX AVENUE  7 AVENUE  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Assigned  10/31/2013 08:32:08 AM  10/31/2013 02:00:57 AM  10 MANHATTAN  MANHATTAN  997947  231613  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.802390 -73.950526  (40.80238950799943, -73.95052644123253)   29  26589201  10/31/2013 12:32:00 AM  NaN  DOT  Department of Transportation  Street Light Condition  Street Light Out  NaN  10309  295 BAYVIEW AVENUE  BAYVIEW AVENUE  VAIL AVENUE  BAYVIEW LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  NaN  Open  NaN  NaN  03 STATEN ISLAND  STATEN ISLAND  927687  127837  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.517378 -74.203435  (40.517377871705676, -74.20343466779575)   30  26591641  10/31/2013 12:31:17 AM  10/31/2013 02:41:36 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:31:17 AM  10/31/2013 01:43:09 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)   31  26595564  10/31/2013 12:30:36 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11236  AVENUE J  AVENUE J  EAST 80 STREET  EAST 81 STREET  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:30:36 AM  NaN  18 BROOKLYN  BROOKLYN  1008937  170310  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634104 -73.911055  (40.634103775951736, -73.91105541883589)   32  26591378  10/31/2013 12:30:31 AM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  10036  645 10 AVENUE  10 AVENUE  WEST 45 STREET  WEST 46 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  NaN  NaN  04 MANHATTAN  MANHATTAN  985965  216868  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.761929 -73.993809  (40.761928847500016, -73.99380918401052)   33  26593872  10/31/2013 12:29:47 AM  10/31/2013 12:38:29 AM  NYPD  New York City Police Department  Noise - House of Worship  Banging/Pounding  House of Worship  10025  NaN  NaN  NaN  NaN  WEST 99 STREET  AMSTERDAM AVENUE  INTERSECTION  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:29:47 AM  10/31/2013 12:38:29 AM  07 MANHATTAN  MANHATTAN  992846  229279  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.795990 -73.968954  (40.795989749917204, -73.96895423714467)   34  26591420  10/31/2013 12:28:30 AM  10/31/2013 02:06:11 AM  NYPD  New York City Police Department  Homeless Encampment  NaN  Residential Building/House  10025  2754 BROADWAY  BROADWAY  WEST 105 STREET  WEST 106 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:28:30 AM  10/31/2013 02:06:11 AM  07 MANHATTAN  MANHATTAN  993139  231139  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.801095 -73.967894  (40.8010946529914, -73.96789356094007)   35  26592976  10/31/2013 12:23:24 AM  10/31/2013 01:05:41 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11433  173-41 103 ROAD  103 ROAD  173 STREET  177 STREET  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Closed  10/31/2013 08:23:24 AM  10/31/2013 01:05:41 AM  12 QUEENS  QUEENS  1044124  195866  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.704081 -73.784054  (40.70408112125158, -73.78405385422116)   36  26590262  10/31/2013 12:23:00 AM  NaN  DOT  Department of Transportation  Traffic Signal Condition  Controller  NaN  11235  NaN  NaN  NaN  NaN  SHORE BOULEVARD  CASS PLACE  INTERSECTION  BROOKLYN  NaN  NaN  Open  NaN  NaN  15 BROOKLYN  BROOKLYN  997073  151225  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.581744 -73.953836  (40.5817444882428, -73.95383634845487)   37  26589606  10/31/2013 12:20:44 AM  10/31/2013 02:10:24 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11216  826 ST JOHN'S PLACE  ST JOHN'S PLACE  ROGERS AVENUE  NOSTRAND AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:20:44 AM  10/31/2013 02:10:24 AM  08 BROOKLYN  BROOKLYN  997865  183985  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.671663 -73.950919  (40.671662601079895, -73.95091901534035)   38  26592083  10/31/2013 12:20:00 AM  NaN  DOT  Department of Transportation  Traffic Signal Condition  Controller  NaN  11213  NaN  NaN  NaN  NaN  BUFFALO AVENUE  PARK PLACE  INTERSECTION  BROOKLYN  NaN  NaN  Open  NaN  NaN  08 BROOKLYN  BROOKLYN  1004987  184136  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.672063 -73.925244  (40.67206324438088, -73.92524432147842)   39  26593840  10/31/2013 12:19:48 AM  NaN  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11379  78-41 68 ROAD  68 ROAD  78 STREET  79 STREET  NaN  NaN  ADDRESS  MIDDLE VILLAGE  NaN  Precinct  Open  10/31/2013 08:19:48 AM  NaN  05 QUEENS  QUEENS  1019062  198120  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.710402 -73.874433  (40.71040190143904, -73.8744325577748)   40  26589646  10/31/2013 12:18:05 AM  10/31/2013 01:26:15 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11101  34-19 STEINWAY STREET  STEINWAY STREET  34 AVENUE  35 AVENUE  NaN  NaN  ADDRESS  LONG ISLAND CITY  NaN  Precinct  Closed  10/31/2013 08:18:05 AM  10/31/2013 01:26:15 AM  01 QUEENS  QUEENS  1006080  214807  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.756245 -73.921205  (40.75624514774764, -73.92120466494264)   41  26593296  10/31/2013 12:16:25 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Food Establishment  Rodents/Insects/Garbage  Restaurant/Bar/Deli/Bakery  10014  12 CHRISTOPHER STREET  CHRISTOPHER STREET  GREENWICH AVENUE  GAY STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  NaN  Open  12/07/2013 12:16:25 AM  NaN  02 MANHATTAN  MANHATTAN  984181  206685  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.733979 -74.000249  (40.73397924003587, -74.0002489720853)   42  26590480  10/31/2013 12:15:06 AM  10/31/2013 03:00:20 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  11231  325 COLUMBIA STREET  COLUMBIA STREET  NaN  NaN  NaN  NaN  LATLONG  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:15:06 AM  10/31/2013 02:58:55 AM  06 BROOKLYN  BROOKLYN  982995  187440  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681156 -74.004525  (40.68115617695543, -74.00452481832494)   43  26589626  10/31/2013 12:14:42 AM  10/31/2013 01:39:00 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  11234  2192 FLATBUSH AVENUE  FLATBUSH AVENUE  EAST 46 STREET  AVENUE O  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:14:42 AM  10/31/2013 01:39:00 AM  18 BROOKLYN  BROOKLYN  1003628  163910  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.616550 -73.930202  (40.61655032892211, -73.93020153359745)   44  26592898  10/31/2013 12:12:08 AM  10/31/2013 01:13:45 AM  NYPD  New York City Police Department  Noise - Park  Loud Talking  Park/Playground  10457  CROTONA PARK NORTH  CROTONA PARK NORTH  CLINTON AVENUE  PROSPECT AVENUE  NaN  NaN  BLOCKFACE  BRONX  NaN  Precinct  Closed  10/31/2013 08:12:08 AM  10/31/2013 01:13:45 AM  06 BRONX  BRONX  1013947  245819  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.841342 -73.892672  (40.841341641554614, -73.89267161957397)   45  26590446  10/31/2013 12:11:58 AM  10/31/2013 01:54:38 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10459  819 EAST 167 STREET  EAST 167 STREET  UNION AVENUE  PROSPECT AVENUE  NaN  NaN  ADDRESS  BRONX  NaN  Precinct  Closed  10/31/2013 08:11:58 AM  10/31/2013 01:54:38 AM  03 BRONX  BRONX  1011935  240454  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.826623 -73.899965  (40.826622810177874, -73.8999653556452)   46  26595546  10/31/2013 12:09:07 AM  10/31/2013 12:53:12 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10465  4005 EAST TREMONT AVENUE  EAST TREMONT AVENUE  SAMPSON AVENUE  GERBER PLACE  NaN  NaN  ADDRESS  BRONX  NaN  Precinct  Closed  10/31/2013 08:09:07 AM  10/31/2013 12:53:12 AM  10 BRONX  BRONX  1034640  238172  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.820259 -73.817942  (40.820259030934515, -73.81794234356029)   47  26595944  10/31/2013 12:08:47 AM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  10036  NaN  NaN  NaN  NaN  WEST 46 STREET  10 AVENUE  INTERSECTION  NEW YORK  NaN  NaN  Open  11/14/2013 12:08:47 AM  NaN  04 MANHATTAN  MANHATTAN  986020  216961  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.762184 -73.993611  (40.76218409774632, -73.99361062023596)   48  26595084  10/31/2013 12:07:45 AM  10/31/2013 01:43:11 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10014  12 CHRISTOPHER STREET  CHRISTOPHER STREET  GREENWICH AVENUE  GAY STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:07:45 AM  10/31/2013 01:43:11 AM  02 MANHATTAN  MANHATTAN  984181  206685  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.733979 -74.000249  (40.73397924003587, -74.0002489720853)   49  26595553  10/31/2013 12:05:10 AM  10/31/2013 02:43:43 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11225  25 LEFFERTS AVENUE  LEFFERTS AVENUE  WASHINGTON AVENUE  BEDFORD AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:05:10 AM  10/31/2013 01:29:29 AM  09 BROOKLYN  BROOKLYN  995366  180388  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.661793 -73.959934  (40.6617931276793, -73.95993363978067)   50  26594087  10/31/2013 12:04:50 AM  10/31/2013 01:09:38 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  10011  258 WEST 15TH STREET  WEST 15TH STREET  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:04:50 AM  10/31/2013 01:09:38 AM  04 MANHATTAN  MANHATTAN  983789  208891  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.740034 -74.001664  (40.74003415280169, -74.00166357336052)   51  26595572  10/31/2013 12:03:27 AM  NaN  DOT  Department of Transportation  Broken Muni Meter  No Receipt  Street  10003  NaN  NaN  NaN  NaN  EAST 10 STREET  2 AVENUE  INTERSECTION  NEW YORK  NaN  NaN  Open  11/21/2013 12:03:27 AM  NaN  03 MANHATTAN  MANHATTAN  987906  205154  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.729776 -73.986809  (40.72977626532991, -73.98680891976119)   52  26590848  10/31/2013 12:02:01 AM  10/31/2013 01:02:28 AM  NYPD  New York City Police Department  Blocked Driveway  No Access  Street/Sidewalk  11207  422 WYONA STREET  WYONA STREET  SUTTER AVENUE  BLAKE AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:02:01 AM  10/31/2013 01:02:28 AM  05 BROOKLYN  BROOKLYN  1014188  182855  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.668521 -73.892081  (40.66852085465471, -73.89208096944678)   53  26590413  10/31/2013 12:01:47 AM  10/31/2013 12:39:31 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10002  121 RIVINGTON STREET  RIVINGTON STREET  ESSEX STREET  NORFOLK STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:01:47 AM  10/31/2013 12:39:31 AM  03 MANHATTAN  MANHATTAN  987766  201503  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.719755 -73.987316  (40.71975521311322, -73.98731595609806)   54  26591287  10/31/2013 12:01:45 AM  10/31/2013 12:02:37 AM  HRA  HRA Benefit Card Replacement  Benefit Card Replacement  Medicaid  NYC Street Address  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  Closed  NaN  NaN  0 Unspecified  Unspecified  NaN  NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   55  26595001  10/31/2013 12:01:34 AM  10/31/2013 01:32:43 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Store/Commercial  10034  524 WEST 207TH STREET  WEST 207TH STREET  NaN  NaN  NaN  NaN  LATLONG  NEW YORK  NaN  Precinct  Closed  10/31/2013 08:01:34 AM  10/31/2013 01:32:43 AM  01 MANHATTAN  MANHATTAN  1006481  254514  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.865229 -73.919626  (40.86522877164924, -73.91962575276823)   56  26591162  10/31/2013 12:01:00 AM  NaN  DSNY  BCC - Brooklyn South  Sanitation Condition  15 Street Cond/Dump-Out/Drop-Off  Street  11231  135 COLUMBIA STREET  COLUMBIA STREET  KANE STREET  IRVING STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  DSNY Garage  Open  NaN  NaN  06 BROOKLYN  BROOKLYN  983797  189648  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.687217 -74.001633  (40.68721671044577, -74.00163340956126)   57  26593459  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  ELECTRIC  ELECTRIC-SUPPLY  RESIDENTIAL BUILDING  11233  199 HOWARD AVENUE  HOWARD AVENUE  BAINBRIDGE STREET  CHAUNCEY STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  03 BROOKLYN  BROOKLYN  1006513  187623  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681631 -73.919732  (40.68163056217252, -73.91973166452124)   58  26592634  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  PLUMBING  BASIN/SINK  RESIDENTIAL BUILDING  11233  199 HOWARD AVENUE  HOWARD AVENUE  BAINBRIDGE STREET  CHAUNCEY STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  03 BROOKLYN  BROOKLYN  1006513  187623  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.681631 -73.919732  (40.68163056217252, -73.91973166452124)   59  26591688  10/31/2013 12:00:00 AM  NaN  HPD  Department of Housing Preservation and Develop...  HEATING  HEAT  RESIDENTIAL BUILDING  10453  150 WEST 179 STREET  WEST 179 STREET  ANDREWS AVENUE  LORING PLACE  NaN  NaN  ADDRESS  BRONX  NaN  NaN  Open  NaN  10/31/2013 12:00:00 AM  05 BRONX  BRONX  1008161  250940  Unspecified  BRONX  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  NaN NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.855415 -73.913565  (40.855414830918306, -73.91356461276855)    ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...    111069 rows × 52 columns\n  2.2 Selecting columns and rows To select a column, we index with the name of the column, like this:\ncomplaints['Complaint Type']  Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent 5 Noise - Commercial 6 Blocked Driveway 7 Noise - Commercial 8 Noise - Commercial 9 Noise - Commercial 10 Noise - House of Worship 11 Noise - Commercial 12 Illegal Parking 13 Noise - Vehicle 14 Rodent ... 111054 Noise - Street/Sidewalk 111055 Noise - Commercial 111056 Street Sign - Missing 111057 Noise 111058 Noise - Commercial 111059 Noise - Street/Sidewalk 111060 Noise 111061 Noise - Commercial 111062 Water System 111063 Water System 111064 Maintenance or Facility 111065 Illegal Parking 111066 Noise - Street/Sidewalk 111067 Noise - Commercial 111068 Blocked Driveway Name: Complaint Type, Length: 111069, dtype: object  To get the first 5 rows of a dataframe, we can use a slice: df[:5]. This is a great way to get a sense for what kind of information is in the dataframe \u0026ndash; take a minute to look at the contents and get a feel for this dataset.\ncomplaints[:5]  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0  26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1  26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2  26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3  26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4  26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)    5 rows × 52 columns\n  We can combine these to get the first 5 rows of a column:\ncomplaints['Complaint Type'][:5]  Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent Name: Complaint Type, dtype: object  and it doesn\u0026rsquo;t matter which direction we do it in:\ncomplaints['Complaint Type'][:5]  Output:\n0 Noise - Street/Sidewalk 1 Illegal Parking 2 Noise - Commercial 3 Noise - Vehicle 4 Rodent Name: Complaint Type, dtype: object  2.3 Selecting multiple columns What if we just want to know the complaint type and the borough, but not the rest of the information? Pandas makes it really easy to select a subset of the columns: just index with list of columns you want.\ncomplaints[['Complaint Type', 'Borough']]  Output:\n  Complaint Type Borough     0   Noise - Street/Sidewalk  QUEENS   1   Illegal Parking  QUEENS   2   Noise - Commercial  MANHATTAN   3   Noise - Vehicle  MANHATTAN   4   Rodent  MANHATTAN   5   Noise - Commercial  QUEENS   6   Blocked Driveway  QUEENS   7   Noise - Commercial  QUEENS   8   Noise - Commercial  MANHATTAN   9   Noise - Commercial  BROOKLYN   10  Noise - House of Worship  BROOKLYN   11  Noise - Commercial  MANHATTAN   12  Illegal Parking  MANHATTAN   13  Noise - Vehicle  BRONX   14  Rodent  BROOKLYN   15  Noise - House of Worship  MANHATTAN   16  Noise - Street/Sidewalk  STATEN ISLAND   17  Illegal Parking  BROOKLYN   18  Street Light Condition  BROOKLYN   19  Noise - Commercial  MANHATTAN   20  Noise - House of Worship  BROOKLYN   21  Noise - Commercial  MANHATTAN   22  Noise - Vehicle  QUEENS   23  Noise - Commercial  BROOKLYN   24  Blocked Driveway  STATEN ISLAND   25  Noise - Street/Sidewalk  STATEN ISLAND   26  Street Light Condition  BROOKLYN   27  Harboring Bees/Wasps  MANHATTAN   28  Noise - Street/Sidewalk  MANHATTAN   29  Street Light Condition  STATEN ISLAND   30  Blocked Driveway  STATEN ISLAND   31  Noise - Street/Sidewalk  BROOKLYN   32  Taxi Complaint  MANHATTAN   33  Noise - House of Worship  MANHATTAN   34  Homeless Encampment  MANHATTAN   35  Blocked Driveway  QUEENS   36  Traffic Signal Condition  BROOKLYN   37  Noise - Commercial  BROOKLYN   38  Traffic Signal Condition  BROOKLYN   39  Blocked Driveway  QUEENS   40  Noise - Commercial  QUEENS   41  Food Establishment  MANHATTAN   42  Noise - Commercial  BROOKLYN   43  Noise - Commercial  BROOKLYN   44  Noise - Park  BRONX   45  Noise - Street/Sidewalk  BRONX   46  Noise - Commercial  BRONX   47  Taxi Complaint  MANHATTAN   48  Noise - Commercial  MANHATTAN   49  Noise - Street/Sidewalk  BROOKLYN   50  Noise - Commercial  MANHATTAN   51  Broken Muni Meter  MANHATTAN   52  Blocked Driveway  BROOKLYN   53  Noise - Commercial  MANHATTAN   54  Benefit Card Replacement  Unspecified   55  Noise - Commercial  MANHATTAN   56  Sanitation Condition  BROOKLYN   57  ELECTRIC  BROOKLYN   58  PLUMBING  BROOKLYN   59  HEATING  BRONX    ... ...    111069 rows × 2 columns\n  That showed us a summary, and then we can look at the first 10 rows:\ncomplaints[['Complaint Type', 'Borough']][:10]  Output:\n  Complaint Type Borough     0  Noise - Street/Sidewalk  QUEENS   1  Illegal Parking  QUEENS   2  Noise - Commercial  MANHATTAN   3  Noise - Vehicle  MANHATTAN   4  Rodent  MANHATTAN   5  Noise - Commercial  QUEENS   6  Blocked Driveway  QUEENS   7  Noise - Commercial  QUEENS   8  Noise - Commercial  MANHATTAN   9  Noise - Commercial  BROOKLYN    10 rows × 2 columns\n  2.4 What\u0026rsquo;s the most common complaint type? This is a really easy question to answer! There\u0026rsquo;s a .value_counts() method that we can use:\ncomplaints['Complaint Type'].value_counts()  Output:\nHEATING 14200 GENERAL CONSTRUCTION 7471 Street Light Condition 7117 DOF Literature Request 5797 PLUMBING 5373 PAINT - PLASTER 5149 Blocked Driveway 4590 NONCONST 3998 Street Condition 3473 Illegal Parking 3343 Noise 3321 Traffic Signal Condition 3145 Dirty Conditions 2653 Water System 2636 Noise - Commercial 2578 ... Opinion for the Mayor 2 Window Guard 2 DFTA Literature Request 2 Legal Services Provider Complaint 2 Open Flame Permit 1 Snow 1 Municipal Parking Facility 1 X-Ray Machine/Equipment 1 Stalled Sites 1 DHS Income Savings Requirement 1 Tunnel Condition 1 Highway Sign - Damaged 1 Ferry Permit 1 Trans Fat 1 DWD 1 Length: 165, dtype: int64  If we just wanted the top 10 most common complaints, we can do this:\ncomplaint_counts = complaints['Complaint Type'].value_counts() complaint_counts[:10]  Output:\nHEATING 14200 GENERAL CONSTRUCTION 7471 Street Light Condition 7117 DOF Literature Request 5797 PLUMBING 5373 PAINT - PLASTER 5149 Blocked Driveway 4590 NONCONST 3998 Street Condition 3473 Illegal Parking 3343 dtype: int64  But it gets better! We can plot them!\ncomplaint_counts[:10].plot(kind='bar')  Output:  \n"
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter3/",
	"title": "Chapter 3 - Filtering dataframes",
	"tags": [],
	"description": "Here we get into serious slicing and dicing and learn how to filter dataframes in complicated ways, really fast.",
	"content": " # The usual preamble %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np # Make the graphs a bit prettier, and bigger pd.set_option('display.mpl_style', 'default') plt.rcParams['figure.figsize'] = (15, 5) # This is necessary to show lots of columns in pandas 0.12. # Not necessary in pandas 0.13. pd.set_option('display.width', 5000) pd.set_option('display.max_columns', 60)  Let\u0026rsquo;s continue with our NYC 311 service requests example.\ncomplaints = pd.read_csv('311-service-requests.csv')  3.1 Selecting only noise complaints I\u0026rsquo;d like to know which borough has the most noise complaints. First, we\u0026rsquo;ll take a look at the data to see what it looks like:\ncomplaints[:5]  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0  26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   1  26593698  10/31/2013 02:01:04 AM  NaN  NYPD  New York City Police Department  Illegal Parking  Commercial Overnight Parking  Street/Sidewalk  11378  58 AVENUE  58 AVENUE  58 PLACE  59 STREET  NaN  NaN  BLOCKFACE  MASPETH  NaN  Precinct  Open  10/31/2013 10:01:04 AM  NaN  05 QUEENS  QUEENS  1009349  201984  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.721041 -73.909453  (40.721040535628305, -73.90945306791765)   2  26594139  10/31/2013 02:00:24 AM  10/31/2013 02:40:32 AM  NYPD  New York City Police Department  Noise - Commercial  Loud Music/Party  Club/Bar/Restaurant  10032  4060 BROADWAY  BROADWAY  WEST 171 STREET  WEST 172 STREET  NaN  NaN  ADDRESS  NEW YORK  NaN  Precinct  Closed  10/31/2013 10:00:24 AM  10/31/2013 02:39:42 AM  12 MANHATTAN  MANHATTAN  1001088  246531  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.843330 -73.939144  (40.84332975466513, -73.93914371913482)   3  26595721  10/31/2013 01:56:23 AM  10/31/2013 02:21:48 AM  NYPD  New York City Police Department  Noise - Vehicle  Car/Truck Horn  Street/Sidewalk  10023  WEST 72 STREET  WEST 72 STREET  COLUMBUS AVENUE  AMSTERDAM AVENUE  NaN  NaN  BLOCKFACE  NEW YORK  NaN  Precinct  Closed  10/31/2013 09:56:23 AM  10/31/2013 02:21:10 AM  07 MANHATTAN  MANHATTAN  989730  222727  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.778009 -73.980213  (40.7780087446372, -73.98021349023975)   4  26590930  10/31/2013 01:53:44 AM  NaN  DOHMH  Department of Health and Mental Hygiene  Rodent  Condition Attracting Rodents  Vacant Lot  10027  WEST 124 STREET  WEST 124 STREET  LENOX AVENUE  ADAM CLAYTON POWELL JR BOULEVARD  NaN  NaN  BLOCKFACE  NEW YORK  NaN  NaN  Pending  11/30/2013 01:53:44 AM  10/31/2013 01:59:54 AM  10 MANHATTAN  MANHATTAN  998815  233545  Unspecified  MANHATTAN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.807691 -73.947387  (40.80769092704951, -73.94738703491433)    5 rows × 52 columns\n  To get the noise complaints, we need to find the rows where the \u0026ldquo;Complaint Type\u0026rdquo; column is \u0026ldquo;Noise - Street/Sidewalk\u0026rdquo;. I\u0026rsquo;ll show you how to do that, and then explain what\u0026rsquo;s going on.\nnoise_complaints = complaints[complaints['Complaint Type'] == \u0026quot;Noise - Street/Sidewalk\u0026quot;] noise_complaints[:3]  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     0   26589651  10/31/2013 02:08:41 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11432  90-03 169 STREET  169 STREET  90 AVENUE  91 AVENUE  NaN  NaN  ADDRESS  JAMAICA  NaN  Precinct  Assigned  10/31/2013 10:08:41 AM  10/31/2013 02:35:17 AM  12 QUEENS  QUEENS  1042027  197389  Unspecified  QUEENS  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.708275 -73.791604  (40.70827532593202, -73.79160395779721)   16  26594086  10/31/2013 12:54:03 AM  10/31/2013 02:16:39 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  10310  173 CAMPBELL AVENUE  CAMPBELL AVENUE  HENDERSON AVENUE  WINEGAR LANE  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:54:03 AM  10/31/2013 02:07:14 AM  01 STATEN ISLAND  STATEN ISLAND  952013  171076  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636182 -74.116150  (40.63618202176914, -74.1161500428337)   25  26591573  10/31/2013 12:35:18 AM  10/31/2013 02:41:35 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  10312  24 PRINCETON LANE  PRINCETON LANE  HAMPTON GREEN  DEAD END  NaN  NaN  ADDRESS  STATEN ISLAND  NaN  Precinct  Closed  10/31/2013 08:35:18 AM  10/31/2013 01:45:17 AM  03 STATEN ISLAND  STATEN ISLAND  929577  140964  Unspecified  STATEN ISLAND  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.553421 -74.196743  (40.55342078716953, -74.19674315017886)    3 rows × 52 columns\n  If you look at noise_complaints, you\u0026rsquo;ll see that this worked, and it only contains complaints with the right complaint type. But how does this work? Let\u0026rsquo;s deconstruct it into two pieces\ncomplaints['Complaint Type'] == \u0026quot;Noise - Street/Sidewalk\u0026quot;  Output:\n0 True 1 False 2 False 3 False 4 False 5 False 6 False 7 False 8 False 9 False 10 False 11 False 12 False 13 False 14 False ... 111054 True 111055 False 111056 False 111057 False 111058 False 111059 True 111060 False 111061 False 111062 False 111063 False 111064 False 111065 False 111066 True 111067 False 111068 False Name: Complaint Type, Length: 111069, dtype: bool  This is a big array of Trues and Falses, one for each row in our dataframe. When we index our dataframe with this array, we get just the rows where our boolean array evaluated to True. It\u0026rsquo;s important to note that for row filtering by a boolean array the length of our dataframe\u0026rsquo;s index must be the same length as the boolean array used for filtering.\nYou can also combine more than one condition with the \u0026amp; operator like this:\nis_noise = complaints['Complaint Type'] == \u0026quot;Noise - Street/Sidewalk\u0026quot; in_brooklyn = complaints['Borough'] == \u0026quot;BROOKLYN\u0026quot; complaints[is_noise \u0026amp; in_brooklyn][:5]  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     31   26595564  10/31/2013 12:30:36 AM  NaN  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11236  AVENUE J  AVENUE J  EAST 80 STREET  EAST 81 STREET  NaN  NaN  BLOCKFACE  BROOKLYN  NaN  Precinct  Open  10/31/2013 08:30:36 AM  NaN  18 BROOKLYN  BROOKLYN  1008937  170310  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.634104 -73.911055  (40.634103775951736, -73.91105541883589)   49   26595553  10/31/2013 12:05:10 AM  10/31/2013 02:43:43 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11225  25 LEFFERTS AVENUE  LEFFERTS AVENUE  WASHINGTON AVENUE  BEDFORD AVENUE  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 08:05:10 AM  10/31/2013 01:29:29 AM  09 BROOKLYN  BROOKLYN  995366  180388  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.661793 -73.959934  (40.6617931276793, -73.95993363978067)   109  26594653  10/30/2013 11:26:32 PM  10/31/2013 12:18:54 AM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11222  NaN  NaN  NaN  NaN  DOBBIN STREET  NORMAN STREET  INTERSECTION  BROOKLYN  NaN  Precinct  Closed  10/31/2013 07:26:32 AM  10/31/2013 12:18:54 AM  01 BROOKLYN  BROOKLYN  996925  203271  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.724600 -73.954271  (40.724599563793525, -73.95427134534344)   236  26591992  10/30/2013 10:02:58 PM  10/30/2013 10:23:20 PM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Talking  Street/Sidewalk  11218  DITMAS AVENUE  DITMAS AVENUE  NaN  NaN  NaN  NaN  LATLONG  BROOKLYN  NaN  Precinct  Closed  10/31/2013 06:02:58 AM  10/30/2013 10:23:20 PM  01 BROOKLYN  BROOKLYN  991895  171051  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.636169 -73.972455  (40.63616876563881, -73.97245504682485)   370  26594167  10/30/2013 08:38:25 PM  10/30/2013 10:26:28 PM  NYPD  New York City Police Department  Noise - Street/Sidewalk  Loud Music/Party  Street/Sidewalk  11218  126 BEVERLY ROAD  BEVERLY ROAD  CHURCH AVENUE  EAST 2 STREET  NaN  NaN  ADDRESS  BROOKLYN  NaN  Precinct  Closed  10/31/2013 04:38:25 AM  10/30/2013 10:26:28 PM  12 BROOKLYN  BROOKLYN  990144  173511  Unspecified  BROOKLYN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  40.642922 -73.978762  (40.6429222774404, -73.97876175474585)    5 rows × 52 columns\n  Or if we just wanted a few columns:\ncomplaints[is_noise \u0026amp; in_brooklyn][['Complaint Type', 'Borough', 'Created Date', 'Descriptor']][:10]  Output:\n  Complaint Type Borough Created Date Descriptor     31   Noise - Street/Sidewalk  BROOKLYN  10/31/2013 12:30:36 AM  Loud Music/Party   49   Noise - Street/Sidewalk  BROOKLYN  10/31/2013 12:05:10 AM  Loud Talking   109   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 11:26:32 PM  Loud Music/Party   236   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 10:02:58 PM  Loud Talking   370   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 08:38:25 PM  Loud Music/Party   378   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 08:32:13 PM  Loud Talking   656   Noise - Street/Sidewalk  BROOKLYN  10/30/2013 06:07:39 PM  Loud Music/Party   1251  Noise - Street/Sidewalk  BROOKLYN  10/30/2013 03:04:51 PM  Loud Talking   5416  Noise - Street/Sidewalk  BROOKLYN  10/29/2013 10:07:02 PM  Loud Talking   5584  Noise - Street/Sidewalk  BROOKLYN  10/29/2013 08:15:59 PM  Loud Music/Party    10 rows × 4 columns\n  3.2 A digression about numpy arrays On the inside, the type of a column is pd.Series\npd.Series([1,2,3])  Output:\n0 1 1 2 2 3 dtype: int64  and pandas Series are internally numpy arrays. If you add .values to the end of any Series, you\u0026rsquo;ll get its internal numpy array\nnp.array([1,2,3])  Output:\narray([1, 2, 3])  pd.Series([1,2,3]).values  Output:\narray([1, 2, 3])  So this binary-array-selection business is actually something that works with any numpy array:\narr = np.array([1,2,3]) arr != 2  Output:\narray([ True, False, True], dtype=bool)  arr[arr != 2]  Output:\narray([1, 3])  3.3 So, which borough has the most noise complaints? is_noise = complaints['Complaint Type'] == \u0026quot;Noise - Street/Sidewalk\u0026quot; noise_complaints = complaints[is_noise] noise_complaints['Borough'].value_counts()  Output:\nMANHATTAN 917 BROOKLYN 456 BRONX 292 QUEENS 226 STATEN ISLAND 36 Unspecified 1 dtype: int64  It\u0026rsquo;s Manhattan! But what if we wanted to divide by the total number of complaints, to make it make a bit more sense? That would be easy too:\nnoise_complaint_counts = noise_complaints['Borough'].value_counts() complaint_counts = complaints['Borough'].value_counts() noise_complaint_counts / complaint_counts  Output:\nBRONX 0 BROOKLYN 0 MANHATTAN 0 QUEENS 0 STATEN ISLAND 0 Unspecified 0 dtype: int64  Oops, why was that zero? That\u0026rsquo;s no good. This is because of integer division in Python 2. Let\u0026rsquo;s fix it, by converting complaint_counts into an array of floats.\nnoise_complaint_counts / complaint_counts.astype(float)  Output:\nBRONX 0.014833 BROOKLYN 0.013864 MANHATTAN 0.037755 QUEENS 0.010143 STATEN ISLAND 0.007474 Unspecified 0.000141 dtype: float64  Now let\u0026rsquo;s plot it!\n(noise_complaint_counts / complaint_counts.astype(float)).plot(kind='bar')  Output:\n  So Manhattan really does complain more about noise than the other boroughs! Neat.\n"
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter4/",
	"title": "Chapter 4 - Groupby and Aggregate",
	"tags": [],
	"description": "Find out on which weekday people bike the most with groupby and aggregate",
	"content": " %matplotlib inline import pandas as pd import matplotlib.pyplot as plt pd.set_option('display.mpl_style', 'default') # Make the graphs a bit prettier plt.rcParams['figure.figsize'] = (15, 5) plt.rcParams['font.family'] = 'sans-serif' # This is necessary to show lots of columns in pandas 0.12. # Not necessary in pandas 0.13. pd.set_option('display.width', 5000) pd.set_option('display.max_columns', 60)  Okay! We\u0026rsquo;re going back to our bike path dataset here. I live in Montreal, and I was curious about whether we\u0026rsquo;re more of a commuter city or a biking-for-fun city \u0026ndash; do people bike more on weekends, or on weekdays?\n4.1 Adding a \u0026lsquo;weekday\u0026rsquo; column to our dataframe First, we need to load up the data. We\u0026rsquo;ve done this before.\nbikes = pd.read_csv('bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date') bikes['Berri 1'].plot()  Output:  \nNext up, we\u0026rsquo;re just going to look at the Berri bike path. Berri is a street in Montreal, with a pretty important bike path. I use it mostly on my way to the library now, but I used to take it to work sometimes when I worked in Old Montreal. So we\u0026rsquo;re going to create a dataframe with just the Berri bikepath in it\nberri_bikes = bikes[['Berri 1']].copy() berri_bikes[:5]  Output:\n  Berri 1   Date      2012-01-01  35   2012-01-02  83   2012-01-03  135   2012-01-04  144   2012-01-05  197      Next, we need to add a \u0026lsquo;weekday\u0026rsquo; column. Firstly, we can get the weekday from the index. We haven\u0026rsquo;t talked about indexes yet, but the index is what\u0026rsquo;s on the left on the above dataframe, under \u0026lsquo;Date\u0026rsquo;. It\u0026rsquo;s basically all the days of the year.\nberri_bikes.index  Output:\n\u0026lt;class 'pandas.tseries.index.DatetimeIndex'\u0026gt; [2012-01-01, ..., 2012-11-05] Length: 310, Freq: None, Timezone: None  You can see that actually some of the days are missing \u0026ndash; only 310 days of the year are actually there. Who knows why. Pandas has a bunch of really great time series functionality, so if we wanted to get the day of the month for each row, we could do it like this:\nberri_bikes.index.day  Output:\narray([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 3, 4, 5], dtype=int32)  We actually want the weekday, though:\nberri_bikes.index.weekday  Output:\narray([6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0], dtype=int32)  These are the days of the week, where 0 is Monday. I found out that 0 was Monday by checking on a calendar.\nNow that we know how to get the weekday, we can add it as a column in our dataframe like this:\nberri_bikes.loc[:,'weekday'] = berri_bikes.index.weekday berri_bikes[:5]  Output:\n  Berri 1 weekday   Date       2012-01-01  35  6   2012-01-02  83  0   2012-01-03  135  1   2012-01-04  144  2   2012-01-05  197  3      4.2 Adding up the cyclists by weekday This turns out to be really easy! Dataframes have a .groupby() method that is similar to SQL groupby, if you\u0026rsquo;re familiar with that. I\u0026rsquo;m not going to explain more about it right now \u0026ndash; if you want to to know more, the documentation is really good.\nIn this case, berri_bikes.groupby('weekday').aggregate(sum) means\n \u0026ldquo;Group the rows by weekday and then add up all the values with the same weekday.\u0026rdquo;\n weekday_counts = berri_bikes.groupby('weekday').aggregate(sum) weekday_counts  Output:\n  Berri 1   weekday      0  134298   1  135305   2  152972   3  160131   4  141771   5  101578   6  99310      It\u0026rsquo;s hard to remember what 0, 1, 2, 3, 4, 5, 6 mean, so we can fix it up and graph it:\nweekday_counts.index = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] weekday_counts  Output:\n  Berri 1     Monday  134298   Tuesday  135305   Wednesday  152972   Thursday  160131   Friday  141771   Saturday  101578   Sunday  99310      weekday_counts.plot(kind='bar')  Output:\n  So it looks like Montrealers are commuter cyclists \u0026ndash; they bike much more during the week. Neat!\n4.3 Putting it together Let\u0026rsquo;s put all that together, to prove how easy it is. 6 lines of magical pandas! If you want to play around, try changing sum to max, numpy.median, or any other function you like.\nbikes = pd.read_csv('../data/bikes.csv', sep=';', encoding='latin1', parse_dates=['Date'], dayfirst=True, index_col='Date') # Add the weekday column berri_bikes = bikes[['Berri 1']].copy() berri_bikes.loc[:,'weekday'] = berri_bikes.index.weekday # Add up the number of cyclists by weekday, and plot! weekday_counts = berri_bikes.groupby('weekday').aggregate(sum) weekday_counts.index = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] weekday_counts.plot(kind='bar')  Output:\n  "
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter5/",
	"title": "Chapter 5 - Web scraping with Pandas",
	"tags": [],
	"description": "Web scraping with Pandas",
	"content": " %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np pd.set_option('display.mpl_style', 'default') plt.rcParams['figure.figsize'] = (15, 3) plt.rcParams['font.family'] = 'sans-serif'  Summary By the end of this chapter, we\u0026rsquo;re going to have downloaded all of Canada\u0026rsquo;s weather data for 2012, and saved it to a CSV.\nWe\u0026rsquo;ll do this by downloading it one month at a time, and then combining all the months together.\nHere\u0026rsquo;s the temperature every hour for 2012! Download weather_2012.csv and try yourself.\nweather_2012_final = pd.read_csv('weather_2012.csv', index_col='Date/Time') weather_2012_final['Temp (C)'].plot(figsize=(15, 6))  Output:\n  5.1 Downloading one month of weather data When playing with the cycling data, I wanted temperature and precipitation data to find out if people like biking when it\u0026rsquo;s raining. So I went to the site for Canadian historical weather data, and figured out how to get it automatically.\nHere we\u0026rsquo;re going to get the data for March 2012, and clean it up\nHere\u0026rsquo;s an URL template you can use to get data in Montreal.\nurl_template = \u0026quot;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=csv\u0026amp;stationID=5415\u0026amp;Year={year}\u0026amp;Month={month}\u0026amp;timeframe=1\u0026amp;submit=Download+Data\u0026quot;  To get the data for March 2013, we need to format it with month=3, year=2012.\nurl = url_template.format(month=3, year=2012) weather_mar2012 = pd.read_csv(url, index_col='Date/Time', parse_dates=True)  This is super great! We can just use the same read_csv function as before, and just give it a URL as a filename. Awesome.\nThere are 16 rows of metadata at the top of this CSV, but pandas knows CSVs are weird, so there\u0026rsquo;s a skiprows options. We parse the dates again, and set \u0026lsquo;Date/Time\u0026rsquo; to be the index column. Here\u0026rsquo;s the resulting dataframe.\nweather_mar2012  Output:\n  Year Month Day Time Data Quality Temp (Â°C) Temp Flag Dew Point Temp (Â°C) Dew Point Temp Flag Rel Hum (%) ... Wind Spd Flag Visibility (km) Visibility Flag Stn Press (kPa) Stn Press Flag Hmdx Hmdx Flag Wind Chill Wind Chill Flag Weather   Date/Time                          2012-03-01 00:00:00  2012  3  1  00:00   -5.5 NaN -9.7 NaN  72 ...  NaN  4.0 NaN  100.97 NaN NaN NaN -13  NaN  Snow   2012-03-01 01:00:00  2012  3  1  01:00   -5.7 NaN -8.7 NaN  79 ...  NaN  2.4 NaN  100.87 NaN NaN NaN -13  NaN  Snow   2012-03-01 02:00:00  2012  3  1  02:00   -5.4 NaN -8.3 NaN  80 ...  NaN  4.8 NaN  100.80 NaN NaN NaN -13  NaN  Snow   2012-03-01 03:00:00  2012  3  1  03:00   -4.7 NaN -7.7 NaN  79 ...  NaN  4.0 NaN  100.69 NaN NaN NaN -12  NaN  Snow   2012-03-01 04:00:00  2012  3  1  04:00   -5.4 NaN -7.8 NaN  83 ...  NaN  1.6 NaN  100.62 NaN NaN NaN -14  NaN  Snow   2012-03-01 05:00:00  2012  3  1  05:00   -5.3 NaN -7.9 NaN  82 ...  NaN  2.4 NaN  100.58 NaN NaN NaN -14  NaN  Snow   2012-03-01 06:00:00  2012  3  1  06:00   -5.2 NaN -7.8 NaN  82 ...  NaN  4.0 NaN  100.57 NaN NaN NaN -14  NaN  Snow   2012-03-01 07:00:00  2012  3  1  07:00   -4.9 NaN -7.4 NaN  83 ...  NaN  1.6 NaN  100.59 NaN NaN NaN -13  NaN  Snow   2012-03-01 08:00:00  2012  3  1  08:00   -5.0 NaN -7.5 NaN  83 ...  NaN  1.2 NaN  100.59 NaN NaN NaN -13  NaN  Snow   2012-03-01 09:00:00  2012  3  1  09:00   -4.9 NaN -7.5 NaN  82 ...  NaN  1.6 NaN  100.60 NaN NaN NaN -13  NaN  Snow   2012-03-01 10:00:00  2012  3  1  10:00   -4.7 NaN -7.3 NaN  82 ...  NaN  1.2 NaN  100.62 NaN NaN NaN -13  NaN  Snow   2012-03-01 11:00:00  2012  3  1  11:00   -4.4 NaN -6.8 NaN  83 ...  NaN  1.0 NaN  100.66 NaN NaN NaN -12  NaN  Snow   2012-03-01 12:00:00  2012  3  1  12:00   -4.3 NaN -6.8 NaN  83 ...  NaN  1.2 NaN  100.66 NaN NaN NaN -12  NaN  Snow   2012-03-01 13:00:00  2012  3  1  13:00   -4.3 NaN -6.9 NaN  82 ...  NaN  1.2 NaN  100.65 NaN NaN NaN -12  NaN  Snow   2012-03-01 14:00:00  2012  3  1  14:00   -3.9 NaN -6.6 NaN  81 ...  NaN  1.2 NaN  100.67 NaN NaN NaN -11  NaN  Snow   2012-03-01 15:00:00  2012  3  1  15:00   -3.3 NaN -6.2 NaN  80 ...  NaN  1.6 NaN  100.71 NaN NaN NaN -10  NaN  Snow   2012-03-01 16:00:00  2012  3  1  16:00   -2.7 NaN -5.7 NaN  80 ...  NaN  2.4 NaN  100.74 NaN NaN NaN  -8  NaN  Snow   2012-03-01 17:00:00  2012  3  1  17:00   -2.9 NaN -5.9 NaN  80 ...  NaN  4.0 NaN  100.80 NaN NaN NaN  -9  NaN  Snow   2012-03-01 18:00:00  2012  3  1  18:00   -3.0 NaN -6.0 NaN  80 ...  NaN  4.0 NaN  100.87 NaN NaN NaN  -9  NaN  Snow   2012-03-01 19:00:00  2012  3  1  19:00   -3.6 NaN -6.4 NaN  81 ...  NaN  3.2 NaN  100.93 NaN NaN NaN  -9  NaN  Snow   2012-03-01 20:00:00  2012  3  1  20:00   -3.7 NaN -6.4 NaN  81 ...  NaN  4.8 NaN  100.95 NaN NaN NaN -10  NaN  Snow   2012-03-01 21:00:00  2012  3  1  21:00   -3.9 NaN -6.7 NaN  81 ...  NaN  6.4 NaN  100.98 NaN NaN NaN -10  NaN  Snow   2012-03-01 22:00:00  2012  3  1  22:00   -4.3 NaN -6.9 NaN  82 ...  NaN  2.4 NaN  101.00 NaN NaN NaN -11  NaN  Snow   2012-03-01 23:00:00  2012  3  1  23:00   -4.3 NaN -7.1 NaN  81 ...  NaN  4.8 NaN  101.04 NaN NaN NaN -11  NaN  Snow   2012-03-02 00:00:00  2012  3  2  00:00   -4.8 NaN -7.3 NaN  83 ...  NaN  3.2 NaN  101.04 NaN NaN NaN -12  NaN  Snow   2012-03-02 01:00:00  2012  3  2  01:00   -5.3 NaN -7.9 NaN  82 ...  NaN  4.8 NaN  101.09 NaN NaN NaN -12  NaN  Snow   2012-03-02 02:00:00  2012  3  2  02:00   -5.2 NaN -7.8 NaN  82 ...  NaN  6.4 NaN  101.11 NaN NaN NaN -12  NaN  Snow   2012-03-02 03:00:00  2012  3  2  03:00   -5.5 NaN -7.9 NaN  83 ...  NaN  4.8 NaN  101.15 NaN NaN NaN -12  NaN  Snow   2012-03-02 04:00:00  2012  3  2  04:00   -5.6 NaN -8.2 NaN  82 ...  NaN  6.4 NaN  101.15 NaN NaN NaN -13  NaN  Snow   2012-03-02 05:00:00  2012  3  2  05:00   -5.5 NaN -8.3 NaN  81 ...  NaN  12.9 NaN  101.15 NaN NaN NaN -12  NaN  Snow   ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...   2012-03-30 18:00:00  2012  3  30  18:00    3.9 NaN -7.9 NaN  42 ...  NaN  24.1 NaN  101.26 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 19:00:00  2012  3  30  19:00    3.1 NaN -6.7 NaN  49 ...  NaN  25.0 NaN  101.29 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 20:00:00  2012  3  30  20:00    3.0 NaN -8.4 NaN  43 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 21:00:00  2012  3  30  21:00    1.7 NaN -9.0 NaN  45 ...  NaN  25.0 NaN  101.32 NaN NaN NaN NaN  NaN  Cloudy   2012-03-30 22:00:00  2012  3  30  22:00    0.4 NaN -8.1 NaN  53 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-30 23:00:00  2012  3  30  23:00    1.4 NaN -7.7 NaN  51 ...  NaN  25.0 NaN  101.34 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 00:00:00  2012  3  31  00:00    1.5 NaN -8.6 NaN  47 ...  NaN  25.0 NaN  101.33 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 01:00:00  2012  3  31  01:00    1.3 NaN -9.6 NaN  44 ...  NaN  25.0 NaN  101.31 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 02:00:00  2012  3  31  02:00    1.3 NaN -9.7 NaN  44 ...  NaN  25.0 NaN  101.29 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 03:00:00  2012  3  31  03:00    0.7 NaN -8.8 NaN  49 ...  NaN  25.0 NaN  101.30 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 04:00:00  2012  3  31  04:00   -0.9 NaN -8.5 NaN  56 ...  NaN  25.0 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 05:00:00  2012  3  31  05:00   -0.6 NaN -9.2 NaN  52 ...  NaN  25.0 NaN  101.30 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 06:00:00  2012  3  31  06:00   -0.5 NaN -9.2 NaN  52 ...  NaN  48.3 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 07:00:00  2012  3  31  07:00   -0.3 NaN -9.2 NaN  51 ...  NaN  48.3 NaN  101.32 NaN NaN NaN  -5  NaN  Cloudy   2012-03-31 08:00:00  2012  3  31  08:00    0.7 NaN -8.5 NaN  50 ...  NaN  48.3 NaN  101.33 NaN NaN NaN NaN  NaN  Cloudy   2012-03-31 09:00:00  2012  3  31  09:00    1.5 NaN -7.8 NaN  50 ...  NaN  48.3 NaN  101.34 NaN NaN NaN NaN  NaN  Mostly Cloudy   2012-03-31 10:00:00  2012  3  31  10:00    2.9 NaN -8.1 NaN  44 ...  NaN  48.3 NaN  101.30 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 11:00:00  2012  3  31  11:00    4.6 NaN -9.7 NaN  35 ...  NaN  48.3 NaN  101.24 NaN NaN NaN NaN  NaN  Clear   2012-03-31 12:00:00  2012  3  31  12:00    6.4 NaN -7.1 NaN  37 ...  NaN  48.3 NaN  101.16 NaN NaN NaN NaN  NaN  Clear   2012-03-31 13:00:00  2012  3  31  13:00    6.5 NaN -9.7 NaN  30 ...  NaN  48.3 NaN  101.08 NaN NaN NaN NaN  NaN  Clear   2012-03-31 14:00:00  2012  3  31  14:00    7.7 NaN -8.5 NaN  31 ...  NaN  48.3 NaN  101.01 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 15:00:00  2012  3  31  15:00    7.7 NaN -8.6 NaN  30 ...  NaN  48.3 NaN  100.94 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 16:00:00  2012  3  31  16:00    8.4 NaN -7.7 NaN  31 ...  NaN  48.3 NaN  100.89 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 17:00:00  2012  3  31  17:00    7.9 NaN -8.1 NaN  31 ...  NaN  48.3 NaN  100.88 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 18:00:00  2012  3  31  18:00    7.0 NaN -8.2 NaN  33 ...  NaN  48.3 NaN  100.87 NaN NaN NaN NaN  NaN  Mainly Clear   2012-03-31 19:00:00  2012  3  31  19:00    5.9 NaN -8.0 NaN  36 ...  NaN  25.0 NaN  100.88 NaN NaN NaN NaN  NaN  Clear   2012-03-31 20:00:00  2012  3  31  20:00    4.4 NaN -7.2 NaN  43 ...  NaN  25.0 NaN  100.85 NaN NaN NaN NaN  NaN  Clear   2012-03-31 21:00:00  2012  3  31  21:00    2.6 NaN -6.3 NaN  52 ...  NaN  25.0 NaN  100.86 NaN NaN NaN NaN  NaN  Clear   2012-03-31 22:00:00  2012  3  31  22:00    2.7 NaN -6.7 NaN  50 ...  NaN  25.0 NaN  100.82 NaN NaN NaN NaN  NaN  Clear   2012-03-31 23:00:00  2012  3  31  23:00    1.5 NaN -6.9 NaN  54 ...  NaN  25.0 NaN  100.79 NaN NaN NaN NaN  NaN  Clear    744 rows × 24 columns\n  Let\u0026rsquo;s plot it!\nweather_mar2012[u\u0026quot;Temp (\\xc2\\xb0C)\u0026quot;].plot(figsize=(15, 5))  Output:\n  Notice how it goes up to 25° C in the middle there? That was a big deal. It was March, and people were wearing shorts outside.\nAnd I was out of town and I missed it. Still sad, humans.\nI had to write \u0026lsquo;\\xb0\u0026rsquo; for that degree character °. Let\u0026rsquo;s fix up the columns. We\u0026rsquo;re going to just print them out, copy, and fix them up by hand.\nweather_mar2012.columns = [ u'Year', u'Month', u'Day', u'Time', u'Data Quality', u'Temp (C)', u'Temp Flag', u'Dew Point Temp (C)', u'Dew Point Temp Flag', u'Rel Hum (%)', u'Rel Hum Flag', u'Wind Dir (10s deg)', u'Wind Dir Flag', u'Wind Spd (km/h)', u'Wind Spd Flag', u'Visibility (km)', u'Visibility Flag', u'Stn Press (kPa)', u'Stn Press Flag', u'Hmdx', u'Hmdx Flag', u'Wind Chill', u'Wind Chill Flag', u'Weather']  You\u0026rsquo;ll notice in the summary above that there are a few columns which are are either entirely empty or only have a few values in them. Let\u0026rsquo;s get rid of all of those with dropna.\nThe argument axis=1 to dropna means \u0026ldquo;drop columns\u0026rdquo;, not rows\u0026rdquo;, and how='any' means \u0026ldquo;drop the column if any value is null\u0026rdquo;.\nThis is much better now \u0026ndash; we only have columns with real data.\nweather_mar2012 = weather_mar2012.dropna(axis=1, how='any') weather_mar2012[:5]  Output:\n  Year Month Day Time Data Quality Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time                 2012-03-01 00:00:00  2012  3  1  00:00   -5.5 -9.7  72  24  4.0  100.97  Snow   2012-03-01 01:00:00  2012  3  1  01:00   -5.7 -8.7  79  26  2.4  100.87  Snow   2012-03-01 02:00:00  2012  3  1  02:00   -5.4 -8.3  80  28  4.8  100.80  Snow   2012-03-01 03:00:00  2012  3  1  03:00   -4.7 -7.7  79  28  4.0  100.69  Snow   2012-03-01 04:00:00  2012  3  1  04:00   -5.4 -7.8  83  35  1.6  100.62  Snow      The Year/Month/Day/Time columns are redundant, though, and the Data Quality column doesn\u0026rsquo;t look too useful. Let\u0026rsquo;s get rid of those.\nThe axis=1 argument means \u0026ldquo;Drop columns\u0026rdquo;, like before. The default for operations like dropna and drop is always to operate on rows.\nweather_mar2012 = weather_mar2012.drop(['Year', 'Month', 'Day', 'Time', 'Data Quality'], axis=1) weather_mar2012[:5]  Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2012-03-01 00:00:00 -5.5 -9.7  72  24  4.0  100.97  Snow   2012-03-01 01:00:00 -5.7 -8.7  79  26  2.4  100.87  Snow   2012-03-01 02:00:00 -5.4 -8.3  80  28  4.8  100.80  Snow   2012-03-01 03:00:00 -4.7 -7.7  79  28  4.0  100.69  Snow   2012-03-01 04:00:00 -5.4 -7.8  83  35  1.6  100.62  Snow      Awesome! We now only have the relevant columns, and it\u0026rsquo;s much more manageable.\n5.2 Plotting the temperature by hour of day This one\u0026rsquo;s just for fun \u0026ndash; we\u0026rsquo;ve already done this before, using groupby and aggregate! We will learn whether or not it gets colder at night. Well, obviously. But let\u0026rsquo;s do it anyway.\ntemperatures = weather_mar2012[[u'Temp (C)']].copy() print(temperatures.head) temperatures.loc[:,'Hour'] = weather_mar2012.index.hour temperatures.groupby('Hour').aggregate(np.median).plot()  Output:\nDate/Time 2012-03-01 00:00:00 -5.5 2012-03-01 01:00:00 -5.7 2012-03-01 02:00:00 -5.4 2012-03-01 03:00:00 -4.7 2012-03-01 04:00:00 -5.4 2012-03-01 05:00:00 -5.3 2012-03-01 06:00:00 -5.2 2012-03-01 07:00:00 -4.9 2012-03-01 08:00:00 -5.0 2012-03-01 09:00:00 -4.9 2012-03-01 10:00:00 -4.7 2012-03-01 11:00:00 -4.4 2012-03-01 12:00:00 -4.3 2012-03-01 13:00:00 -4.3 2012-03-01 14:00:00 -3.9 2012-03-01 15:00:00 -3.3 2012-03-01 16:00:00 -2.7 2012-03-01 17:00:00 -2.9 2012-03-01 18:00:00 -3.0 2012-03-01 19:00:00 -3.6 2012-03-01 20:00:00 -3.7 2012-03-01 21:00:00 -3.9 2012-03-01 22:00:00 -4.3 2012-03-01 23:00:00 -4.3 2012-03-02 00:00:00 -4.8 2012-03-02 01:00:00 -5.3 2012-03-02 02:00:00 -5.2 2012-03-02 03:00:00 -5.5 2012-03-02 04:00:00 -5.6 2012-03-02 05:00:00 -5.5 ... ... 2012-03-30 18:00:00 3.9 2012-03-30 19:00:00 3.1 2012-03-30 20:00:00 3.0 2012-03-30 21:00:00 1.7 2012-03-30 22:00:00 0.4 2012-03-30 23:00:00 1.4 2012-03-31 00:00:00 1.5 2012-03-31 01:00:00 1.3 2012-03-31 02:00:00 1.3 2012-03-31 03:00:00 0.7 2012-03-31 04:00:00 -0.9 2012-03-31 05:00:00 -0.6 2012-03-31 06:00:00 -0.5 2012-03-31 07:00:00 -0.3 2012-03-31 08:00:00 0.7 2012-03-31 09:00:00 1.5 2012-03-31 10:00:00 2.9 2012-03-31 11:00:00 4.6 2012-03-31 12:00:00 6.4 2012-03-31 13:00:00 6.5 2012-03-31 14:00:00 7.7 2012-03-31 15:00:00 7.7 2012-03-31 16:00:00 8.4 2012-03-31 17:00:00 7.9 2012-03-31 18:00:00 7.0 2012-03-31 19:00:00 5.9 2012-03-31 20:00:00 4.4 2012-03-31 21:00:00 2.6 2012-03-31 22:00:00 2.7 2012-03-31 23:00:00 1.5 [744 rows x 1 columns]\u0026gt;    So it looks like the time with the highest median temperature is 2pm. Neat.\n5.3 Getting the whole year of data Okay, so what if we want the data for the whole year? Ideally the API would just let us download that, but I couldn\u0026rsquo;t figure out a way to do that.\nFirst, let\u0026rsquo;s put our work from above into a function that gets the weather for a given month.\nI noticed that there\u0026rsquo;s an irritating bug where when I ask for January, it gives me data for the previous year, so we\u0026rsquo;ll fix that too. [no, really. You can check =)]\ndef download_weather_month(year, month): if month == 1: year += 1 url = url_template.format(year=year, month=month) weather_data = pd.read_csv(url, skiprows=15, index_col='Date/Time', parse_dates=True, header=True) weather_data = weather_data.dropna(axis=1) weather_data.columns = [col.replace('\\xb0', '') for col in weather_data.columns] weather_data = weather_data.drop(['Year', 'Day', 'Month', 'Time', 'Data Quality'], axis=1) return weather_data  We can test that this function does the right thing:\ndownload_weather_month(2012, 1)[:5]  Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2013-01-01 00:00:00 -1.0  -1.7  95  35  6.4  99.89  Snow   2013-01-01 01:00:00 -2.0  -5.1  79  35  16.1  99.93  Mainly Clear   2013-01-01 02:00:00 -2.7  -6.0  78  28  19.3  100.08  Snow   2013-01-01 03:00:00 -5.6 -11.7  62  30  25.0  100.21  Clear   2013-01-01 04:00:00 -7.7 -12.6  68  35  19.3  100.32  Mainly Clear      Now we can get all the months at once. This will take a little while to run.\ndata_by_month = [download_weather_month(2012, i) for i in range(1, 13)]  Once we have this, it\u0026rsquo;s easy to concatenate all the dataframes together into one big dataframe using pd.concat. And now we have the whole year\u0026rsquo;s data!\nweather_2012 = pd.concat(data_by_month) weather_2012  Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2013-01-01 00:00:00  -1.0  -1.7  95  35  6.4  99.89  Snow   2013-01-01 01:00:00  -2.0  -5.1  79  35  16.1  99.93  Mainly Clear   2013-01-01 02:00:00  -2.7  -6.0  78  28  19.3  100.08  Snow   2013-01-01 03:00:00  -5.6 -11.7  62  30  25.0  100.21  Clear   2013-01-01 04:00:00  -7.7 -12.6  68  35  19.3  100.32  Mainly Clear   2013-01-01 05:00:00  -9.7 -14.8  66  33  25.0  100.47  Clear   2013-01-01 06:00:00 -11.1 -17.0  62  30  25.0  100.65  Clear   2013-01-01 07:00:00 -12.2 -17.2  66  20  25.0  100.78  Clear   2013-01-01 08:00:00 -13.0 -17.7  68  13  24.1  100.87  Clear   2013-01-01 09:00:00 -13.0 -17.3  70  20  24.1  100.86  Clear   2013-01-01 10:00:00 -12.6 -17.8  65  19  24.1  100.90  Clear   2013-01-01 11:00:00 -12.2 -17.6  64  22  24.1  100.88  Mainly Clear   2013-01-01 12:00:00 -11.8 -17.2  64  26  24.1  100.87  Mainly Clear   2013-01-01 13:00:00 -11.3 -17.4  61  26  24.1  100.83  Mainly Clear   2013-01-01 14:00:00 -11.3 -17.4  61  28  24.1  100.82  Mainly Clear   2013-01-01 15:00:00 -11.4 -17.6  60  30  24.1  100.85  Mainly Clear   2013-01-01 16:00:00 -12.0 -18.0  61  22  24.1  100.81  Mainly Clear   2013-01-01 17:00:00 -13.0 -18.4  64  19  25.0  100.90  Clear   2013-01-01 18:00:00 -13.4 -18.4  66  24  25.0  100.96  Clear   2013-01-01 19:00:00 -14.1 -18.7  68  20  25.0  101.02  Clear   2013-01-01 20:00:00 -14.3 -19.0  67  15  25.0  101.04  Clear   2013-01-01 21:00:00 -14.8 -19.5  67  15  25.0  100.98  Mainly Clear   2013-01-01 22:00:00 -16.3 -20.2  72  7  25.0  100.98  Mostly Cloudy   2013-01-01 23:00:00 -15.4 -19.8  69  11  25.0  100.99  Cloudy   2013-01-02 00:00:00 -14.0 -18.4  69  11  19.3  100.96  Snow   2013-01-02 01:00:00 -14.1 -18.3  70  11  25.0  100.91  Mostly Cloudy   2013-01-02 02:00:00 -14.3 -18.3  72  13  25.0  100.94  Snow Showers   2013-01-02 03:00:00 -14.7 -18.0  76  9  19.3  100.91  Snow   2013-01-02 04:00:00 -14.2 -17.1  79  6  9.7  100.83  Snow   2013-01-02 05:00:00 -14.3 -17.0  80  0  6.4  100.81  Snow   ... ... ... ... ... ... ... ...   2012-12-30 18:00:00 -12.6 -16.0  76  24  25.0  101.36  Mainly Clear   2012-12-30 19:00:00 -13.4 -16.5  77  26  25.0  101.47  Mainly Clear   2012-12-30 20:00:00 -13.8 -16.5  80  24  25.0  101.52  Clear   2012-12-30 21:00:00 -13.8 -16.5  80  20  25.0  101.50  Mainly Clear   2012-12-30 22:00:00 -13.7 -16.3  81  19  25.0  101.54  Mainly Clear   2012-12-30 23:00:00 -12.1 -15.1  78  28  25.0  101.52  Mostly Cloudy   2012-12-31 00:00:00 -11.1 -14.4  77  26  25.0  101.51  Cloudy   2012-12-31 01:00:00 -10.7 -14.0  77  15  25.0  101.50  Cloudy   2012-12-31 02:00:00 -10.1 -13.4  77  9  25.0  101.45  Cloudy   2012-12-31 03:00:00 -11.8 -14.4  81  6  25.0  101.42  Mostly Cloudy   2012-12-31 04:00:00 -10.5 -12.8  83  11  25.0  101.34  Cloudy   2012-12-31 05:00:00 -10.2 -12.4  84  6  25.0  101.28  Cloudy   2012-12-31 06:00:00  -9.7 -11.7  85  4  25.0  101.23  Cloudy   2012-12-31 07:00:00  -9.3 -11.3  85  0  19.3  101.19  Snow Showers   2012-12-31 08:00:00  -8.6 -10.3  87  4  3.2  101.14  Snow Showers   2012-12-31 09:00:00  -8.1  -9.6  89  4  2.4  101.09  Snow   2012-12-31 10:00:00  -7.4  -8.9  89  4  6.4  101.05  Snow,Fog   2012-12-31 11:00:00  -6.7  -7.9  91  9  9.7  100.93  Snow   2012-12-31 12:00:00  -5.8  -7.5  88  4  12.9  100.78  Snow   2012-12-31 13:00:00  -4.6  -6.6  86  4  12.9  100.63  Snow   2012-12-31 14:00:00  -3.4  -5.7  84  6  11.3  100.57  Snow   2012-12-31 15:00:00  -2.3  -4.6  84  9  9.7  100.47  Snow   2012-12-31 16:00:00  -1.4  -4.0  82  13  12.9  100.40  Snow   2012-12-31 17:00:00  -1.1  -3.3  85  19  9.7  100.30  Snow   2012-12-31 18:00:00  -1.3  -3.1  88  17  9.7  100.19  Snow   2012-12-31 19:00:00  0.1  -2.7  81  30  9.7  100.13  Snow   2012-12-31 20:00:00  0.2  -2.4  83  24  9.7  100.03  Snow   2012-12-31 21:00:00  -0.5  -1.5  93  28  4.8  99.95  Snow   2012-12-31 22:00:00  -0.2  -1.8  89  28  9.7  99.91  Snow   2012-12-31 23:00:00  0.0  -2.1  86  30  11.3  99.89  Snow    8784 rows × 7 columns\n  5.4 Saving to a CSV It\u0026rsquo;s slow and unnecessary to download the data every time, so let\u0026rsquo;s save our dataframe for later use!\nweather_2012.to_csv('weather_2012.csv')  And we\u0026rsquo;re done!\n"
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter6/",
	"title": "Chapter 6 - String Operations",
	"tags": [],
	"description": "String Operations",
	"content": " %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np pd.set_option('display.mpl_style', 'default') plt.rcParams['figure.figsize'] = (15, 3) plt.rcParams['font.family'] = 'sans-serif'  We saw earlier that pandas is really good at dealing with dates. It is also amazing with strings! We\u0026rsquo;re going to go back to our weather data from Chapter 5, here.\nweather_2012 = pd.read_csv('weather_2012.csv', parse_dates=True, index_col='Date/Time') weather_2012[:5]  Output:\n  Temp (C) Dew Point Temp (C) Rel Hum (%) Wind Spd (km/h) Visibility (km) Stn Press (kPa) Weather   Date/Time            2012-01-01 00:00:00 -1.8 -3.9  86  4  8.0  101.24  Fog   2012-01-01 01:00:00 -1.8 -3.7  87  4  8.0  101.24  Fog   2012-01-01 02:00:00 -1.8 -3.4  89  7  4.0  101.26  Freezing Drizzle,Fog   2012-01-01 03:00:00 -1.5 -3.2  88  6  4.0  101.27  Freezing Drizzle,Fog   2012-01-01 04:00:00 -1.5 -3.3  88  7  4.8  101.23  Fog    5 rows × 7 columns\n  6.1 String operations You\u0026rsquo;ll see that the \u0026lsquo;Weather\u0026rsquo; column has a text description of the weather that was going on each hour. We\u0026rsquo;ll assume it\u0026rsquo;s snowing if the text description contains \u0026ldquo;Snow\u0026rdquo;.\npandas provides vectorized string functions, to make it easy to operate on columns containing text. There are some great examples in the documentation.\nweather_description = weather_2012['Weather'] is_snowing = weather_description.str.contains('Snow')  This gives us a binary vector, which is a bit hard to look at, so we\u0026rsquo;ll plot it.\n# Not super useful is_snowing[:5]  Output:\nDate/Time 2012-01-01 00:00:00 False 2012-01-01 01:00:00 False 2012-01-01 02:00:00 False 2012-01-01 03:00:00 False 2012-01-01 04:00:00 False Name: Weather, dtype: bool  # More useful! is_snowing.plot()  Output:\n  6.2 Use resampling to find the snowiest month If we wanted the median temperature each month, we could use the resample() method like this:\nweather_2012['Temp (C)'].resample('M').apply(np.median).plot(kind='bar')  Output:\n  Unsurprisingly, July and August are the warmest.\nSo we can think of snowiness as being a bunch of 1s and 0s instead of Trues and Falses:\nis_snowing.astype(float)[:10]  Output:\nDate/Time 2012-01-01 00:00:00 0 2012-01-01 01:00:00 0 2012-01-01 02:00:00 0 2012-01-01 03:00:00 0 2012-01-01 04:00:00 0 2012-01-01 05:00:00 0 2012-01-01 06:00:00 0 2012-01-01 07:00:00 0 2012-01-01 08:00:00 0 2012-01-01 09:00:00 0 Name: Weather, dtype: float64  and then use resample to find the percentage of time it was snowing each month\nis_snowing.astype(float).resample('M').apply(np.mean)  Output:\nDate/Time 2012-01-31 0.240591 2012-02-29 0.162356 2012-03-31 0.087366 2012-04-30 0.015278 2012-05-31 0.000000 2012-06-30 0.000000 2012-07-31 0.000000 2012-08-31 0.000000 2012-09-30 0.000000 2012-10-31 0.000000 2012-11-30 0.038889 2012-12-31 0.251344 Freq: M, Name: Weather, dtype: float64  is_snowing.astype(float).resample('M').apply(np.mean).plot(kind='bar')  Output:\n  So now we know! In 2012, December was the snowiest month. Also, this graph suggests something that I feel \u0026ndash; it starts snowing pretty abruptly in November, and then tapers off slowly and takes a long time to stop, with the last snow usually being in April or May.\n6.3 Plotting temperature and snowiness stats together We can also combine these two statistics (temperature, and snowiness) into one dataframe and plot them together:\ntemperature = weather_2012['Temp (C)'].resample('M').apply(np.median) is_snowing = weather_2012['Weather'].str.contains('Snow') snowiness = is_snowing.astype(float).resample('M').apply(np.mean) # Name the columns temperature.name = \u0026quot;Temperature\u0026quot; snowiness.name = \u0026quot;Snowiness\u0026quot;  We\u0026rsquo;ll use concat again to combine the two statistics into a single dataframe.\nstats = pd.concat([temperature, snowiness], axis=1) stats  Output:\n  Temperature Snowiness     2012-01-31  -7.05  0.240591   2012-02-29  -4.10  0.162356   2012-03-31  2.60  0.087366   2012-04-30  6.30  0.015278   2012-05-31  16.05  0.000000   2012-06-30  19.60  0.000000   2012-07-31  22.90  0.000000   2012-08-31  22.20  0.000000   2012-09-30  16.10  0.000000   2012-10-31  11.30  0.000000   2012-11-30  1.05  0.038889   2012-12-31  -2.85  0.251344    12 rows × 2 columns\n  stats.plot(kind='bar')  Output:\n  Uh, that didn\u0026rsquo;t work so well because the scale was wrong. We can do better by plotting them on two separate graphs:\nstats.plot(kind='bar', subplots=True, figsize=(15, 10))  Output:\n  "
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter7/",
	"title": "Chapter 7 - Cleanup messy data",
	"tags": [],
	"description": "Cleanup messy data using Pandas",
	"content": " # The usual preamble import pandas as pd # Make the graphs a bit prettier, and bigger pd.set_option('display.mpl_style', 'default') figsize(15, 5) # Always display all the columns pd.set_option('display.line_width', 5000) pd.set_option('display.max_columns', 60)  One of the main problems with messy data is: how do you know if it\u0026rsquo;s messy or not?\nWe\u0026rsquo;re going to use the NYC 311 service request dataset again here, since it\u0026rsquo;s big and a bit unwieldy.\nrequests = pd.read_csv('311-service-requests.csv')  7.1 How do we know if it\u0026rsquo;s messy? We\u0026rsquo;re going to look at a few columns here. I know already that there are some problems with the zip code, so let\u0026rsquo;s look at that first.\nTo get a sense for whether a column has problems, I usually use .unique() to look at all its values. If it\u0026rsquo;s a numeric column, I\u0026rsquo;ll instead plot a histogram to get a sense of the distribution.\nWhen we look at the unique values in \u0026ldquo;Incident Zip\u0026rdquo;, it quickly becomes clear that this is a mess.\nSome of the problems:\n Some have been parsed as strings, and some as floats There are nans Some of the zip codes are 29616-0759 or 83 There are some N/A values that pandas didn\u0026rsquo;t recognize, like \u0026lsquo;N/A\u0026rsquo; and \u0026lsquo;NO CLUE\u0026rsquo;  What we can do:\n Normalize \u0026lsquo;N/A\u0026rsquo; and \u0026lsquo;NO CLUE\u0026rsquo; into regular nan values Look at what\u0026rsquo;s up with the 83, and decide what to do Make everything strings  requests['Incident Zip'].unique()  Output:\narray(['11432', '11378', '10032', '10023', '10027', '11372', '11419', '11417', '10011', '11225', '11218', '10003', '10029', '10466', '11219', '10025', '10310', '11236', nan, '10033', '11216', '10016', '10305', '10312', '10026', '10309', '10036', '11433', '11235', '11213', '11379', '11101', '10014', '11231', '11234', '10457', '10459', '10465', '11207', '10002', '10034', '11233', '10453', '10456', '10469', '11374', '11221', '11421', '11215', '10007', '10019', '11205', '11418', '11369', '11249', '10005', '10009', '11211', '11412', '10458', '11229', '10065', '10030', '11222', '10024', '10013', '11420', '11365', '10012', '11214', '11212', '10022', '11232', '11040', '11226', '10281', '11102', '11208', '10001', '10472', '11414', '11223', '10040', '11220', '11373', '11203', '11691', '11356', '10017', '10452', '10280', '11217', '10031', '11201', '11358', '10128', '11423', '10039', '10010', '11209', '10021', '10037', '11413', '11375', '11238', '10473', '11103', '11354', '11361', '11106', '11385', '10463', '10467', '11204', '11237', '11377', '11364', '11434', '11435', '11210', '11228', '11368', '11694', '10464', '11415', '10314', '10301', '10018', '10038', '11105', '11230', '10468', '11104', '10471', '11416', '10075', '11422', '11355', '10028', '10462', '10306', '10461', '11224', '11429', '10035', '11366', '11362', '11206', '10460', '10304', '11360', '11411', '10455', '10475', '10069', '10303', '10308', '10302', '11357', '10470', '11367', '11370', '10454', '10451', '11436', '11426', '10153', '11004', '11428', '11427', '11001', '11363', '10004', '10474', '11430', '10000', '10307', '11239', '10119', '10006', '10048', '11697', '11692', '11693', '10573', '00083', 'N/A', '11559', '10020', '77056', '11776', '70711', '10282', '11109', '10044', '02061', '77092-2016', '14225', '55164-0737', '19711', '07306', '000000', 'NO CLUE', '90010', '11747', '23541', '11788', '07604', 11203.0, 11217.0, 11418.0, 11385.0, 10461.0, 11236.0, 11223.0, 11205.0, 11218.0, 11207.0, 11234.0, 11215.0, 11420.0, 10463.0, 11213.0, 10014.0, 10011.0, 11421.0, 10029.0, 11433.0, 11691.0, 11358.0, 11368.0, 11435.0, 11105.0, 11101.0, 11419.0, 11355.0, 11377.0, 11210.0, 10040.0, 11208.0, 11228.0, 10022.0, 11412.0, 11209.0, 11211.0, 10018.0, 11106.0, 11411.0, 11369.0, 11237.0, 11230.0, 11364.0, 10472.0, 10304.0, 10075.0, 11249.0, 10032.0, 10016.0, 10308.0, 10306.0, 11225.0, 10006.0, 10009.0, 10033.0, 11104.0, 11204.0, 11415.0, 11103.0, 10025.0, 10473.0, 10469.0, 10466.0, 11231.0, 11226.0, 10455.0, 10019.0, 11220.0, 10459.0, 10002.0, 10039.0, 10026.0, 10456.0, 10468.0, 11222.0, 11214.0, 10470.0, 11373.0, 11367.0, 10302.0, 11235.0, 10128.0, 10467.0, 10458.0, 10475.0, 10474.0, 10453.0, 10462.0, 10301.0, 10065.0, 11221.0, 10031.0, 10460.0, 11233.0, 10457.0, 10027.0, 10003.0, 10038.0, 11212.0, 11206.0, 11434.0, 11361.0, 10036.0, 10005.0, 10024.0, 10035.0, 10030.0, 11694.0, 10454.0, 11238.0, 10464.0, 10452.0, 10037.0, 11219.0, 11216.0, 10028.0, 10451.0, 11229.0, 11422.0, 10010.0, 10023.0, 11692.0, 11374.0, 11416.0, 11429.0, 10314.0, 11375.0, 11354.0, 11378.0, 10303.0, 10034.0, 11423.0, 11372.0, 11379.0, 10007.0, 11201.0, 10001.0, 10310.0, 10012.0, 10309.0, 11232.0, 11224.0, 10305.0, 11693.0, 10021.0, 11432.0, 11356.0, 11436.0, 10312.0, 11413.0, 11102.0, 10013.0, 10471.0, 11417.0, 11365.0, 11004.0, 11366.0, 11362.0, 11370.0, 11357.0, 10112.0, 10017.0, 10307.0, 10465.0, 11426.0, 10280.0, 11430.0, 11109.0, 11414.0, 11788.0, 11563.0, 11580.0, 11427.0, 11428.0, 10000.0, 7087.0, 10282.0, 11360.0, 10020.0, 83.0, 10004.0, 11363.0, 11042.0, 11040.0, 7093.0, 10119.0, 11501.0, 92123.0, 11697.0, 0.0, 11575.0, 11239.0, 7109.0, 11797.0, 10069.0, '10803', '11716', '11722', '11549-3650', '10162', '92123', '23502', '11518', '07020', '08807', '11577', '07114', '11003', '07201', '11563', '61702', '10103', '29616-0759', '35209-3114', '11520', '11735', '10129', '11005', '41042', '11590', 6901.0, 7208.0, 10048.0, 11530.0, 13221.0, 10954.0, 11001.0, 11735.0, 10103.0, 10044.0, 7114.0, 11111.0, 10107.0], dtype=object)  7.2 Fixing the nan values and string/float confusion We can pass a na_values option to pd.read_csv to clean this up a little bit. We can also specify that the type of Incident Zip is a string, not a float.\nna_values = ['NO CLUE', 'N/A', '0'] requests = pd.read_csv('../data/311-service-requests.csv', na_values=na_values, dtype={'Incident Zip': str}) requests['Incident Zip'].unique()  Output:\narray(['11432', '11378', '10032', '10023', '10027', '11372', '11419', '11417', '10011', '11225', '11218', '10003', '10029', '10466', '11219', '10025', '10310', '11236', nan, '10033', '11216', '10016', '10305', '10312', '10026', '10309', '10036', '11433', '11235', '11213', '11379', '11101', '10014', '11231', '11234', '10457', '10459', '10465', '11207', '10002', '10034', '11233', '10453', '10456', '10469', '11374', '11221', '11421', '11215', '10007', '10019', '11205', '11418', '11369', '11249', '10005', '10009', '11211', '11412', '10458', '11229', '10065', '10030', '11222', '10024', '10013', '11420', '11365', '10012', '11214', '11212', '10022', '11232', '11040', '11226', '10281', '11102', '11208', '10001', '10472', '11414', '11223', '10040', '11220', '11373', '11203', '11691', '11356', '10017', '10452', '10280', '11217', '10031', '11201', '11358', '10128', '11423', '10039', '10010', '11209', '10021', '10037', '11413', '11375', '11238', '10473', '11103', '11354', '11361', '11106', '11385', '10463', '10467', '11204', '11237', '11377', '11364', '11434', '11435', '11210', '11228', '11368', '11694', '10464', '11415', '10314', '10301', '10018', '10038', '11105', '11230', '10468', '11104', '10471', '11416', '10075', '11422', '11355', '10028', '10462', '10306', '10461', '11224', '11429', '10035', '11366', '11362', '11206', '10460', '10304', '11360', '11411', '10455', '10475', '10069', '10303', '10308', '10302', '11357', '10470', '11367', '11370', '10454', '10451', '11436', '11426', '10153', '11004', '11428', '11427', '11001', '11363', '10004', '10474', '11430', '10000', '10307', '11239', '10119', '10006', '10048', '11697', '11692', '11693', '10573', '00083', '11559', '10020', '77056', '11776', '70711', '10282', '11109', '10044', '02061', '77092-2016', '14225', '55164-0737', '19711', '07306', '000000', '90010', '11747', '23541', '11788', '07604', '10112', '11563', '11580', '07087', '11042', '07093', '11501', '92123', '00000', '11575', '07109', '11797', '10803', '11716', '11722', '11549-3650', '10162', '23502', '11518', '07020', '08807', '11577', '07114', '11003', '07201', '61702', '10103', '29616-0759', '35209-3114', '11520', '11735', '10129', '11005', '41042', '11590', '06901', '07208', '11530', '13221', '10954', '11111', '10107'], dtype=object)  7.3 What\u0026rsquo;s up with the dashes? rows_with_dashes = requests['Incident Zip'].str.contains('-').fillna(False) len(requests[rows_with_dashes])  Output:\n5  requests[rows_with_dashes]  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     29136  26550551  10/24/2013 06:16:34 PM  NaN  DCA  Department of Consumer Affairs  Consumer Complaint  False Advertising  NaN  77092-2016  2700 EAST SELTICE WAY  EAST SELTICE WAY  NaN  NaN  NaN  NaN  NaN  HOUSTON  NaN  NaN  Assigned  11/13/2013 11:15:20 AM  10/29/2013 11:16:16 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   30939  26548831  10/24/2013 09:35:10 AM  NaN  DCA  Department of Consumer Affairs  Consumer Complaint  Harassment  NaN  55164-0737  P.O. BOX 64437  64437  NaN  NaN  NaN  NaN  NaN  ST. PAUL  NaN  NaN  Assigned  11/13/2013 02:30:21 PM  10/29/2013 02:31:06 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   70539  26488417  10/15/2013 03:40:33 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  Street  11549-3650  365 HOFSTRA UNIVERSITY  HOFSTRA UNIVERSITY  NaN  NaN  NaN  NaN  NaN  HEMSTEAD  NaN  NaN  Assigned  11/30/2013 01:20:33 PM  10/16/2013 01:21:39 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  La Guardia Airport  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   85821  26468296  10/10/2013 12:36:43 PM  10/26/2013 01:07:07 AM  DCA  Department of Consumer Affairs  Consumer Complaint  Debt Not Owed  NaN  29616-0759  PO BOX 25759  BOX 25759  NaN  NaN  NaN  NaN  NaN  GREENVILLE  NaN  NaN  Closed  10/26/2013 09:20:28 AM  10/26/2013 01:07:07 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   89304  26461137  10/09/2013 05:23:46 PM  10/25/2013 01:06:41 AM  DCA  Department of Consumer Affairs  Consumer Complaint  Harassment  NaN  35209-3114  600 BEACON PKWY  BEACON PKWY  NaN  NaN  NaN  NaN  NaN  BIRMINGHAM  NaN  NaN  Closed  10/25/2013 02:43:42 PM  10/25/2013 01:06:41 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN      I thought these were missing data and originally deleted them like this:\nrequests['Incident Zip'][rows_with_dashes] = np.nan  But then my friend pointed out that 9-digit zip codes are normal. Let\u0026rsquo;s look at all the zip codes with more than 5 digits, make sure they\u0026rsquo;re okay, and then truncate them.\nlong_zip_codes = requests['Incident Zip'].str.len() \u0026gt; 5 requests['Incident Zip'][long_zip_codes].unique()  Output:\narray(['77092-2016', '55164-0737', '000000', '11549-3650', '29616-0759', '35209-3114'], dtype=object)  Those all look okay to truncate to me.\nrequests['Incident Zip'] = requests['Incident Zip'].str.slice(0, 5)  Done.\nEarlier I thought 00083 was a broken zip code, but turns out Central Park\u0026rsquo;s zip code 00083! Shows what I know. I\u0026rsquo;m still concerned about the 00000 zip codes, though: let\u0026rsquo;s look at that.\nrequests[requests['Incident Zip'] == '00000']  Output:\n  Unique Key Created Date Closed Date Agency Agency Name Complaint Type Descriptor Location Type Incident Zip Incident Address Street Name Cross Street 1 Cross Street 2 Intersection Street 1 Intersection Street 2 Address Type City Landmark Facility Type Status Due Date Resolution Action Updated Date Community Board Borough X Coordinate (State Plane) Y Coordinate (State Plane) Park Facility Name Park Borough School Name School Number School Region School Code School Phone Number School Address School City School State School Zip School Not Found School or Citywide Complaint Vehicle Type Taxi Company Borough Taxi Pick Up Location Bridge Highway Name Bridge Highway Direction Road Ramp Bridge Highway Segment Garage Lot Name Ferry Direction Ferry Terminal Name Latitude Longitude Location     42600  26529313  10/22/2013 02:51:06 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  NaN  00000  EWR EWR  EWR  NaN  NaN  NaN  NaN  NaN  NEWARK  NaN  NaN  Assigned  12/07/2013 09:53:51 AM  10/23/2013 09:54:43 AM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN   60843  26507389  10/17/2013 05:48:44 PM  NaN  TLC  Taxi and Limousine Commission  Taxi Complaint  Driver Complaint  Street  00000  1 NEWARK AIRPORT  NEWARK AIRPORT  NaN  NaN  NaN  NaN  NaN  NEWARK  NaN  NaN  Assigned  12/02/2013 11:59:46 AM  10/18/2013 12:01:08 PM  0 Unspecified  Unspecified NaN NaN  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  Unspecified  N NaN  NaN  NaN  Other  NaN  NaN  NaN  NaN  NaN  NaN  NaN NaN NaN  NaN      This looks bad to me. Let\u0026rsquo;s set these to nan.\nzero_zips = requests['Incident Zip'] == '00000' requests['Incident Zip'][zero_zips] = np.nan  Great. Let\u0026rsquo;s see where we are now:\nunique_zips = requests['Incident Zip'].unique() unique_zips.sort() unique_zips  Output:\narray([nan, '00083', '02061', '06901', '07020', '07087', '07093', '07109', '07114', '07201', '07208', '07306', '07604', '08807', '10000', '10001', '10002', '10003', '10004', '10005', '10006', '10007', '10009', '10010', '10011', '10012', '10013', '10014', '10016', '10017', '10018', '10019', '10020', '10021', '10022', '10023', '10024', '10025', '10026', '10027', '10028', '10029', '10030', '10031', '10032', '10033', '10034', '10035', '10036', '10037', '10038', '10039', '10040', '10044', '10048', '10065', '10069', '10075', '10103', '10107', '10112', '10119', '10128', '10129', '10153', '10162', '10280', '10281', '10282', '10301', '10302', '10303', '10304', '10305', '10306', '10307', '10308', '10309', '10310', '10312', '10314', '10451', '10452', '10453', '10454', '10455', '10456', '10457', '10458', '10459', '10460', '10461', '10462', '10463', '10464', '10465', '10466', '10467', '10468', '10469', '10470', '10471', '10472', '10473', '10474', '10475', '10573', '10803', '10954', '11001', '11003', '11004', '11005', '11040', '11042', '11101', '11102', '11103', '11104', '11105', '11106', '11109', '11111', '11201', '11203', '11204', '11205', '11206', '11207', '11208', '11209', '11210', '11211', '11212', '11213', '11214', '11215', '11216', '11217', '11218', '11219', '11220', '11221', '11222', '11223', '11224', '11225', '11226', '11228', '11229', '11230', '11231', '11232', '11233', '11234', '11235', '11236', '11237', '11238', '11239', '11249', '11354', '11355', '11356', '11357', '11358', '11360', '11361', '11362', '11363', '11364', '11365', '11366', '11367', '11368', '11369', '11370', '11372', '11373', '11374', '11375', '11377', '11378', '11379', '11385', '11411', '11412', '11413', '11414', '11415', '11416', '11417', '11418', '11419', '11420', '11421', '11422', '11423', '11426', '11427', '11428', '11429', '11430', '11432', '11433', '11434', '11435', '11436', '11501', '11518', '11520', '11530', '11549', '11559', '11563', '11575', '11577', '11580', '11590', '11691', '11692', '11693', '11694', '11697', '11716', '11722', '11735', '11747', '11776', '11788', '11797', '13221', '14225', '19711', '23502', '23541', '29616', '35209', '41042', '55164', '61702', '70711', '77056', '77092', '90010', '92123'], dtype=object)  Amazing! This is much cleaner. There\u0026rsquo;s something a bit weird here, though \u0026ndash; I looked up 77056 on Google maps, and that\u0026rsquo;s in Texas.\nLet\u0026rsquo;s take a closer look:\nzips = requests['Incident Zip'] # Let's say the zips starting with '0' and '1' are okay, for now. (this isn't actually true -- 13221 is in Syracuse, and why?) is_close = zips.str.startswith('0') | zips.str.startswith('1') # There are a bunch of NaNs, but we're not interested in them right now, so we'll say they're True is_far = ~(is_close.fillna(True).astype(bool)) zips[is_far]  Output:\n12102 77056 13450 70711 29136 77092 30939 55164 44008 90010 47048 23541 57636 92123 71001 92123 71834 23502 80573 61702 85821 29616 89304 35209 94201 41042 Name: Incident Zip, dtype: object  requests[is_far][['Incident Zip', 'Descriptor', 'City']].sort('Incident Zip')  Output:\n  Incident Zip Descriptor City     71834  23502  Harassment  NORFOLK   47048  23541  Harassment  NORFOLK   85821  29616  Debt Not Owed  GREENVILLE   89304  35209  Harassment  BIRMINGHAM   94201  41042  Harassment  FLORENCE   30939  55164  Harassment  ST. PAUL   80573  61702  Billing Dispute  BLOOMIGTON   13450  70711  Contract Dispute  CLIFTON   12102  77056  Debt Not Owed  HOUSTON   29136  77092  False Advertising  HOUSTON   44008  90010  Billing Dispute  LOS ANGELES   57636  92123  Harassment  SAN DIEGO   71001  92123  Billing Dispute  SAN DIEGO      Okay, there really are requests coming from LA and Houston! Good to know. Filtering by zip code is probably a bad way to handle this \u0026ndash; we should really be looking at the city instead.\nrequests['City'].str.upper().value_counts()  Output:\nBROOKLYN 31662 NEW YORK 22664 BRONX 18438 STATEN ISLAND 4766 JAMAICA 2246 FLUSHING 1803 ASTORIA 1568 RIDGEWOOD 1073 CORONA 707 OZONE PARK 693 LONG ISLAND CITY 678 FAR ROCKAWAY 652 ELMHURST 647 WOODSIDE 609 EAST ELMHURST 562 ... MELVILLE 1 PORT JEFFERSON STATION 1 NORWELL 1 EAST ROCKAWAY 1 BIRMINGHAM 1 ROSLYN 1 LOS ANGELES 1 MINEOLA 1 JERSEY CITY 1 ST. PAUL 1 CLIFTON 1 COL.ANVURES 1 EDGEWATER 1 ROSELYN 1 CENTRAL ISLIP 1 Length: 100, dtype: int64  It looks like these are legitimate complaints, so we\u0026rsquo;ll just leave them alone.\n7.4 Putting it together Here\u0026rsquo;s what we ended up doing to clean up our zip codes, all together:\nna_values = ['NO CLUE', 'N/A', '0'] requests = pd.read_csv('311-service-requests.csv', na_values=na_values, dtype={'Incident Zip': str}) def fix_zip_codes(zips): # Truncate everything to length 5 zips = zips.str.slice(0, 5) # Set 00000 zip codes to nan zero_zips = zips == '00000' zips[zero_zips] = np.nan return zips requests['Incident Zip'] = fix_zip_codes(requests['Incident Zip']) requests['Incident Zip'].unique()  Output:\narray(['11432', '11378', '10032', '10023', '10027', '11372', '11419', '11417', '10011', '11225', '11218', '10003', '10029', '10466', '11219', '10025', '10310', '11236', nan, '10033', '11216', '10016', '10305', '10312', '10026', '10309', '10036', '11433', '11235', '11213', '11379', '11101', '10014', '11231', '11234', '10457', '10459', '10465', '11207', '10002', '10034', '11233', '10453', '10456', '10469', '11374', '11221', '11421', '11215', '10007', '10019', '11205', '11418', '11369', '11249', '10005', '10009', '11211', '11412', '10458', '11229', '10065', '10030', '11222', '10024', '10013', '11420', '11365', '10012', '11214', '11212', '10022', '11232', '11040', '11226', '10281', '11102', '11208', '10001', '10472', '11414', '11223', '10040', '11220', '11373', '11203', '11691', '11356', '10017', '10452', '10280', '11217', '10031', '11201', '11358', '10128', '11423', '10039', '10010', '11209', '10021', '10037', '11413', '11375', '11238', '10473', '11103', '11354', '11361', '11106', '11385', '10463', '10467', '11204', '11237', '11377', '11364', '11434', '11435', '11210', '11228', '11368', '11694', '10464', '11415', '10314', '10301', '10018', '10038', '11105', '11230', '10468', '11104', '10471', '11416', '10075', '11422', '11355', '10028', '10462', '10306', '10461', '11224', '11429', '10035', '11366', '11362', '11206', '10460', '10304', '11360', '11411', '10455', '10475', '10069', '10303', '10308', '10302', '11357', '10470', '11367', '11370', '10454', '10451', '11436', '11426', '10153', '11004', '11428', '11427', '11001', '11363', '10004', '10474', '11430', '10000', '10307', '11239', '10119', '10006', '10048', '11697', '11692', '11693', '10573', '00083', '11559', '10020', '77056', '11776', '70711', '10282', '11109', '10044', '02061', '77092', '14225', '55164', '19711', '07306', '90010', '11747', '23541', '11788', '07604', '10112', '11563', '11580', '07087', '11042', '07093', '11501', '92123', '11575', '07109', '11797', '10803', '11716', '11722', '11549', '10162', '23502', '11518', '07020', '08807', '11577', '07114', '11003', '07201', '61702', '10103', '29616', '35209', '11520', '11735', '10129', '11005', '41042', '11590', '06901', '07208', '11530', '13221', '10954', '11111', '10107'], dtype=object)  "
},
{
	"uri": "http://tutswiki.com/pandas-cookbook/chapter8/",
	"title": "Chapter 8 - Parsing Unix timestamps",
	"tags": [],
	"description": "Parsing Unix timestamps",
	"content": " 8.1 Parsing Unix timestamps It\u0026rsquo;s not obvious how to deal with Unix timestamps in pandas \u0026ndash; it took me quite a while to figure this out. The file we\u0026rsquo;re using here is a popularity-contest file I found on my system at /var/log/popularity-contest.\nHere\u0026rsquo;s an explanation of how this file works.\nI\u0026rsquo;m going to hope that nothing in it is sensitive :)\nimport pandas as pd # Read it, and remove the last row popcon = pd.read_csv('popularity-contest', sep=' ', )[:-1] popcon.columns = ['atime', 'ctime', 'package-name', 'mru-program', 'tag'] popcon[:5]  The colums are the access time, created time, package name, recently used program, and a tag\nOutput:\n  atime ctime package-name mru-program tag     0  1387295797  1367633260  perl-base  /usr/bin/perl  NaN   1  1387295796  1354370480  login  /bin/su  NaN   2  1387295743  1354341275  libtalloc2  /usr/lib/x86_64-linux-gnu/libtalloc.so.2.0.7  NaN   3  1387295743  1387224204  libwbclient0  /usr/lib/x86_64-linux-gnu/libwbclient.so.0  \u0026lt;RECENT-CTIME\u0026gt;   4  1387295742  1354341253  libselinux1  /lib/x86_64-linux-gnu/libselinux.so.1  NaN      The magical part about parsing timestamps in pandas is that numpy datetimes are already stored as Unix timestamps. So all we need to do is tell pandas that these integers are actually datetimes \u0026ndash; it doesn\u0026rsquo;t need to do any conversion at all.\nWe need to convert these to ints to start:\npopcon['atime'] = popcon['atime'].astype(int) popcon['ctime'] = popcon['ctime'].astype(int)  Every numpy array and pandas series has a dtype \u0026ndash; this is usually int64, float64, or object. Some of the time types available are datetime64[s], datetime64[ms], and datetime64[us]. There are also timedelta types, similarly.\nWe can use the pd.to_datetime function to convert our integer timestamps into datetimes. This is a constant-time operation \u0026ndash; we\u0026rsquo;re not actually changing any of the data, just how pandas thinks about it.\npopcon['atime'] = pd.to_datetime(popcon['atime'], unit='s') popcon['ctime'] = pd.to_datetime(popcon['ctime'], unit='s') popcon['atime'].dtype  Output:\ndtype('\u0026lt;M8[ns]')  If we look at the dtype now, it\u0026rsquo;s \u0026lt;M8[ns]. As far as I can tell M8 is secret code for datetime64.\nSo now we can look at our atime and ctime as dates!\npopcon[:5]  Output:\n  atime ctime package-name mru-program tag     0 2013-12-17 15:56:37 2013-05-04 02:07:40  perl-base  /usr/bin/perl  NaN   1 2013-12-17 15:56:36 2012-12-01 14:01:20  login  /bin/su  NaN   2 2013-12-17 15:55:43 2012-12-01 05:54:35  libtalloc2  /usr/lib/x86_64-linux-gnu/libtalloc.so.2.0.7  NaN   3 2013-12-17 15:55:43 2013-12-16 20:03:24  libwbclient0  /usr/lib/x86_64-linux-gnu/libwbclient.so.0  \u0026lt;RECENT-CTIME\u0026gt;   4 2013-12-17 15:55:42 2012-12-01 05:54:13  libselinux1  /lib/x86_64-linux-gnu/libselinux.so.1  NaN      Now suppose we want to look at all packages that aren\u0026rsquo;t libraries.\nFirst, I want to get rid of everything with timestamp 0. Notice how we can just use a string in this comparison, even though it\u0026rsquo;s actually a timestamp on the inside? That is because pandas is amazing.\npopcon = popcon[popcon['atime'] \u0026gt; '1970-01-01']  Now we can use pandas\u0026rsquo; magical string abilities to just look at rows where the package name doesn\u0026rsquo;t contain \u0026lsquo;lib\u0026rsquo;.\nnonlibraries = popcon[~popcon['package-name'].str.contains('lib')] nonlibraries.sort('ctime', ascending=False)[:10]  Output:\n  atime ctime package-name mru-program tag     57  2013-12-17 04:55:39 2013-12-17 04:55:42  ddd  /usr/bin/ddd  \u0026lt;RECENT-CTIME\u0026gt;   450 2013-12-16 20:03:20 2013-12-16 20:05:13  nodejs  /usr/bin/npm  \u0026lt;RECENT-CTIME\u0026gt;   454 2013-12-16 20:03:20 2013-12-16 20:05:04  switchboard-plug-keyboard  /usr/lib/plugs/pantheon/keyboard/options.txt  \u0026lt;RECENT-CTIME\u0026gt;   445 2013-12-16 20:03:20 2013-12-16 20:05:04  thunderbird-locale-en  /usr/lib/thunderbird-addons/extensions/langpac...  \u0026lt;RECENT-CTIME\u0026gt;   396 2013-12-16 20:08:27 2013-12-16 20:05:03  software-center  /usr/sbin/update-software-center  \u0026lt;RECENT-CTIME\u0026gt;   449 2013-12-16 20:03:20 2013-12-16 20:05:00  samba-common-bin  /usr/bin/net.samba3  \u0026lt;RECENT-CTIME\u0026gt;   397 2013-12-16 20:08:25 2013-12-16 20:04:59  postgresql-client-9.1  /usr/lib/postgresql/9.1/bin/psql  \u0026lt;RECENT-CTIME\u0026gt;   398 2013-12-16 20:08:23 2013-12-16 20:04:58  postgresql-9.1  /usr/lib/postgresql/9.1/bin/postmaster  \u0026lt;RECENT-CTIME\u0026gt;   452 2013-12-16 20:03:20 2013-12-16 20:04:55  php5-dev  /usr/include/php5/main/snprintf.h  \u0026lt;RECENT-CTIME\u0026gt;   440 2013-12-16 20:03:20 2013-12-16 20:04:54  php-pear  /usr/share/php/XML/Util.php  \u0026lt;RECENT-CTIME\u0026gt;      Okay, cool, it says that I I installed ddd recently. And postgresql! I remember installing those things. Neat.\nThe whole message here is that if you have a timestamp in seconds or milliseconds or nanoseconds, then you can just \u0026ldquo;cast\u0026rdquo; it to a datetime64[the-right-thing] and pandas/numpy will take care of the rest.\nWhere from here? This was an attempt to provide concise cookbook with real life examples. We suggest you to have a look at the official cookbook also.\n"
},
{
	"uri": "http://tutswiki.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://tutswiki.com/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://tutswiki.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://tutswiki.com/",
	"title": "TutsWiki Beta",
	"tags": [],
	"description": "",
	"content": ""
}]